<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE module [<!ENTITY components SYSTEM "components.xml">]>
<dev:module xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dev="http://www.amx.com/duet/devicesdk"  xsi:schemaLocation="http://www.amx.com/duet/devicesdk/module.xsd">
	<dev:header>
		<dev:manifest-version>1.0.0</dev:manifest-version>
		<dev:amx-type>Duet</dev:amx-type>
		<dev:bundle-name>Bose_ESP88_Comm_dr1_0_0</dev:bundle-name>
		<dev:device-make>Bose</dev:device-make>
		<dev:duet-firmware-version>v3.30.371</dev:duet-firmware-version>
		<dev:device-channels>310</dev:device-channels>
		<dev:device-levels>210</dev:device-levels>
		<dev:device-models>
			<dev:device-model>ESP88</dev:device-model>
		</dev:device-models>
		<dev:device-category>serial,rs-232</dev:device-category>
		<dev:device-sdkclass>com.amx.duet.devicesdk.AudioMixer</dev:device-sdkclass>
		<dev:device-sdkinterface>com.amx.duet.devicesdk.IAudioMixer2</dev:device-sdkinterface>
		<dev:device-class>com.amx.duet.impl.bose.esp88.dr1_0_0.BoseEsp88</dev:device-class>
		<dev:device-revision>1.0.0</dev:device-revision>
		<dev:router-service>com.amx.duet.routers.snapi.ISNAPIRouter</dev:router-service>
		<dev:bundle-activator>com.amx.duet.impl.bose.esp88.dr1_0_0.Activator</dev:bundle-activator>
		<dev:bundle-version>1.0.0</dev:bundle-version>
		<dev:bundle-vendor>AMX Corporation</dev:bundle-vendor>
		<dev:bundle-copyright>(C) Copyright AMX Corp. 2004-2008. All Rights Reserved.</dev:bundle-copyright>
		<dev:import-packages>
			<dev:import-package version="1.1">org.osgi.service.http</dev:import-package>
			<dev:import-package version="1.0.1">org.osgi.service.device</dev:import-package>
			<dev:import-package version="1.0.1">com.amx.duet.driver</dev:import-package>
			<dev:import-package version="1.0.1">com.amx.duet.core.osgi</dev:import-package>
			<dev:import-package version="1.0.1">com.amx.duet.da</dev:import-package>
			<dev:import-package version="1.0.1">com.amx.duet.util.metadata</dev:import-package>
			<dev:import-package version="1.0.1">com.amx.duet.util</dev:import-package>
			<dev:import-package version="1.9.0">com.amx.duet.devicesdk</dev:import-package>
			<dev:import-package version="1.9.0">com.amx.duet.devicesdk.base</dev:import-package>
			<dev:import-package version="1.9.0">com.amx.duet.devicesdk.component</dev:import-package>
			<dev:import-package version="1.9.0">com.amx.duet.devicesdk.type</dev:import-package>
		</dev:import-packages>
		<dev:export-packages>
			<dev:export-package version="1.0.0">com.amx.duet.impl.bose.esp88.dr1_0_0</dev:export-package>
			<dev:export-package version="1.0.0">com.amx.duet.tools.bose.esp88.comm.component.dr1_0_0</dev:export-package>
			<dev:export-package version="1.0.0">com.amx.duet.tools.bose.esp88.comm.dr1_0_0</dev:export-package>
			<dev:export-package version="1.0.0">com.amx.duet.tools.bose.esp88.io.dr1_0_0</dev:export-package>
			<dev:export-package version="1.0.0">com.amx.duet.tools.bose.esp88.json.dr1_0_0</dev:export-package>
			<dev:export-package version="1.0.0">com.amx.duet.tools.bose.esp88.lang.dr1_0_0</dev:export-package>
			<dev:export-package version="1.0.0">com.amx.duet.tools.bose.esp88.math.dr1_0_0</dev:export-package>
			<dev:export-package version="1.0.0">com.amx.duet.tools.bose.esp88.net.http.dr1_0_0</dev:export-package>
			<dev:export-package version="1.0.0">com.amx.duet.tools.bose.esp88.net.tcp.dr1_0_0</dev:export-package>
			<dev:export-package version="1.0.0">com.amx.duet.tools.bose.esp88.regexp.dr1_0_0</dev:export-package>
			<dev:export-package version="1.0.0">com.amx.duet.tools.bose.esp88.text.dr1_0_0</dev:export-package>
			<dev:export-package version="1.0.0">com.amx.duet.tools.bose.esp88.util.dr1_0_0</dev:export-package>
		</dev:export-packages>
		<dev:file-dependencies>
			<dev:file-dependency version="1.9.0">devicesdkrt.jar</dev:file-dependency>
			<dev:file-dependency version="1.9.0">snapirouter.jar</dev:file-dependency>
		</dev:file-dependencies>
		<dev:device-interface>com.amx.duet.impl.bose.esp88.dr1_0_0.IBoseEsp88</dev:device-interface>
		<dev:user-defined-entries>
			<dev:user-defined-entry>
				<dev:user-defined-entry-name>Num-Inputs</dev:user-defined-entry-name>
				<dev:user-defined-entry-value>blank</dev:user-defined-entry-value>
			</dev:user-defined-entry>
			<dev:user-defined-entry>
				<dev:user-defined-entry-name>Num-Outputs</dev:user-defined-entry-name>
				<dev:user-defined-entry-value>blank</dev:user-defined-entry-value>
			</dev:user-defined-entry>
		</dev:user-defined-entries>
		<dev:module-init-entries>
			<dev:module-init-entry>
				<dev:module-init-entry-name>blockNameToneEQ</dev:module-init-entry-name>
				<dev:module-init-entry-datatype>String</dev:module-init-entry-datatype>
				<dev:module-init-entry-value>#ToneEQ</dev:module-init-entry-value>
				<dev:module-init-entry-range></dev:module-init-entry-range>
			</dev:module-init-entry>
			<dev:module-init-entry>
				<dev:module-init-entry-name>blockNameSelector</dev:module-init-entry-name>
				<dev:module-init-entry-datatype>String</dev:module-init-entry-datatype>
				<dev:module-init-entry-value>#Selector2</dev:module-init-entry-value>
				<dev:module-init-entry-range></dev:module-init-entry-range>
			</dev:module-init-entry>
			<dev:module-init-entry>
				<dev:module-init-entry-name>blockNameMixer</dev:module-init-entry-name>
				<dev:module-init-entry-datatype>String</dev:module-init-entry-datatype>
				<dev:module-init-entry-value>#Mixer</dev:module-init-entry-value>
				<dev:module-init-entry-range></dev:module-init-entry-range>
			</dev:module-init-entry>
			<dev:module-init-entry>
				<dev:module-init-entry-name>blockNameStMixer</dev:module-init-entry-name>
				<dev:module-init-entry-datatype>String</dev:module-init-entry-datatype>
				<dev:module-init-entry-value>#StdMixer</dev:module-init-entry-value>
				<dev:module-init-entry-range></dev:module-init-entry-range>
			</dev:module-init-entry>
			<dev:module-init-entry>
				<dev:module-init-entry-name>blockNameGain</dev:module-init-entry-name>
				<dev:module-init-entry-datatype>String</dev:module-init-entry-datatype>
				<dev:module-init-entry-value>#Gain1</dev:module-init-entry-value>
				<dev:module-init-entry-range></dev:module-init-entry-range>
			</dev:module-init-entry>
			<dev:module-init-entry>
				<dev:module-init-entry-name>Poll_Time</dev:module-init-entry-name>
				<dev:module-init-entry-datatype>Integer</dev:module-init-entry-datatype>
				<dev:module-init-entry-value>10000</dev:module-init-entry-value>
				<dev:module-init-entry-range>0-300000</dev:module-init-entry-range>
			</dev:module-init-entry>
		</dev:module-init-entries>
	</dev:header>
	<dev:type-info>
	<dev:class superclass="com.amx.duet.devicesdk.AudioMixer" serializable="true" name="com.amx.duet.impl.bose.esp88.dr1_0_0.BoseEsp88">
		<dev:extends>
			<dev:extend name="com.amx.duet.core.master.netlinx.IDataListener"></dev:extend>
			<dev:extend name="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.IDeviceListener"></dev:extend>
			<dev:extend name="com.amx.duet.util.TimelineListener"></dev:extend>
			<dev:extend name="com.amx.duet.impl.bose.esp88.dr1_0_0.IBoseEsp88"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor visibility="public" name="BoseEsp88"></dev:constructor>
			<dev:constructor visibility="public" name="BoseEsp88">
				<dev:params>
					<dev:param type="org.osgi.framework.BundleContext" name="bctxt"></dev:param>
					<dev:param type="com.amx.duet.da.NetLinxDevice" name="nd"></dev:param>
					<dev:param type="java.util.Properties" name="props"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" returncomment="boolean" type="boolean" name="isDeviceOnLine"></dev:method>
			<dev:method visibility="public" returncomment="boolean" type="boolean" name="isDataInitialized"></dev:method>
			<dev:method visibility="public" type="void" name="setAudioMixerCrosspoint">
				<dev:params>
					<dev:param type="int" comment="[1..16]" name="input"></dev:param>
					<dev:param type="int" comment="[1..16]" name="output"></dev:param>
					<dev:param type="int" comment="[0..255]" name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setAudioMixerCrosspoint">
				<dev:params>
					<dev:param type="int" comment="[1..16]" name="input"></dev:param>
					<dev:param type="int[]" comment="[1..16]" name="output"></dev:param>
					<dev:param type="int" comment="[0..255]" name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setAudioMixerPreset">
				<dev:params>
					<dev:param type="int" comment="[1..255]" name="preset"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="cycleGainMute"></dev:method>
			<dev:method visibility="public" type="void" name="setGain">
				<dev:params>
					<dev:param type="int" comment="[0..255]" name="level"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setGainMuteOn">
				<dev:params>
					<dev:param type="boolean" comment="boolean" name="state"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="adjustVolume">
				<dev:params>
					<dev:param type="int" name="offset"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setVolume">
				<dev:params>
					<dev:param type="int" comment="[0..255]" name="level"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setVolumeMuteOn">
				<dev:params>
					<dev:param type="boolean" comment="boolean" name="state"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setVolumePreset">
				<dev:params>
					<dev:param type="int" comment="[1..32]" name="preset"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setVolumeRamp">
				<dev:params>
					<dev:param type="com.amx.duet.devicesdk.type.LevelRamp" comment="[UP, DOWN, STOP]" name="rl"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="cycleAudioMixerCrosspointMute">
				<dev:params>
					<dev:param type="int" comment="[0..16]" name="input"></dev:param>
					<dev:param type="int" comment="[0..16]" name="output"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setAudioMixerCrosspointMuteOn">
				<dev:params>
					<dev:param type="int" comment="[0..16]" name="input"></dev:param>
					<dev:param type="int" comment="[0..16]" name="output"></dev:param>
					<dev:param type="boolean" comment="boolean" name="state"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="handleCommandEvent">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.Event" name="obj"></dev:param>
					<dev:param type="java.lang.String" name="cmd"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sourceSelect">
				<dev:params>
					<dev:param type="int" comment="[1..16]" name="source"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="stdMixerInputLevel">
				<dev:params>
					<dev:param type="int" comment="[1..24]" name="input"></dev:param>
					<dev:param type="int" comment="[0..255]" name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="stdMixerOutputLevel">
				<dev:params>
					<dev:param type="int" comment="[1..24]" name="output"></dev:param>
					<dev:param type="int" comment="[0..255]" name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="stdMixerInputMute">
				<dev:params>
					<dev:param type="int" comment="[1..24]" name="input"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="stdMixerOutputMute">
				<dev:params>
					<dev:param type="int" comment="[1..24]" name="output"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="stdMixer">
				<dev:params>
					<dev:param type="int" comment="[1..24]" name="input"></dev:param>
					<dev:param type="int" comment="[1..24]" name="output"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="stdMixerSize">
				<dev:params>
					<dev:param type="int" comment="[4, 8, 16]" name="size"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="toneEqLow">
				<dev:params>
					<dev:param type="int" comment="[0..255]" name="range"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="toneEqMid">
				<dev:params>
					<dev:param type="int" comment="[0..255]" name="range"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="toneEqHigh">
				<dev:params>
					<dev:param type="int" comment="[0..255]" name="range"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="slotChannelVolume">
				<dev:params>
					<dev:param type="int" comment="[0..255]" name="range"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setSlotNumber">
				<dev:params>
					<dev:param type="int" comment="[1..8]" name="size"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="querySlotNumber"></dev:method>
			<dev:method visibility="public" type="void" name="setChannelNumber">
				<dev:params>
					<dev:param type="int" comment="[1..8]" name="size"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="queryChannelNumber"></dev:method>
			<dev:method visibility="public" type="void" name="muteSlotChannelVolume">
				<dev:params>
					<dev:param type="boolean" comment="boolean" name="status"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="rampSlotChannelVolume">
				<dev:params>
					<dev:param type="java.lang.String" comment="[&quot;U&quot;, &quot;D&quot;]" name="up_down"></dev:param>
					<dev:param type="java.lang.String" comment="integer" name="step"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="handleChannelEvent">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.Event" comment="" name="obj"></dev:param>
					<dev:param type="int" comment="[300..302]" name="channel"></dev:param>
					<dev:param type="boolean" comment="boolean" name="on"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="toneEqLowBypass"></dev:method>
			<dev:method visibility="public" type="void" name="toneEqMidBypass"></dev:method>
			<dev:method visibility="public" type="void" name="toneEqHighBypass"></dev:method>
			<dev:method visibility="public" type="void" name="refresh"></dev:method>
			<dev:method visibility="public" type="void" name="reinitialize"></dev:method>
			<dev:method visibility="public" type="void" name="dispose"></dev:method>
			<dev:method visibility="public" type="void" name="setProperty">
				<dev:params>
					<dev:param type="java.lang.String" comment="[&quot;blockNameToneEQ&quot;, &quot;blockNameSelector&quot;, &quot;blockNameMixer&quot;, &quot;blockNameStMixer&quot;, &quot;blockNameGain&quot;, &quot;volumeMultiplier&quot;]" name="Key"></dev:param>
					<dev:param type="java.lang.String" comment="String" name="Value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String" name="getProperty">
				<dev:params>
					<dev:param type="java.lang.String" comment="[&quot;blockNameToneEQ&quot;, &quot;blockNameSelector&quot;, &quot;blockNameMixer&quot;, &quot;blockNameStMixer&quot;, &quot;blockNameGain&quot;, &quot;volumeMultiplier&quot;]" name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="passThru">
				<dev:params>
					<dev:param type="byte[]" comment="" name="buffer"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="passThru">
				<dev:params>
					<dev:param type="java.lang.String" comment="String" name="buffer"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="handleDataEvent">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.Event" name="arg0"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setCommPort"></dev:method>
			<dev:method visibility="public" type="void" name="enQueue">
				<dev:params>
					<dev:param type="byte[]" name="msg"></dev:param>
					<dev:param type="int" name="priority"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="enQueue">
				<dev:params>
					<dev:param type="java.lang.String" name="msg"></dev:param>
					<dev:param type="int" name="priority"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="deQueue"></dev:method>
			<dev:method visibility="public" type="void" name="pollEvent"></dev:method>
			<dev:method visibility="public" type="void" name="heartbeatEvent"></dev:method>
			<dev:method visibility="public" type="void" name="handleIncomingData">
				<dev:params>
					<dev:param type="int" name="bytesReceived"></dev:param>
					<dev:param type="byte[]" name="data1"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="handleOnlineEvent"></dev:method>
			<dev:method visibility="public" type="void" name="handleOfflineEvent"></dev:method>
			<dev:method visibility="public" type="void" name="handleErrorEvent">
				<dev:params>
					<dev:param type="int" name="error"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="parseResponse">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ByteBuffer" name="response"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="handleTimelineEvent">
				<dev:params>
					<dev:param type="com.amx.duet.util.Timeline" name="arg0"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.duet.impl.bose.esp88.dr1_0_0.IBoseEsp88">
		<dev:extends>
			<dev:extend name="com.amx.duet.devicesdk.IAudioMixer2"></dev:extend>
		</dev:extends>
	</dev:class>
	<dev:class superclass="com.amx.duet.devicesdk.base.TypeSafeEnumBase" name="com.amx.duet.impl.bose.esp88.dr1_0_0.BoseEsp88AdvancedEvent">
		<dev:fields>
			<dev:field visibility="public" fulltype="com.amx.duet.impl.bose.esp88.dr1_0_0.BoseEsp88AdvancedEvent" type="BoseEsp88AdvancedEvent" final="true" name="LOW_EQ" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.impl.bose.esp88.dr1_0_0.BoseEsp88AdvancedEvent" type="BoseEsp88AdvancedEvent" final="true" name="MID_EQ" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.impl.bose.esp88.dr1_0_0.BoseEsp88AdvancedEvent" type="BoseEsp88AdvancedEvent" final="true" name="HIGH_EQ" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.impl.bose.esp88.dr1_0_0.BoseEsp88AdvancedEvent" type="BoseEsp88AdvancedEvent" final="true" name="LOW_BYPASS" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.impl.bose.esp88.dr1_0_0.BoseEsp88AdvancedEvent" type="BoseEsp88AdvancedEvent" final="true" name="MID_BYPASS" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.impl.bose.esp88.dr1_0_0.BoseEsp88AdvancedEvent" type="BoseEsp88AdvancedEvent" final="true" name="HIGH_BYPASS" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.impl.bose.esp88.dr1_0_0.BoseEsp88AdvancedEvent" type="BoseEsp88AdvancedEvent" final="true" name="SLOT_CHANNEL_VOLUME" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.impl.bose.esp88.dr1_0_0.BoseEsp88AdvancedEvent" type="BoseEsp88AdvancedEvent" final="true" name="SLOT_CHANNEL_VOLUME_MUTE" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.impl.bose.esp88.dr1_0_0.BoseEsp88AdvancedEvent" type="BoseEsp88AdvancedEvent" final="true" name="SLOT_NUMBER" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.impl.bose.esp88.dr1_0_0.BoseEsp88AdvancedEvent" type="BoseEsp88AdvancedEvent" final="true" name="CHANNEL_NUMBER" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.impl.bose.esp88.dr1_0_0.BoseEsp88AdvancedEvent" type="BoseEsp88AdvancedEvent" final="true" name="SELECTOR" static="true"></dev:field>
			<dev:field visibility="public" fulltype="java.util.List" type="List" final="true" name="VALUES" static="true"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:method visibility="public" type="java.lang.String" name="toString"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="com.amx.duet.devicesdk.base.ModuleActivator" name="com.amx.duet.impl.bose.esp88.dr1_0_0.Activator"></dev:class>
	<dev:class superclass="com.amx.duet.devicesdk.component.SourceSelectComponentImpl" abstract="true" name="com.amx.duet.tools.bose.esp88.comm.component.dr1_0_0.VirtualSourceSelectComponent">
		<dev:extends>
			<dev:extend name="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.ICommonComponent"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor visibility="public" name="VirtualSourceSelectComponent">
				<dev:params>
					<dev:param type="com.amx.duet.devicesdk.component.ISourceSelectComponent" comment="" name="caller"></dev:param>
					<dev:param type="int" comment="" name="index"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" type="void" name="dispose"></dev:method>
			<dev:method visibility="public" type="int" name="getInputCount"></dev:method>
			<dev:method visibility="public" type="void" name="addInputProperty">
				<dev:params>
					<dev:param type="int" comment="integer value representing the selectable source" name="groupNumber"></dev:param>
					<dev:param type="java.lang.String" comment="description provided by device to represent source" name="deviceLabel"></dev:param>
					<dev:param type="com.amx.duet.devicesdk.type.AVType" comment="Audio/Video type" name="avType"></dev:param>
					<dev:param type="com.amx.duet.devicesdk.type.InputSourceSelect" comment="type of input source (NamedInput or SignalType)" name="sourceType"></dev:param>
					<dev:param type="boolean" comment="specifies that this is a selectable source" name="bActive"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String[]" name="getInputProperties"></dev:method>
			<dev:method visibility="public" type="java.lang.String" name="getInputProperty">
				<dev:params>
					<dev:param type="int" name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="int" name="getInputSelect"></dev:method>
			<dev:method visibility="public" returncomment="int selected input value." type="int" name="getSelectedInput"></dev:method>
			<dev:method visibility="public" returncomment="Vector" type="java.util.Vector" name="getInputs"></dev:method>
			<dev:method visibility="public" returncomment="true if the two values go together; false otherwise." type="boolean" name="isValidInput">
				<dev:params>
					<dev:param type="com.amx.duet.devicesdk.type.InputSourceSelect" comment="type of input source (NamedInput or SignalType)" name="sourceSelect"></dev:param>
					<dev:param type="int" comment="input source select group number" name="inputNumber"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setInputSelect">
				<dev:params>
					<dev:param type="int" name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setInputSource">
				<dev:params>
					<dev:param type="com.amx.duet.devicesdk.type.InputSourceSelect" name="sourceSelect"></dev:param>
					<dev:param type="int" name="inputNumber"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setInputSource">
				<dev:params>
					<dev:param type="com.amx.duet.devicesdk.type.InputSourceSelectInfo" name="sourceSelectInfo"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="updateInputSelect">
				<dev:params>
					<dev:param type="int" comment="int the selected index within the source list" name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="updateInputSource">
				<dev:params>
					<dev:param type="com.amx.duet.devicesdk.type.InputSourceSelect" name="sourceSelect"></dev:param>
					<dev:param type="int" name="inputNumber"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="refresh"></dev:method>
			<dev:method visibility="public" type="void" name="reinitialize"></dev:method>
			<dev:method visibility="public" returncomment="ISourceSelectComponent" type="com.amx.duet.devicesdk.component.ISourceSelectComponent" name="getSourceSelectComponent"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="com.amx.duet.devicesdk.component.PreAmpComponentImpl" abstract="true" name="com.amx.duet.tools.bose.esp88.comm.component.dr1_0_0.VirtualPreAmpComponent">
		<dev:extends>
			<dev:extend name="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.ICommonComponent"></dev:extend>
			<dev:extend name="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.ISurroundModes"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor visibility="public" name="VirtualPreAmpComponent">
				<dev:params>
					<dev:param type="com.amx.duet.devicesdk.component.IPreAmpComponent" comment="" name="caller"></dev:param>
					<dev:param type="int" comment="" name="index"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" returncomment="The SurroundMode added." type="com.amx.duet.devicesdk.type.SurroundMode" name="addSurroundMode">
				<dev:params>
					<dev:param type="int" comment="integer value representing the selectable surround mode" name="surroundModeNumber"></dev:param>
					<dev:param type="java.lang.String" comment="the name of the surround mode." name="surroundModeLabel"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The SurroundMode added." type="com.amx.duet.devicesdk.type.SurroundMode" name="addSurroundMode">
				<dev:params>
					<dev:param type="int" comment="integer value representing the selectable surround mode" name="surroundModeNumber"></dev:param>
					<dev:param type="com.amx.duet.devicesdk.type.SurroundMode" comment="a predefined SurroundMode used by the device" name="surroundMode"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="dispose"></dev:method>
			<dev:method visibility="public" returncomment="The matching SurroundMode or SurroundMode.INVALID if unable to match." type="com.amx.duet.devicesdk.type.SurroundMode" name="getSurroundMode">
				<dev:params>
					<dev:param type="int" comment="integer value representing the selectable surround mode" name="surroundModeNumber"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The number of surround mode settings." type="int" name="getSurroundModeCount"></dev:method>
			<dev:method visibility="public" returncomment="The number that specifies the SurroundMode, or Integer.MIN_VALUE if unable to match." type="int" name="getSurroundModeNumber">
				<dev:params>
					<dev:param type="com.amx.duet.devicesdk.type.SurroundMode" comment="the SurroundMode to match" name="surroundMode"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="All the properties for the surround modes." type="java.lang.String[]" name="getSurroundModeProperties"></dev:method>
			<dev:method visibility="public" returncomment="String" type="java.lang.String" name="getSurroundModeProperty">
				<dev:params>
					<dev:param type="int" comment="integer value representing the selectable surround mode" name="surroundModeNumber"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="int" type="int" name="getSurroundModeSelect"></dev:method>
			<dev:method visibility="public" type="void" name="processAddSurroundModeEvent">
				<dev:params>
					<dev:param type="int" comment="integer value representing the selectable surround mode" name="surroundModeNumber"></dev:param>
					<dev:param type="java.lang.String" comment="the name of the surround mode." name="surroundModeLabel"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="processSurroundModeCountEvent">
				<dev:params>
					<dev:param type="int" comment="integer value representing the selectable surround mode" name="surroundModeNumber"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="processSurroundModeProperties">
				<dev:params>
					<dev:param type="java.lang.String[]" comment="" name="propertyArray"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="processSurroundModePropertyEvent">
				<dev:params>
					<dev:param type="java.lang.String" comment="" name="propertyValue"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="processSurroundModeSelectEvent">
				<dev:params>
					<dev:param type="int" comment="integer value representing the selectable surround mode" name="surroundModeNumber"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendCommandFeedback">
				<dev:params>
					<dev:param type="java.lang.String" comment="The feedback message to send back to the deive" name="message"></dev:param>
					<dev:param type="com.amx.duet.devicesdk.base.AdvancedEvent" comment="The AdvancedEvent to process" name="advEv"></dev:param>
					<dev:param type="int" comment="The zone of the virtual device the feedback is sent to." name="zone"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setSurroundMode">
				<dev:params>
					<dev:param type="com.amx.duet.devicesdk.type.SurroundMode" comment="a predefined SurroundMode used by the device" name="surroundMode"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setSurroundModeList">
				<dev:params>
					<dev:param type="java.util.List" comment="List" name="surroundModes"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setSurroundModeList">
				<dev:params>
					<dev:param type="com.amx.duet.devicesdk.type.SurroundMode[]" comment="" name="surroundModes"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setSurroundModeSelect">
				<dev:params>
					<dev:param type="int" comment="integer value representing the selectable surround mode" name="surroundModeNumber"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="updateSurroundMode">
				<dev:params>
					<dev:param type="com.amx.duet.devicesdk.type.SurroundMode" comment="the desired surround mode" name="surroundMode"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="updateSurroundModeSelect">
				<dev:params>
					<dev:param type="int" comment="the number of the surround mode selected" name="surroundModeNumber"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="com.amx.duet.devicesdk.base.TypeSafeEnumBase" name="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.SurroundModesAdvancedEvent">
		<dev:fields>
			<dev:field visibility="public" fulltype="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.SurroundModesAdvancedEvent" type="SurroundModesAdvancedEvent" final="true" name="SURROUND_MODE" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.SurroundModesAdvancedEvent" type="SurroundModesAdvancedEvent" final="true" name="SURROUND_MODE_COUNT" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.SurroundModesAdvancedEvent" type="SurroundModesAdvancedEvent" final="true" name="SURROUND_MODE_COUNT_INQUIRY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.SurroundModesAdvancedEvent" type="SurroundModesAdvancedEvent" final="true" name="SURROUND_MODE_INQUIRY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.SurroundModesAdvancedEvent" type="SurroundModesAdvancedEvent" final="true" name="SURROUND_MODE_SELECT" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.SurroundModesAdvancedEvent" type="SurroundModesAdvancedEvent" final="true" name="SURROUND_MODE_SELECT_INQUIRY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.SurroundModesAdvancedEvent" type="SurroundModesAdvancedEvent" final="true" name="SURROUND_MODES_INQUIRY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="java.util.List" type="List" final="true" name="VALUES" static="true"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:method visibility="public" type="java.lang.String" name="toString"></dev:method>
			<dev:method visibility="public" type="com.amx.duet.devicesdk.base.TypeSafeEnumBase" final="true" name="fromString" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="data"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.ISurroundModes"></dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.InputProperty">
		<dev:methods>
			<dev:constructor visibility="public" name="InputProperty">
				<dev:params>
					<dev:param type="int" comment="integer value representing the selectable source (group number)" name="number"></dev:param>
					<dev:param type="com.amx.duet.devicesdk.type.InputSourceSelect" comment="type of input source (NamedInput or SignalType)" name="sourceType"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="InputProperty">
				<dev:params>
					<dev:param type="int" comment="integer value representing the selectable source (group number)" name="number"></dev:param>
					<dev:param type="java.lang.String" comment="description provided by device to represent source" name="label"></dev:param>
					<dev:param type="com.amx.duet.devicesdk.type.AVType" comment="Audio/Video type" name="avtype"></dev:param>
					<dev:param type="com.amx.duet.devicesdk.type.InputSourceSelect" comment="type of input source (NamedInput or SignalType)" name="sourceType"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" type="void" name="setDeviceLabel">
				<dev:params>
					<dev:param type="java.lang.String" comment="description provided by device to represent source" name="label"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setAVType">
				<dev:params>
					<dev:param type="com.amx.duet.devicesdk.type.AVType" comment="Audio/Video type" name="type"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setActiveSource">
				<dev:params>
					<dev:param type="boolean" comment="specifies that this is a selectable source (within a group)" name="bActive"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="specifies that this is a selectable source (within a group)" type="boolean" name="isActiveSource"></dev:method>
			<dev:method visibility="public" returncomment="integer value representing the selectable source (group number)" type="int" name="getInputNumber"></dev:method>
			<dev:method visibility="public" returncomment="type of input source (NamedInput or SignalType)" type="com.amx.duet.devicesdk.type.InputSourceSelect" name="getInputType"></dev:method>
			<dev:method visibility="public" returncomment="description provided by device to represent source" type="java.lang.String" name="getDeviceLabel"></dev:method>
			<dev:method visibility="public" returncomment="Audio/Video type" type="com.amx.duet.devicesdk.type.AVType" name="getAVType"></dev:method>
			<dev:method visibility="public" returncomment="Formatted property string" type="java.lang.String" name="getInputProperty"></dev:method>
			<dev:method visibility="public" type="java.lang.String" name="toString"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.IDeviceListener"></dev:class>
	<dev:class abstract="true" name="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.ICommonComponent"></dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.DeviceUtil">
		<dev:extends>
			<dev:extend name="com.amx.duet.util.TimelineListener"></dev:extend>
			<dev:extend name="com.amx.duet.util.TimerListener"></dev:extend>
			<dev:extend name="com.amx.duet.tools.bose.esp88.net.tcp.dr1_0_0.SocketConnectionListener"></dev:extend>
		</dev:extends>
		<dev:fields>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="1000" const="1000" name="POLL_TIME_MIN" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="300000" const="300000" name="POLL_TIME_MAX" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="1000" const="1000" name="RECONNECT_TIME_MIN" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="60000" const="60000" name="RECONNECT_TIME_MAX" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="10000" const="10000" name="DEFAULT_POLL_TIME" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="15000" const="15000" name="DEFAULT_CONNECT_TIME" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="200" const="200" name="DEFAULT_QUEUE_TIME" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="30000" const="30000" name="DEFAULT_HEART_TIME" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="3" const="3" name="DEFAULT_TIMEOUT_COUNT" static="true"></dev:field>
			<dev:field visibility="public" fulltype="long" type="long" final="true" constexpr="5000l" const="5000" name="TIME_OUT" static="true"></dev:field>
			<dev:field visibility="public" fulltype="java.lang.String" type="String" final="true" constexpr="&quot;Baud_Rate&quot;" const="Baud_Rate" name="BAUD_RATE" static="true"></dev:field>
			<dev:field visibility="public" fulltype="java.lang.String" type="String" final="true" constexpr="&quot;Password&quot;" const="Password" name="PASSWORD" static="true"></dev:field>
			<dev:field visibility="public" fulltype="java.lang.String" type="String" final="true" constexpr="&quot;User_Name&quot;" const="User_Name" name="USERNAME" static="true"></dev:field>
			<dev:field visibility="public" fulltype="java.lang.String" type="String" final="true" constexpr="&quot;Poll_Time&quot;" const="Poll_Time" name="POLL_TIME" static="true"></dev:field>
			<dev:field visibility="public" fulltype="java.lang.String" type="String" final="true" constexpr="&quot;Device_ID&quot;" const="Device_ID" name="DEVICE_ID" static="true"></dev:field>
			<dev:field visibility="public" fulltype="java.lang.String" type="String" final="true" constexpr="&quot;Port&quot;" const="Port" name="IP_PORT" static="true"></dev:field>
			<dev:field visibility="public" fulltype="java.lang.String" type="String" final="true" constexpr="&quot;IP_Address&quot;" const="IP_Address" name="IP_ADDRESS" static="true"></dev:field>
			<dev:field visibility="public" fulltype="java.lang.String" type="String" final="true" constexpr="&quot;Timeout_Count&quot;" const="Timeout_Count" name="TIMEOUT_COUNT" static="true"></dev:field>
			<dev:field visibility="public" fulltype="java.lang.String" type="String" final="true" constexpr="&quot;Reconnect_Time&quot;" const="Reconnect_Time" name="RECONNECT_TIME" static="true"></dev:field>
			<dev:field visibility="public" fulltype="java.lang.String" type="String" final="true" constexpr="&quot;System_Diagnostic&quot;" const="System_Diagnostic" name="SYSTEM_DIAGNOSTIC" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="1" const="1" name="IP_ONLY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="2" const="2" name="IP_SERIAL" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="3" const="3" name="SERIAL_ONLY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="0" const="0" name="MIN_LVL" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="255" const="255" name="MAX_LVL" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-255" const="-255" name="MIN_ADJUST" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="255" const="255" name="MAX_ADJUST" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="4" const="4" name="DEBUG" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="4" const="4" name="INFO" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="4" const="4" name="WARNING" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="4" const="4" name="ERROR" static="true"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor visibility="public" name="DeviceUtil"></dev:constructor>
			<dev:constructor visibility="public" name="DeviceUtil">
				<dev:params>
					<dev:param type="com.amx.duet.devicesdk.base.Module" comment="The current module (device class) we are working with. Pass in  &lt;strong&gt;this&lt;/strong&gt; as the parameter." name="mod"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="DeviceUtil">
				<dev:params>
					<dev:param type="com.amx.duet.devicesdk.base.Module" comment="The current module (device class) we are working with. Pass in  &lt;strong&gt;this&lt;/strong&gt; as the parameter." name="mod"></dev:param>
					<dev:param type="com.amx.duet.da.NetLinxDevice" comment="The NetLinxDevice object passed in from the module constructor." name="nd"></dev:param>
					<dev:param type="java.util.Properties" comment="The Properties object passed in from the module constructor." name="props"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" type="void" name="setCommonDevice">
				<dev:params>
					<dev:param type="com.amx.duet.devicesdk.base.Module" comment="object of type Module" name="mod"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="device object of type Module" type="com.amx.duet.devicesdk.base.Module" name="getCommonDevice"></dev:method>
			<dev:method visibility="public" returncomment="true if the device is online; false otherwise." type="boolean" name="isDeviceOnLine"></dev:method>
			<dev:method visibility="public" returncomment="true if the data is initialized; false otherwise." type="boolean" name="isDataInitialized"></dev:method>
			<dev:method visibility="public" type="void" name="setNetLinxDevice">
				<dev:params>
					<dev:param type="com.amx.duet.da.NetLinxDevice" comment="NetLinxDevice" name="nd"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="NetLinxDevice" type="com.amx.duet.da.NetLinxDevice" name="getNetLinxDevice"></dev:method>
			<dev:method visibility="public" type="void" name="setMaxTimeout">
				<dev:params>
					<dev:param type="int" comment="Maximum number of retries" name="count"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="Maximum number of retries" type="int" name="getMaxTimeout"></dev:method>
			<dev:method visibility="public" type="void" name="setTimeoutCount">
				<dev:params>
					<dev:param type="int" comment="Timeout count value." name="count"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="incrementTimeout"></dev:method>
			<dev:method visibility="public" returncomment="Timeout count value." type="int" name="getTimeoutCount"></dev:method>
			<dev:method visibility="public" type="void" name="setValidBaudRates">
				<dev:params>
					<dev:param type="java.lang.String[]" comment="String[] of baud rates." name="rates"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="String[] of baud rates." type="java.lang.String[]" name="getValidBaudRates"></dev:method>
			<dev:method visibility="public" type="void" name="setDefaultBaudRate">
				<dev:params>
					<dev:param type="int" comment="int containing the baud rate." name="rate"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setDefaultIPAddress">
				<dev:params>
					<dev:param type="java.lang.String" comment="String containing the IP address." name="ipAddress"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setDefaultIPAddress">
				<dev:params>
					<dev:param type="java.lang.String" comment="String containing the IP address." name="ipAddress"></dev:param>
					<dev:param type="int" comment="int containing the IP port." name="port"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if the connection type is IP; false otherwise." type="boolean" name="isIPControlEnabled"></dev:method>
			<dev:method visibility="public" returncomment="true if disposing; false otherwise." type="boolean" name="isDisposing"></dev:method>
			<dev:method visibility="public" returncomment="true if polling; false otherwise." type="boolean" name="isPolling"></dev:method>
			<dev:method visibility="public" returncomment="true if heartbeating; false otherwise." type="boolean" name="isHeartbeating"></dev:method>
			<dev:method visibility="public" returncomment="true if queing; false otherwise." type="boolean" name="isQueing"></dev:method>
			<dev:method visibility="public" returncomment="The String formatted property key." type="java.lang.String" name="getPropertyKey">
				<dev:params>
					<dev:param type="java.lang.String" comment="String used for matching." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="Property object containing the key/value pair." type="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.DeviceUtil.Property" name="validateProperty">
				<dev:params>
					<dev:param type="java.lang.String" comment="String to lookup." name="key"></dev:param>
					<dev:param type="java.lang.String" comment="String to validate and set." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="refresh"></dev:method>
			<dev:method visibility="public" type="void" name="reinitialize"></dev:method>
			<dev:method visibility="public" type="void" name="dispose"></dev:method>
			<dev:method visibility="public" type="void" name="lockQueue">
				<dev:params>
					<dev:param type="boolean" comment="" name="bLock"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if the queue is to be locked; false otherwise." type="boolean" name="isQueueLocked"></dev:method>
			<dev:method visibility="public" returncomment="true if the socket connection was successful; false otherwise." type="boolean" name="ipConnect"></dev:method>
			<dev:method visibility="public" type="void" name="ipClose"></dev:method>
			<dev:method visibility="public" returncomment="true if the socket is connected; false otherwise." type="boolean" name="isConnected"></dev:method>
			<dev:method visibility="public" type="void" name="reconnect"></dev:method>
			<dev:method visibility="public" type="void" name="intitializeConnection"></dev:method>
			<dev:method visibility="public" type="void" name="handleAdvancedEvent">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.Event" comment="an Event object containing all necessary event information." name="advancedEvent"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="handleDataEvent">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.Event" comment="an Event object containing all necessary event information." name="evt"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="handleOnlineEvent"></dev:method>
			<dev:method visibility="public" type="void" name="handleOfflineEvent"></dev:method>
			<dev:method visibility="public" type="void" name="handleErrorEvent">
				<dev:params>
					<dev:param type="int" name="error"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="handleTimelineEvent">
				<dev:params>
					<dev:param type="com.amx.duet.util.Timeline" name="timeline"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="handleTimerEvent">
				<dev:params>
					<dev:param type="com.amx.duet.util.Timer" name="timer"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="handleReceive">
				<dev:params>
					<dev:param type="int" name="bytesReceived"></dev:param>
					<dev:param type="byte[]" name="data"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="handleSocketStatus">
				<dev:params>
					<dev:param type="int" name="status"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="killResponseTimer"></dev:method>
			<dev:method visibility="public" type="void" name="startResponseTimer"></dev:method>
			<dev:method visibility="public" type="void" name="startResponseTimer">
				<dev:params>
					<dev:param type="long" comment="Amount of time before timer times out." name="lTimeout"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setDeQueueTime">
				<dev:params>
					<dev:param type="long" comment="long" name="lTime"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="long" type="long" name="getDeQueueTime"></dev:method>
			<dev:method visibility="public" type="void" name="pauseQueueTimeline"></dev:method>
			<dev:method visibility="public" type="void" name="restartQueueTimeline"></dev:method>
			<dev:method visibility="public" type="void" name="killQueueTimeline"></dev:method>
			<dev:method visibility="public" type="void" name="startQueueTimeline"></dev:method>
			<dev:method visibility="public" type="void" name="killHeartbeatTimeline"></dev:method>
			<dev:method visibility="public" type="void" name="startHeartbeatTimeline"></dev:method>
			<dev:method visibility="public" type="void" name="startPolling"></dev:method>
			<dev:method visibility="public" type="void" name="stopPolling"></dev:method>
			<dev:method visibility="public" type="void" name="fnSendStringFeedback">
				<dev:params>
					<dev:param type="java.lang.String" comment="is the response to return to the UI" name="msg"></dev:param>
					<dev:param type="com.amx.duet.devicesdk.base.AdvancedEvent" comment="contains information for Java users" name="advEv"></dev:param>
					<dev:param type="int" comment="is the instantiation to which the response should be sent" name="zone"></dev:param>
					<dev:param type="java.lang.Object" comment="is the virtual device to which the response should be sent  Note: device MUST BE A &apos;NETLINXDEVICE&apos; TYPE OBJECT! &apos;THIS&apos; WILL NOT WORK!" name="device"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendCommandFeedback">
				<dev:params>
					<dev:param type="java.lang.String" comment="is the response to return to the UI" name="msg"></dev:param>
					<dev:param type="com.amx.duet.devicesdk.base.AdvancedEvent" comment="contains information for Java users" name="advEv"></dev:param>
					<dev:param type="int" comment="is the instantiation to which the response should be sent" name="zone"></dev:param>
					<dev:param type="com.amx.duet.da.NetLinxDevice" comment="is the virtual device to which the response should be sent" name="device"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendCommandFeedback">
				<dev:params>
					<dev:param type="java.lang.String" comment="is the response to return to the UI" name="msg"></dev:param>
					<dev:param type="com.amx.duet.devicesdk.base.AdvancedEvent" comment="contains information for Java users" name="advEv"></dev:param>
					<dev:param type="int" comment="is the instantiation to which the response should be sent" name="zone"></dev:param>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="is the virtual device to which the response should be sent" name="dps"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="fnSendLevelFeedback">
				<dev:params>
					<dev:param type="int" comment="- level number" name="levelID"></dev:param>
					<dev:param type="int" comment="- level value" name="levelValue"></dev:param>
					<dev:param type="com.amx.duet.devicesdk.base.AdvancedEvent" comment="- contains information for Java users" name="advEv"></dev:param>
					<dev:param type="int" comment="- the instantiation to which the response should be sent" name="zone"></dev:param>
					<dev:param type="java.lang.Object" comment="- the virtual device to which the response should be sent  Note: device MUST BE A &apos;NETLINXDEVICE&apos; TYPE OBJECT! &apos;THIS&apos; WILL NOT WORK!" name="device"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendLevelFeedback">
				<dev:params>
					<dev:param type="int" comment="level number" name="levelID"></dev:param>
					<dev:param type="int" comment="level value" name="levelValue"></dev:param>
					<dev:param type="com.amx.duet.devicesdk.base.AdvancedEvent" comment="contains information for Java users" name="advEv"></dev:param>
					<dev:param type="int" comment="the instantiation to which the response should be sent" name="zone"></dev:param>
					<dev:param type="com.amx.duet.da.NetLinxDevice" comment="is the virtual device to which the response should be sent" name="device"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendLevelFeedback">
				<dev:params>
					<dev:param type="int" comment="level number" name="levelID"></dev:param>
					<dev:param type="int" comment="level value" name="levelValue"></dev:param>
					<dev:param type="com.amx.duet.devicesdk.base.AdvancedEvent" comment="contains information for Java users" name="advEv"></dev:param>
					<dev:param type="int" comment="the instantiation to which the response should be sent" name="zone"></dev:param>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="is the virtual device to which the response should be sent" name="dps"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="fnSendChannelFeedback">
				<dev:params>
					<dev:param type="int" comment="- integer, channel number" name="chanID"></dev:param>
					<dev:param type="boolean" comment="- boolean, channel state" name="chanValue"></dev:param>
					<dev:param type="com.amx.duet.devicesdk.base.AdvancedEvent" comment="- AdvancedEvent Object" name="advEv"></dev:param>
					<dev:param type="int" comment="- integer, port to return the data on" name="zone"></dev:param>
					<dev:param type="java.lang.Object" comment="- the virtual device to which the response should be sent  Note: device MUST BE A &apos;NETLINXDEVICE&apos; TYPE OBJECT! &apos;THIS&apos; WILL NOT WORK!" name="device"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendChannelFeedback">
				<dev:params>
					<dev:param type="int" comment="integer, channel number" name="chanID"></dev:param>
					<dev:param type="boolean" comment="boolean, channel state" name="state"></dev:param>
					<dev:param type="com.amx.duet.devicesdk.base.AdvancedEvent" comment="AdvancedEvent Object" name="advEv"></dev:param>
					<dev:param type="int" comment="integer, port to return the data on" name="zone"></dev:param>
					<dev:param type="com.amx.duet.da.NetLinxDevice" comment="the virtual device to which the response should be sent" name="device"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendChannelFeedback">
				<dev:params>
					<dev:param type="int" comment="integer, channel number" name="chanID"></dev:param>
					<dev:param type="boolean" comment="boolean, channel state" name="state"></dev:param>
					<dev:param type="com.amx.duet.devicesdk.base.AdvancedEvent" comment="AdvancedEvent Object" name="advEv"></dev:param>
					<dev:param type="int" comment="integer, port to return the data on" name="zone"></dev:param>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="the virtual device to which the response should be sent" name="dps"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="String containing the baud rate retrieved from the bundle, or the default value" type="java.lang.String" name="fnGetBaudRate">
				<dev:params>
					<dev:param type="java.lang.String" comment="- String containing the device&apos;s default baud rate" name="sDefaultRate"></dev:param>
					<dev:param type="java.lang.String[]" comment="- an array of Strings containing all valid baud rates for the device" name="sValidRates"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="byte containing the device ID retrieved from the bundle, or the default value" type="byte" name="fnGetDeviceID">
				<dev:params>
					<dev:param type="java.lang.String" comment="- String containing the device&apos;s default ID" name="sDefaultID"></dev:param>
					<dev:param type="int" comment="- integer, represents the smallest valid ID" name="nMinID"></dev:param>
					<dev:param type="int" comment="- integer, represents the largest valid ID" name="nMaxID"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="boolean value sent to the processDeviceOnlineEvent" type="boolean" name="setOnlineState">
				<dev:params>
					<dev:param type="boolean" comment="is the boolean value to be set" name="state"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="boolean value sent to the processDataInitializedEvent" type="boolean" name="setDataInitializedState">
				<dev:params>
					<dev:param type="boolean" comment="is the boolean value to be set" name="state"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="String" type="java.lang.String" name="getIPAddress">
				<dev:params>
					<dev:param type="java.lang.String" comment="String containing the default IP address" name="defaultIP"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;UL&gt;  &lt;LI&gt;0 = not IP controlled  &lt;LI&gt;1 = definately IP controlled  &lt;LI&gt;2 = could be IP controlled or serial controlled  &lt;/UL&gt;" type="int" name="isIPControlled"></dev:method>
			<dev:method visibility="public" returncomment="true if this is a SerialDevice; false otherwise" type="boolean" name="isSerialControlled">
				<dev:params>
					<dev:param type="com.amx.duet.da.NetLinxDevice" comment="" name="nd"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if this was loaded dynamically; false otherwise." type="boolean" name="isDynamicDevice"></dev:method>
			<dev:method visibility="public" returncomment="DPS for the virtual device" type="com.amx.duet.core.master.netlinx.DPS" name="getVirtualDPS"></dev:method>
			<dev:method visibility="public" returncomment="port number from the advance event DPS" type="int" name="getAdvancedIndex">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="Advance Event object&apos;s DPS" name="eventDPS"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if the name is valid; false otherwise." type="boolean" name="IsFileNameValid">
				<dev:params>
					<dev:param type="java.lang.String" comment="" name="strFileName"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The newly created timer." type="com.amx.duet.util.Timer" name="startTimer">
				<dev:params>
					<dev:param type="java.lang.String" comment="String name of the timer to start." name="name"></dev:param>
					<dev:param type="long" comment="Timeout value." name="lTime"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="restartTimeline">
				<dev:params>
					<dev:param type="com.amx.duet.util.Timeline" comment="Timeline to restart." name="timeline"></dev:param>
					<dev:param type="long[]" comment="Times to reload." name="alTimes"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The (hopefully) destroyed timer object." type="com.amx.duet.util.Timer" name="stopTimer">
				<dev:params>
					<dev:param type="com.amx.duet.util.Timer" comment="The Timer object to stop and destroy." name="timer"></dev:param>
					<dev:param type="java.lang.String" comment="String name of the timer to destroy." name="name"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setCTSEnable">
				<dev:params>
					<dev:param type="boolean" comment="" name="on"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setBaud">
				<dev:params>
					<dev:param type="java.lang.String" comment="" name="baud"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setBaud">
				<dev:params>
					<dev:param type="java.lang.String" comment="" name="baud"></dev:param>
					<dev:param type="boolean" comment="" name="temporary"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setCharDelay">
				<dev:params>
					<dev:param type="int" comment="" name="time"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="set9BitMode">
				<dev:params>
					<dev:param type="boolean" comment="" name="on"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setReceiveEnable">
				<dev:params>
					<dev:param type="boolean" comment="" name="on"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setHardwareHandshake">
				<dev:params>
					<dev:param type="boolean" comment="" name="on"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setSoftwareHandshake">
				<dev:params>
					<dev:param type="boolean" comment="" name="on"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendString">
				<dev:params>
					<dev:param type="java.lang.String" comment="Message to be sent to the device." name="msg"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendString">
				<dev:params>
					<dev:param type="byte[]" comment="Message to be sent to the device." name="msg"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
		<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.DeviceUtil.Property">
			<dev:fields>
				<dev:field visibility="public" fulltype="java.lang.String" type="String" name="key"></dev:field>
				<dev:field visibility="public" fulltype="java.lang.String" type="String" name="value"></dev:field>
			</dev:fields>
		</dev:class>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.comm.dr1_0_0.DeviceUtil.Property">
		<dev:fields>
			<dev:field visibility="public" fulltype="java.lang.String" type="String" name="key"></dev:field>
			<dev:field visibility="public" fulltype="java.lang.String" type="String" name="value"></dev:field>
		</dev:fields>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.io.dr1_0_0.MarshallUtil">
		<dev:methods>
			<dev:constructor visibility="public" name="MarshallUtil"></dev:constructor>
			<dev:method visibility="public" returncomment="&lt;ul&gt;  &lt;li&gt;0 Encoded OK  &lt;li&gt;-1 Encoded variable unrecognized type  &lt;li&gt;-2 Encoded data would not fit into buffer, buffer too small  &lt;/ul&gt;" type="int" final="true" name="VariableToString" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.io.dr1_0_0.Marshall" comment="This is the variable to be encoded.&lt;P&gt;    Example: &lt;br&gt;  &lt;pre&gt;  ObjectRef encoder = new ObjectRef(0);  ObjectRef buffer = new ObjectRef(&quot;&quot;);  ObjectRef rPos = new rPos((long)0);  String sDate = &quot;&quot;;  int ret = 0;    // do some date processing...    encoder.valueOf(sDate);  if ((ret = NetLinx.VariableToString(encoder, buffer, rPos)) &amp;lt 0) return ret;  &lt;/pre&gt;" name="encode"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="Must be of type &lt;STRONG&gt;String&lt;/STRONG&gt;. This is where the encode data is placed.&lt;P&gt;     Create rbuffer with a &lt;STRONG&gt;valueOf(String)&lt;/STRONG&gt; Example: &lt;br&gt;  &lt;code&gt;ObjectRef rBuffer = new ObjectRef(&quot;&quot;) or rBuffer.valueOf(&quot;&quot;)&lt;/code&gt;" name="rBuffer"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="Must be of type &lt;STRONG&gt;long&lt;/STRONG&gt;. This is where the first byte of the encoding   is placed. It is also modified to point to the next location after the last encoded byte.   That means that successive calls to this function can be made without modifying position.   Position should be set to 0 on the first call.&lt;P&gt;    Create rPos with a &lt;STRONG&gt;valueOf(long)&lt;/STRONG&gt; Example: &lt;br&gt;  &lt;code&gt;ObjectRef rPos = new ObjectRef((long)0) or rPos.valueOf((long)0)&lt;/code&gt;" name="rPos"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;ul&gt;  &lt;li&gt;0 Encoded OK  &lt;li&gt;-1 Encoded variable unrecognized type  &lt;li&gt;-2 Encoded data would not fit into buffer, buffer too small  &lt;/ul&gt;" type="int" final="true" name="VariableToString" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.io.dr1_0_0.Marshall[]" comment="This is the variable to be encoded.&lt;P&gt;  Example (class Appointment implements IStruct): &lt;br&gt;  &lt;pre&gt;  ObjectRef buffer = new ObjectRef(&quot;&quot;);  ObjectRef rPos = new rPos((long)0);  Appointment sAppts[] = new Appointment[10];  int ret = 0;    // do some appointment processing...    ObjectRef[] encodeArray = new ObjectRef[sAppts.length];  for (int i = 0; i &amp;lt sAppts.length; i++)   encodeArray[i] = new ObjectRef(sAppts[i]);  if ((ret = NetLinx.VariableToString(encodeArray, buffer, rPos)) &amp;lt 0) return ret;  &lt;/pre&gt;" name="encodeArray"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="Must be of type &lt;STRONG&gt;String&lt;/STRONG&gt;. This is where the encode data is placed.&lt;P&gt;     Create rbuffer with a &lt;STRONG&gt;valueOf(String)&lt;/STRONG&gt; Example: &lt;br&gt;  &lt;code&gt;ObjectRef rBuffer = new ObjectRef(&quot;&quot;) or rBuffer.valueOf(&quot;&quot;)&lt;/code&gt;" name="rBuffer"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="Must be of type &lt;STRONG&gt;long&lt;/STRONG&gt;. This is where the first byte of the encoding   is placed. It is also modified to point to the next location after the last encoded byte.   That means that successive calls to this function can be made without modifying position.   Position should be set to 0 on the first call.&lt;P&gt;    Create rPos with a &lt;STRONG&gt;valueOf(long)&lt;/STRONG&gt; Example: &lt;br&gt;  &lt;code&gt;ObjectRef rPos = new ObjectRef((long)0) or rPos.valueOf((long)0)&lt;/code&gt;" name="rPos"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;ul&gt;  &lt;li&gt;2 - Decode data to small, more members in structure  &lt;li&gt;1 - Structure to small, more members in decode string  &lt;li&gt;0 - Decoded OK  &lt;li&gt;-1 - Decode variable type mismatch  &lt;li&gt;-2 - Decode data too small, decoder ran out of data  &lt;/ul&gt;" type="int" final="true" name="StringToVariable" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.io.dr1_0_0.Marshall" comment="This is the variable to be decoded into.&lt;P&gt;  Example: &lt;br&gt;  &lt;pre&gt;  ObjectRef decoder = new ObjectRef(0);  ObjectRef buffer = new ObjectRef(&quot;&quot;);  ObjectRef rPos = new rPos((long)0);  String sDate = &quot;&quot;;  int ret = 0;    // do some date processing...    decoder.valueOf(sDate);  if ((ret = NetLinx.StringToVariable(decoder, buffer, rPos)) &amp;lt 0) return ret;  sDate = decoder.toString();  &lt;/pre&gt;" name="decode"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="Must be of type &lt;STRONG&gt;String&lt;/STRONG&gt;. This is where the decode data is found.&lt;P&gt;    Create rbuffer with a &lt;STRONG&gt;valueOf(String)&lt;/STRONG&gt; Example: &lt;br&gt;  &lt;code&gt;ObjectRef rBuffer = new ObjectRef(&quot;&quot;) or rBuffer.valueOf(&quot;&quot;)&lt;/code&gt;" name="rBuffer"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="Must be of type &lt;STRONG&gt;long&lt;/STRONG&gt;. This is where the first byte of the decode   data. Is it also modified to point to  the next location after the last decoded byte. That means   that successive calls to this function can be made without modifying position. Position should   be set to 0 on the first call.&lt;P&gt;    Create rPos with a &lt;STRONG&gt;valueOf(long)&lt;/STRONG&gt; Example: &lt;br&gt;  &lt;code&gt;ObjectRef rPos = new ObjectRef((long)0) or rPos.valueOf((long)0)&lt;/code&gt;" name="rPos"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;ul&gt;  &lt;li&gt;2 - Decode data to small, more members in structure  &lt;li&gt;1 - Structure to small, more members in decode string  &lt;li&gt;0 - Decoded OK  &lt;li&gt;-1 - Decode variable type mismatch  &lt;li&gt;-2 - Decode data too small, decoder ran out of data  &lt;/ul&gt;" type="int" final="true" name="StringToVariable" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.io.dr1_0_0.Marshall[]" comment="This is the variable to be decoded into.&lt;P&gt;    Example (class Appointment implements IStruct): &lt;br&gt;  &lt;pre&gt;  ObjectRef buffer = new ObjectRef(&quot;&quot;);  ObjectRef rPos = new rPos((long)0);  Appointment sAppts[] = new Appointment[10];  int ret = 0;    // do some appointment processing...    ObjectRef[] decodeArray = new ObjectRef[sAppts.length];  for (int i = 0; i &amp;lt sAppts.length; i++)   decodeArray[i] = new ObjectRef(sAppts[i]);  if ((ret = NetLinx.StringToVariable(decodeArray, buffer, rTempPos)) &amp;lt 0) return ret;  &lt;/pre&gt;  &lt;P&gt;&lt;STRONG&gt;Note: &lt;/STRONG&gt;Class objects such as the Appointment class are passed by reference to   the ObjectRef class. Therefore, the values will change along with the decodeArray value and    don&apos;t need to be passed back to the sAppts array, but intrinsic type arrays do need their values   to be passed back. So you will need to something like this:&lt;P&gt;    &lt;pre&gt;  public int [] nApptList = new int[10];  decodeArray = new ObjectRef[nApptList.length];  for (int i = 0; i &amp;lt nApptList.length; i++)   decodeArray[i] = new ObjectRef((short)nApptList[i]);  if ((ret = NetLinx.StringToVariable(decodeArray, buffer, rTempPos)) &amp;lt 0) return ret;  for (int i = 0; i &amp;lt nApptList.length; i++)   nApptList[i] = decodeArray[i].toInt();  &lt;/pre&gt;" name="decodeArray"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="Must be of type &lt;STRONG&gt;String&lt;/STRONG&gt;. This is where the decode data is found.&lt;P&gt;    Create rbuffer with a &lt;STRONG&gt;valueOf(String)&lt;/STRONG&gt; Example: &lt;br&gt;  &lt;code&gt;ObjectRef rBuffer = new ObjectRef(&quot;&quot;) or rBuffer.valueOf(&quot;&quot;)&lt;/code&gt;" name="rBuffer"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="Must be of type &lt;STRONG&gt;long&lt;/STRONG&gt;. This is where the first byte of the decode   data. Is it also modified to point to  the next location after the last decoded byte. That means   that successive calls to this function can be made without modifying position. Position should   be set to 0 on the first call.&lt;P&gt;    Create rPos with a &lt;STRONG&gt;valueOf(long)&lt;/STRONG&gt; Example: &lt;br&gt;  &lt;code&gt;ObjectRef rPos = new ObjectRef((long)0) or rPos.valueOf((long)0)&lt;/code&gt;" name="rPos"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="Number of bytes required to encode variable. 0 if there is an error." type="int" final="true" name="LengthVariableToString" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.io.dr1_0_0.Marshall" comment="any type of variable. This is the variable to be encoded. Example: &lt;br&gt;  &lt;code&gt;ObjectRef encode = new ObjectRef(0) or encode.valueOf(0)&lt;/code&gt;" name="encode"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="Number of bytes required to encode variable. 0 if there is an error." type="int" final="true" name="LengthVariableToString" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.io.dr1_0_0.Marshall[]" comment="any type of array variable. This is the array to be encoded. Example: &lt;br&gt;  &lt;pre&gt;  ObjectRef[] encodeArray = new ObjectRef[nValues.length];  for (int i = 0; i &amp;lt nValues.length; i++)   encodeArray[i] = new ObjectRef(nValues[i]);  &lt;/pre&gt;" name="encodeArray"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" name="com.amx.duet.tools.bose.esp88.io.dr1_0_0.Marshall">
		<dev:extends>
			<dev:extend name="com.amx.duet.tools.bose.esp88.io.dr1_0_0.IBinaryMarshall"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor visibility="public" name="Marshall">
				<dev:params>
					<dev:param type="boolean" comment="a &lt;code&gt;boolean&lt;/code&gt;." name="b"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="Marshall">
				<dev:params>
					<dev:param type="byte" comment="a &lt;code&gt;byte&lt;/code&gt;." name="b"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="Marshall">
				<dev:params>
					<dev:param type="char" comment="a &lt;code&gt;char&lt;/code&gt;." name="c"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="Marshall">
				<dev:params>
					<dev:param type="short" comment="a &lt;code&gt;short&lt;/code&gt;." name="s"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="Marshall">
				<dev:params>
					<dev:param type="int" comment="a &lt;code&gt;int&lt;/code&gt;." name="i"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="Marshall">
				<dev:params>
					<dev:param type="long" comment="a &lt;code&gt;long&lt;/code&gt;." name="l"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="Marshall">
				<dev:params>
					<dev:param type="float" comment="a &lt;code&gt;float&lt;/code&gt;." name="f"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="Marshall">
				<dev:params>
					<dev:param type="double" comment="a &lt;code&gt;double&lt;/code&gt;." name="d"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="Marshall">
				<dev:params>
					<dev:param type="java.lang.String" comment="a &lt;code&gt;String&lt;/code&gt;." name="str"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="Marshall">
				<dev:params>
					<dev:param type="java.lang.Object" comment="an &lt;code&gt;Object&lt;/code&gt;." name="o"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="Marshall">
				<dev:params>
					<dev:param type="java.lang.Object" comment="an &lt;code&gt;Object&lt;/code&gt;." name="o"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectType" comment="the &lt;code&gt;ObjectType&lt;/code&gt; that the object is assigned as." name="refType"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" returncomment="" type="boolean" final="true" name="skipBinaryHeader" static="true">
				<dev:params>
					<dev:param type="byte" comment="" name="type"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="int" name="binaryEncode">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" name="buffer"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" name="rPos"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" name="binaryEncode">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="" name="buffer"></dev:param>
					<dev:param type="boolean" comment="" name="skipHeader"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="int" name="binaryDecode">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" name="buffer"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" name="rPos"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" name="binaryDecode">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="" name="buffer"></dev:param>
					<dev:param type="boolean" comment="" name="skipHeader"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" name="binaryEncodeString">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="" name="buffer"></dev:param>
					<dev:param type="boolean" comment="" name="wideChar"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" name="binaryDecodeString">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="" name="buffer"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.io.File" serializable="true" name="com.amx.duet.tools.bose.esp88.io.dr1_0_0.ManagedFile">
		<dev:methods>
			<dev:constructor visibility="public" name="ManagedFile">
				<dev:params>
					<dev:param type="java.lang.String" comment="" name="sFilePath"></dev:param>
					<dev:param type="long" comment="" name="flag"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" returncomment="" type="long" name="getHandle"></dev:method>
			<dev:method visibility="public" returncomment="" type="long" name="getIOFlag"></dev:method>
			<dev:method visibility="public" returncomment="" type="long" name="setAccessor">
				<dev:params>
					<dev:param type="java.lang.String" comment="" name="strAccess"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="java.io.RandomAccessFile" name="getAccessor"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.duet.tools.bose.esp88.io.dr1_0_0.IStruct">
		<dev:extends>
			<dev:extend name="com.amx.duet.tools.bose.esp88.io.dr1_0_0.IBinaryMarshall"></dev:extend>
		</dev:extends>
	</dev:class>
	<dev:class abstract="true" name="com.amx.duet.tools.bose.esp88.io.dr1_0_0.IBinaryMarshall">
		<dev:fields>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="100" const="100" name="STV_DECODE_EOS" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="0" const="0" name="STV_DECODE_OK" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-1" const="-1" name="STV_DECODE_VARIABLE_MISMATCH" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-2" const="-2" name="STV_DECODE_DATA_INCOMPLETE" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-3" const="-3" name="STV_DECODE_DATA_TOO_SMALL" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-4" const="-4" name="STV_DECODE_OBJECT_TOO_SMALL" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="0" const="0" name="STV_ENCODE_OK" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-1" const="-1" name="STV_ENCODE_VARIABLE_UNKNOWN" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-2" const="-2" name="STV_ENCODE_BUFFER_TOO_SMALL" static="true"></dev:field>
			<dev:field visibility="public" fulltype="byte" type="byte" final="true" constexpr="-31" const="-31" name="TYPE_CHAR" static="true"></dev:field>
			<dev:field visibility="public" fulltype="byte" type="byte" final="true" constexpr="-30" const="-30" name="TYPE_WORD" static="true"></dev:field>
			<dev:field visibility="public" fulltype="byte" type="byte" final="true" constexpr="-29" const="-29" name="TYPE_DWORD" static="true"></dev:field>
			<dev:field visibility="public" fulltype="byte" type="byte" final="true" constexpr="-28" const="-28" name="TYPE_QWORD" static="true"></dev:field>
			<dev:field visibility="public" fulltype="byte" type="byte" final="true" constexpr="-27" const="-27" name="TYPE_CHAR_ARRAY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="byte" type="byte" final="true" constexpr="-26" const="-26" name="TYPE_WORD_ARRAY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="byte" type="byte" final="true" constexpr="-25" const="-25" name="TYPE_DWORD_ARRAY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="byte" type="byte" final="true" constexpr="-24" const="-24" name="TYPE_QWORD_ARRAY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="byte" type="byte" final="true" constexpr="-23" const="-23" name="TYPE_LONG_CHAR_ARRAY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="byte" type="byte" final="true" constexpr="-22" const="-22" name="TYPE_STRUCT_START" static="true"></dev:field>
			<dev:field visibility="public" fulltype="byte" type="byte" final="true" constexpr="-21" const="-21" name="TYPE_STRUCT_END" static="true"></dev:field>
			<dev:field visibility="public" fulltype="byte" type="byte" final="true" constexpr="-20" const="-20" name="TYPE_ARRAY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="byte" type="byte" final="true" constexpr="-19" const="-19" name="TYPE_SKIP" static="true"></dev:field>
			<dev:field visibility="public" fulltype="byte" type="byte" final="true" constexpr="1" const="1" name="SIZE_CHAR" static="true"></dev:field>
			<dev:field visibility="public" fulltype="byte" type="byte" final="true" constexpr="2" const="2" name="SIZE_WORD" static="true"></dev:field>
			<dev:field visibility="public" fulltype="byte" type="byte" final="true" constexpr="4" const="4" name="SIZE_DWORD" static="true"></dev:field>
			<dev:field visibility="public" fulltype="byte" type="byte" final="true" constexpr="8" const="8" name="SIZE_QWORD" static="true"></dev:field>
		</dev:fields>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.io.dr1_0_0.FileUtil">
		<dev:fields>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="0" const="0" name="FILE_OK" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-1" const="-1" name="FILE_INVALID_HANDLE" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-2" const="-2" name="FILE_INVALID_FILENAME" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-3" const="-3" name="FILE_INVALID_IOFLAG" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-4" const="-4" name="FILE_INVALID_DIRECTORY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-5" const="-5" name="FILE_DISK_ERROR" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-6" const="-6" name="FILE_INVALID_PARAMETER" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-7" const="-7" name="FILE_ALREADY_CLOSE" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-8" const="-8" name="FILE_NAME_EXISTS" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-9" const="-9" name="FILE_END_OF_FILE" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-10" const="-10" name="FILE_BUFFER_TOO_SMALL" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-11" const="-11" name="FILE_DISK_FULL" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-12" const="-12" name="FILE_DIRECTORY_NOT_LOADED" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-13" const="-13" name="FILE_DIRECTORY_EXISTS" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="1" const="1" name="IOFLAG_READ" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="2" const="2" name="IOFLAG_NEW" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="3" const="3" name="IOFLAG_APPEND" static="true"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor visibility="public" name="FileUtil"></dev:constructor>
			<dev:method visibility="public" returncomment="&lt;ul&gt;  &lt;li&gt;0 = operation was successful  &lt;li&gt;-1 = invalid file handle  &lt;li&gt;-7 = file already closed  &lt;li&gt;-5 = disk I/O error  &lt;/ul&gt;" type="long" final="true" name="FileClose" static="true">
				<dev:params>
					<dev:param type="long" comment="handle to the file returned by FileOpen()." name="lFileHandle"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;ul&gt;  &lt;li&gt;0 = operation was successful  &lt;li&gt;-2 = invalid file name  &lt;li&gt;-11 = disk full  &lt;li&gt;-5 = disk I/O error  &lt;/ul&gt;" type="long" final="true" name="FileCopy" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="path name of the file to copy (source)." name="sSrcFilePath"></dev:param>
					<dev:param type="java.lang.String" comment="path name of the copied file (destination)." name="sDstFilePath"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;ul&gt;  &lt;li&gt;0 = operation was successful  &lt;li&gt;-4 = invalid directory path  &lt;li&gt;-5 = disk I/O error  &lt;li&gt;-13 = directory name exists  &lt;/ul&gt;" type="long" final="true" name="FileCreateDir" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="string containing the directory path to create." name="sDirPath"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;ul&gt;  &lt;li&gt;0 = operation was successful  &lt;li&gt;-2 = invalid file path or name  &lt;li&gt;-5 = disk I/O error  &lt;/ul&gt;" type="long" final="true" name="FileDelete" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="path name of the file to delete. Wildcard characters (* and ?) are   permitted in the path name." name="sFilePath"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="This method returns the number of remaining files in the directory, or:  &lt;ul&gt;  &lt;li&gt;-4 = invalid directory path  &lt;li&gt;-10 = buffer too small  &lt;li&gt;-6 = invalid parameter (i.e. Entry points beyond the end of the directory)  &lt;li&gt;-12 = directory not loaded  &lt;li&gt;-5 = Disk I/O error  &lt;/ul&gt;" type="long" final="true" name="FileDir" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="String containing the path to the requested directory." name="sDirPath"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="Must be of type &lt;STRONG&gt;String&lt;/STRONG&gt;. buffer to hold the directory list.&lt;P&gt;      Create rStrBuffer with a &lt;STRONG&gt;valueOf(String)&lt;/STRONG&gt; Example: &lt;br&gt;  &lt;code&gt;ObjectRef rStrBuffer = new ObjectRef(&quot;&quot;) or rStrBuffer.valueOf(&quot;&quot;)&lt;/code&gt;" name="rStrBuffer"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="Must be of type &lt;STRONG&gt;String&lt;/STRONG&gt;. requested directory entry..&lt;P&gt;      Create rEntry with a &lt;STRONG&gt;valueOf(String)&lt;/STRONG&gt; Example: &lt;br&gt;  &lt;code&gt;ObjectRef rEntry = new ObjectRef(&quot;&quot;) or rEntry.valueOf(&quot;&quot;)&lt;/code&gt;" name="rEntry"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;ul&gt;  &lt;li&gt;0 = operation was successful  &lt;li&gt;-10 = size of DirPath buffer insufficient to hold directory path name  &lt;/ul&gt;" type="long" final="true" name="FileGetDir" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="Must be of type &lt;STRONG&gt;String&lt;/STRONG&gt;. Buffer to receive the current   working directory.&lt;P&gt;      Create rStrDirPath with a &lt;STRONG&gt;valueOf(String)&lt;/STRONG&gt; Example: &lt;br&gt;  &lt;code&gt;ObjectRef rStrDirPath = new ObjectRef(&quot;&quot;) or rStrDirPath.valueOf(&quot;&quot;)&lt;/code&gt;" name="rStrDirPath"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="If the open operation is successful, this function returns a non-zero integer value   representing the handle to the file. This handle must be used in subsequent read, write and   close operations.  &lt;ul&gt;  &lt;li&gt;0 = handle to file (open was successful)  &lt;li&gt;-2 = invalid file path or name  &lt;li&gt;-5 = disk I/O error  &lt;li&gt;-3 = invalid value supplied for IOFlag  &lt;/ul&gt;" type="long" final="true" name="FileOpen" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="String containing the path to the file to be opened." name="sFilePath"></dev:param>
					<dev:param type="long" name="lIOFlag"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;ul&gt;  &lt;li&gt;0 = the number of bytes actually read  &lt;li&gt;-1 = invalid file handle  &lt;li&gt;-9 = end-of-file reached  &lt;li&gt;-5 = disk I/O error  &lt;li&gt;-6 = invalid parameter  &lt;/ul&gt;" type="long" final="true" name="FileRead" static="true">
				<dev:params>
					<dev:param type="long" comment="handle to the file returned by FileOpen()." name="lFileHandle"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="Must be of type &lt;STRONG&gt;String&lt;/STRONG&gt;. Buffer to hold the data to be read.&lt;P&gt;     Create rStrBuffer with a &lt;STRONG&gt;valueOf(String)&lt;/STRONG&gt; Example: &lt;br&gt;  &lt;code&gt;ObjectRef rStrBuffer = new ObjectRef(&quot;&quot;) or rStrBuffer.valueOf(&quot;&quot;)&lt;/code&gt;" name="rStrBuffer"></dev:param>
					<dev:param type="long" comment="maximum number of bytes to read." name="lBufLen"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;ul&gt;  &lt;li&gt;0 = the number of bytes actually read  &lt;li&gt;-1 = invalid file handle  &lt;li&gt;-9 = EOF (end-of-file) reached  &lt;li&gt;-5 = disk I/O error  &lt;li&gt;-6 = invalid parameter (buffer length must be greater than zero)  &lt;/ul&gt;" type="long" final="true" name="FileReadLine" static="true">
				<dev:params>
					<dev:param type="long" comment="handle to the file returned by FileOpen()." name="lFileHandle"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="Must be of type &lt;STRONG&gt;String&lt;/STRONG&gt;. Buffer to hold the data to be read.&lt;P&gt;     Create rStrBuffer with a &lt;STRONG&gt;valueOf(String)&lt;/STRONG&gt; Example: &lt;br&gt;  &lt;code&gt;ObjectRef rStrBuffer = new ObjectRef(&quot;&quot;) or rStrBuffer.valueOf(&quot;&quot;)&lt;/code&gt;" name="rStrBuffer"></dev:param>
					<dev:param type="long" comment="maximum number of bytes to read." name="lBufLen"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;ul&gt;  &lt;li&gt;0 = operation was successful  &lt;li&gt;-4 = invalid directory path  &lt;li&gt;-5 = disk I/O error  &lt;/ul&gt;" type="long" final="true" name="FileRemoveDir" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="string containing the directory path to remove." name="sDirPath"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;ul&gt;  &lt;li&gt;0 = operation was successful  &lt;li&gt;-2 = invalid file name  &lt;li&gt;-8 = file name exists  &lt;li&gt;-5 = disk I/O error  &lt;/ul&gt;" type="long" final="true" name="FileRename" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="path name of the file to rename." name="sFilePath"></dev:param>
					<dev:param type="java.lang.String" comment="new file name. This name must not contain a directory path." name="sNewFileName"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="the length of data contained in the file or:  &lt;ul&gt;  &lt;li&gt;0 = Operation was successful and the file contains no data.  &lt;li&gt;-2 = invalid file name  &lt;li&gt;-5 = disk I/O error  &lt;/ul&gt;" type="long" final="true" name="FileSize" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="path name of the file to get the size of." name="sFilePath"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="the length of data contained in the file or:  &lt;ul&gt;  &lt;li&gt;0 = Operation was successful and the file contains no data.  &lt;li&gt;-1 = invalid file handle  &lt;/ul&gt;" type="long" final="true" name="FileSize" static="true">
				<dev:params>
					<dev:param type="long" comment="handle to the file returned by FileOpen()." name="lFileHandle"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;ul&gt;  &lt;li&gt;0 = Operation was successful and the result is the current file pointer value  &lt;li&gt;-1 = invalid file handle  &lt;li&gt;-6 = Invalid parameter (pos points beyond the end-of-file (position is set to the end-of-file))  &lt;li&gt;-5 = disk I/O error  &lt;/ul&gt;" type="long" final="true" name="FileSeek" static="true">
				<dev:params>
					<dev:param type="long" comment="handle to the file returned by FileOpen()." name="lFileHandle"></dev:param>
					<dev:param type="long" comment="The byte position to set the file pointer (0 = beginning of file, -1 = end of file)" name="lPos"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;ul&gt;  &lt;li&gt;0 = the number of bytes actually written  &lt;li&gt;-1 = invalid file handle  &lt;li&gt;-11 = disk full  &lt;li&gt;-5 = disk I/O error  &lt;li&gt;-6 = invalid parameter (buffer length must be greater than zero)  &lt;/ul&gt;" type="long" final="true" name="FileWrite" static="true">
				<dev:params>
					<dev:param type="long" comment="handle to the file returned by FileOpen()." name="lFileHandle"></dev:param>
					<dev:param type="java.lang.String" comment="buffer containing the data to write." name="sBuffer"></dev:param>
					<dev:param type="long" comment="number of bytes to write." name="lBufLen"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;ul&gt;  &lt;li&gt;0 = the number of bytes actually written  &lt;li&gt;-1 = invalid file handle  &lt;li&gt;-11 = disk full  &lt;li&gt;-5 = disk I/O error  &lt;li&gt;-6 = invalid parameter (LineLen must be greater than zero)  &lt;/ul&gt;" type="long" final="true" name="FileWriteLine" static="true">
				<dev:params>
					<dev:param type="long" comment="handle to the file returned by FileOpen()." name="lFileHandle"></dev:param>
					<dev:param type="java.lang.String" comment="buffer containing the data to write." name="sBuffer"></dev:param>
					<dev:param type="long" comment="number of bytes to write." name="lLineLen"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="boolean" final="true" name="deleteDir" static="true">
				<dev:params>
					<dev:param type="java.io.File" comment="" name="dir"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="Default user directory prepended String" type="java.lang.String" final="true" name="getUserDirectory" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="String to check for user directory (can be null or empty)" name="path"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.io.dr1_0_0.FileManager">
		<dev:fields>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="0" const="0" name="FILE_OK" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-1" const="-1" name="FILE_INVALID_HANDLE" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-2" const="-2" name="FILE_INVALID_FILENAME" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-3" const="-3" name="FILE_INVALID_IOFLAG" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-4" const="-4" name="FILE_INVALID_DIRECTORY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-5" const="-5" name="FILE_DISK_ERROR" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-6" const="-6" name="FILE_INVALID_PARAMETER" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-7" const="-7" name="FILE_ALREADY_CLOSE" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-8" const="-8" name="FILE_NAME_EXISTS" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-9" const="-9" name="FILE_END_OF_FILE" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-10" const="-10" name="FILE_BUFFER_TOO_SMALL" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-11" const="-11" name="FILE_DISK_FULL" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-12" const="-12" name="FILE_DIRECTORY_NOT_LOADED" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-13" const="-13" name="FILE_DIRECTORY_EXISTS" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="1" const="1" name="IOFLAG_READ" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="2" const="2" name="IOFLAG_NEW" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="3" const="3" name="IOFLAG_APPEND" static="true"></dev:field>
		</dev:fields>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONTokener">
		<dev:methods>
			<dev:constructor visibility="public" name="JSONTokener">
				<dev:params>
					<dev:param type="java.lang.String" comment="A source string." name="s"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" type="void" name="back"></dev:method>
			<dev:method visibility="public" returncomment="true if not yet at the end of the source." type="boolean" name="more"></dev:method>
			<dev:method visibility="public" returncomment="The next character, or 0 if past the end of the source string." type="char" name="next"></dev:method>
			<dev:method visibility="public" returncomment="The character." type="char" name="next">
				<dev:params>
					<dev:param type="char" comment="The character to match." name="c"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A string of n characters." type="java.lang.String" name="next">
				<dev:params>
					<dev:param type="int" comment="The number of characters to take." name="n"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A character, or 0 if there are no more characters." type="char" name="nextClean"></dev:method>
			<dev:method visibility="public" returncomment="A String." type="java.lang.String" name="nextString">
				<dev:params>
					<dev:param type="char" comment="The quoting character, either &lt;code&gt;&quot;&lt;/code&gt;&amp;nbsp;&lt;small&gt;(double quote)&lt;/small&gt; or &lt;code&gt;&apos;&lt;/code&gt;&amp;nbsp;&lt;small&gt;(single quote)&lt;/small&gt;." name="quote"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A string." type="java.lang.String" name="nextTo">
				<dev:params>
					<dev:param type="char" comment="A delimiter character." name="d"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A string, trimmed." type="java.lang.String" name="nextTo">
				<dev:params>
					<dev:param type="java.lang.String" comment="A set of delimiter characters." name="delimiters"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="An object." type="java.lang.Object" name="nextValue"></dev:method>
			<dev:method visibility="public" returncomment="The requested character, or zero if the requested character is not found." type="char" name="skipTo">
				<dev:params>
					<dev:param type="char" comment="A character to skip to." name="to"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="boolean" name="skipPast">
				<dev:params>
					<dev:param type="java.lang.String" comment="A string to skip past." name="to"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A JSONException object, suitable for throwing" type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONException" name="syntaxError">
				<dev:params>
					<dev:param type="java.lang.String" comment="The error message." name="message"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&quot; at character [this.myIndex] of [this.mySource]&quot;" type="java.lang.String" name="toString"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONObject">
		<dev:fields>
			<dev:field visibility="public" fulltype="java.lang.Object" type="Object" final="true" name="NULL" static="true"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor visibility="public" name="JSONObject"></dev:constructor>
			<dev:constructor visibility="public" name="JSONObject">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONObject" comment="A JSONObject." name="jo"></dev:param>
					<dev:param type="java.lang.String[]" comment="An array of strings." name="sa"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="JSONObject">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONTokener" comment="A JSONTokener object containing the source string." name="x"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="JSONObject">
				<dev:params>
					<dev:param type="java.util.Map" comment="A map object that can be used to initialize the contents of the JSONObject." name="map"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="JSONObject">
				<dev:params>
					<dev:param type="java.lang.Object" comment="An object that has fields that should be used to make a JSONObject." name="object"></dev:param>
					<dev:param type="java.lang.String[]" comment="An array of strings, the names of the fields to be used from the object." name="names"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="JSONObject">
				<dev:params>
					<dev:param type="java.lang.String" comment="A string beginning with &lt;code&gt;{&lt;/code&gt;&amp;nbsp;&lt;small&gt;(left brace)&lt;/small&gt; and ending with &lt;code&gt;}&lt;/code&gt;&amp;nbsp;&lt;small&gt;(right brace)&lt;/small&gt;." name="string"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" type="void" name="clear"></dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONObject" name="accumulate">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
					<dev:param type="java.lang.Object" comment="An object to be accumulated under the key." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONObject" name="append">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
					<dev:param type="java.lang.Object" comment="An object to be accumulated under the key." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A String." type="java.lang.String" name="doubleToString" static="true">
				<dev:params>
					<dev:param type="double" comment="A double." name="d"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The object associated with the key." type="java.lang.Object" name="get">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The truth." type="boolean" name="getBoolean">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The numeric value." type="double" name="getDouble">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The integer value." type="int" name="getInt">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A JSONArray which is the value." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="getJSONArray">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A JSONObject which is the value." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONObject" name="getJSONObject">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The long value." type="long" name="getLong">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A string which is the value." type="java.lang.String" name="getString">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if the key exists in the JSONObject." type="boolean" name="has">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if there is no value associated with the key or if the value is the JSONObject.NULL object." type="boolean" name="isNull">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="An iterator of the keys." type="java.util.Iterator" name="keys"></dev:method>
			<dev:method visibility="public" returncomment="The number of keys in the JSONObject." type="int" name="length"></dev:method>
			<dev:method visibility="public" returncomment="A JSONArray containing the key strings, or null if the JSONObject is empty." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="names"></dev:method>
			<dev:method visibility="public" returncomment="A String." type="java.lang.String" name="numberToString" static="true">
				<dev:params>
					<dev:param type="java.lang.Number" comment="A Number" name="n"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="An object which is the value, or null if there is no value." type="java.lang.Object" name="opt">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The truth." type="boolean" name="optBoolean">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The truth." type="boolean" name="optBoolean">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
					<dev:param type="boolean" comment="The default." name="defaultValue"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONObject" name="put">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
					<dev:param type="java.util.Collection" comment="A Collection value." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="An object which is the value." type="double" name="optDouble">
				<dev:params>
					<dev:param type="java.lang.String" comment="A string which is the key." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="An object which is the value." type="double" name="optDouble">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
					<dev:param type="double" comment="The default." name="defaultValue"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="An object which is the value." type="int" name="optInt">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="An object which is the value." type="int" name="optInt">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
					<dev:param type="int" comment="The default." name="defaultValue"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A JSONArray which is the value." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="optJSONArray">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A JSONObject which is the value." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONObject" name="optJSONObject">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="An object which is the value." type="long" name="optLong">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="An object which is the value." type="long" name="optLong">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
					<dev:param type="long" comment="The default." name="defaultValue"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A string which is the value." type="java.lang.String" name="optString">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A string which is the value." type="java.lang.String" name="optString">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
					<dev:param type="java.lang.String" comment="The default." name="defaultValue"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONObject" name="put">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
					<dev:param type="boolean" comment="A boolean which is the value." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONObject" name="put">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
					<dev:param type="double" comment="A double which is the value." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONObject" name="put">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
					<dev:param type="int" comment="An int which is the value." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONObject" name="put">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
					<dev:param type="long" comment="A long which is the value." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONObject" name="put">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
					<dev:param type="java.util.Map" comment="A Map value." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONObject" name="put">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
					<dev:param type="java.lang.Object" comment="An object which is the value. It should be of one of these types: Boolean, Double, Integer, JSONArray, JSONObject, Long, String, or the             JSONObject.NULL object." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONObject" name="putOpt">
				<dev:params>
					<dev:param type="java.lang.String" comment="A key string." name="key"></dev:param>
					<dev:param type="java.lang.Object" comment="An object which is the value. It should be of one of these types: Boolean, Double, Integer, JSONArray, JSONObject, Long, String, or the             JSONObject.NULL object." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A String correctly formatted for insertion in a JSON text." type="java.lang.String" name="quote" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="A String" name="string"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The value that was associated with the name, or null if there was no value." type="java.lang.Object" name="remove">
				<dev:params>
					<dev:param type="java.lang.String" comment="The name to be removed." name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A JSONArray of values." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="toJSONArray">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" comment="A JSONArray containing a list of key strings. This determines the sequence of the values in the result." name="names"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a printable, displayable, portable, transmittable representation of the object, beginning with &lt;code&gt;{&lt;/code&gt;&amp;nbsp;&lt;small&gt;(left brace)&lt;/small&gt;          and ending with &lt;code&gt;}&lt;/code&gt;&amp;nbsp;&lt;small&gt;(right brace)&lt;/small&gt;." type="java.lang.String" name="toString"></dev:method>
			<dev:method visibility="public" returncomment="a printable, displayable, portable, transmittable representation of the object, beginning with &lt;code&gt;{&lt;/code&gt;&amp;nbsp;&lt;small&gt;(left brace)&lt;/small&gt;          and ending with &lt;code&gt;}&lt;/code&gt;&amp;nbsp;&lt;small&gt;(right brace)&lt;/small&gt;." type="java.lang.String" name="toString">
				<dev:params>
					<dev:param type="int" comment="The number of spaces to add to each level of indentation." name="indentFactor"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The writer." type="java.io.Writer" name="write">
				<dev:params>
					<dev:param type="java.io.Writer" name="writer"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Exception" serializable="true" name="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONException">
		<dev:methods>
			<dev:constructor visibility="public" name="JSONException">
				<dev:params>
					<dev:param type="java.lang.String" comment="" name="message"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="JSONException">
				<dev:params>
					<dev:param type="java.lang.Throwable" name="t"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" type="java.lang.Throwable" name="getCause"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray">
		<dev:methods>
			<dev:constructor visibility="public" name="JSONArray"></dev:constructor>
			<dev:constructor visibility="public" name="JSONArray">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONTokener" comment="A JSONTokener" name="x"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="JSONArray">
				<dev:params>
					<dev:param type="java.lang.String" comment="A string that begins with &lt;code&gt;[&lt;/code&gt;&amp;nbsp;&lt;small&gt;(left bracket)&lt;/small&gt; and ends with &lt;code&gt;]&lt;/code&gt;&amp;nbsp;&lt;small&gt;(right bracket)&lt;/small&gt;." name="string"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="JSONArray">
				<dev:params>
					<dev:param type="java.util.Collection" comment="A Collection." name="collection"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" returncomment="An object value." type="java.lang.Object" name="get">
				<dev:params>
					<dev:param type="int" comment="The index must be between 0 and length() - 1." name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The truth." type="boolean" name="getBoolean">
				<dev:params>
					<dev:param type="int" comment="The index must be between 0 and length() - 1." name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The value." type="double" name="getDouble">
				<dev:params>
					<dev:param type="int" comment="The index must be between 0 and length() - 1." name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The value." type="int" name="getInt">
				<dev:params>
					<dev:param type="int" comment="The index must be between 0 and length() - 1." name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A JSONArray value." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="getJSONArray">
				<dev:params>
					<dev:param type="int" comment="The index must be between 0 and length() - 1." name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A JSONObject value." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONObject" name="getJSONObject">
				<dev:params>
					<dev:param type="int" comment="subscript" name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The value." type="long" name="getLong">
				<dev:params>
					<dev:param type="int" comment="The index must be between 0 and length() - 1." name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A string value." type="java.lang.String" name="getString">
				<dev:params>
					<dev:param type="int" comment="The index must be between 0 and length() - 1." name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if the value at the index is null, or if there is no value." type="boolean" name="isNull">
				<dev:params>
					<dev:param type="int" comment="The index must be between 0 and length() - 1." name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a string." type="java.lang.String" name="join">
				<dev:params>
					<dev:param type="java.lang.String" comment="A string that will be inserted between the elements." name="separator"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The length (or size)." type="int" name="length"></dev:method>
			<dev:method visibility="public" returncomment="An object value, or null if there is no object at that index." type="java.lang.Object" name="opt">
				<dev:params>
					<dev:param type="int" comment="The index must be between 0 and length() - 1." name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The truth." type="boolean" name="optBoolean">
				<dev:params>
					<dev:param type="int" comment="The index must be between 0 and length() - 1." name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The truth." type="boolean" name="optBoolean">
				<dev:params>
					<dev:param type="int" comment="The index must be between 0 and length() - 1." name="index"></dev:param>
					<dev:param type="boolean" comment="A boolean default." name="defaultValue"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The value." type="double" name="optDouble">
				<dev:params>
					<dev:param type="int" comment="The index must be between 0 and length() - 1." name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The value." type="double" name="optDouble">
				<dev:params>
					<dev:param type="int" comment="subscript" name="index"></dev:param>
					<dev:param type="double" comment="The default value." name="defaultValue"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The value." type="int" name="optInt">
				<dev:params>
					<dev:param type="int" comment="The index must be between 0 and length() - 1." name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The value." type="int" name="optInt">
				<dev:params>
					<dev:param type="int" comment="The index must be between 0 and length() - 1." name="index"></dev:param>
					<dev:param type="int" comment="The default value." name="defaultValue"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A JSONArray value, or null if the index has no value, or if the value is not a JSONArray." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="optJSONArray">
				<dev:params>
					<dev:param type="int" comment="subscript" name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A JSONObject value." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONObject" name="optJSONObject">
				<dev:params>
					<dev:param type="int" comment="The index must be between 0 and length() - 1." name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The value." type="long" name="optLong">
				<dev:params>
					<dev:param type="int" comment="The index must be between 0 and length() - 1." name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The value." type="long" name="optLong">
				<dev:params>
					<dev:param type="int" comment="The index must be between 0 and length() - 1." name="index"></dev:param>
					<dev:param type="long" comment="The default value." name="defaultValue"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A String value." type="java.lang.String" name="optString">
				<dev:params>
					<dev:param type="int" comment="The index must be between 0 and length() - 1." name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A String value." type="java.lang.String" name="optString">
				<dev:params>
					<dev:param type="int" comment="The index must be between 0 and length() - 1." name="index"></dev:param>
					<dev:param type="java.lang.String" comment="The default value." name="defaultValue"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="put">
				<dev:params>
					<dev:param type="boolean" comment="A boolean value." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="put">
				<dev:params>
					<dev:param type="java.util.Collection" comment="A Collection value." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="put">
				<dev:params>
					<dev:param type="double" comment="A double value." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="put">
				<dev:params>
					<dev:param type="int" comment="An int value." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="put">
				<dev:params>
					<dev:param type="long" comment="A long value." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="put">
				<dev:params>
					<dev:param type="java.util.Map" comment="A Map value." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="put">
				<dev:params>
					<dev:param type="java.lang.Object" comment="An object value. The value should be a Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the JSONObject.NULL object." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="put">
				<dev:params>
					<dev:param type="int" comment="The subscript." name="index"></dev:param>
					<dev:param type="boolean" comment="A boolean value." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="put">
				<dev:params>
					<dev:param type="int" comment="The subscript." name="index"></dev:param>
					<dev:param type="java.util.Collection" comment="A Collection value." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="put">
				<dev:params>
					<dev:param type="int" comment="The subscript." name="index"></dev:param>
					<dev:param type="double" comment="A double value." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="put">
				<dev:params>
					<dev:param type="int" comment="The subscript." name="index"></dev:param>
					<dev:param type="int" comment="An int value." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="put">
				<dev:params>
					<dev:param type="int" comment="The subscript." name="index"></dev:param>
					<dev:param type="long" comment="A long value." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="put">
				<dev:params>
					<dev:param type="int" comment="The subscript." name="index"></dev:param>
					<dev:param type="java.util.Map" comment="The Map value." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="this." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" name="put">
				<dev:params>
					<dev:param type="int" comment="The subscript." name="index"></dev:param>
					<dev:param type="java.lang.Object" comment="The value to put into the array. The value should be a Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the             JSONObject.NULL object." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A JSONObject, or null if there are no names or if this JSONArray has no values." type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONObject" name="toJSONObject">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.json.dr1_0_0.JSONArray" comment="A JSONArray containing a list of key strings. These will be paired with the values." name="names"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a printable, displayable, transmittable representation of the array." type="java.lang.String" name="toString"></dev:method>
			<dev:method visibility="public" returncomment="a printable, displayable, transmittable representation of the object, beginning with &lt;code&gt;[&lt;/code&gt;&amp;nbsp;&lt;small&gt;(left bracket)&lt;/small&gt; and          ending with &lt;code&gt;]&lt;/code&gt;&amp;nbsp;&lt;small&gt;(right bracket)&lt;/small&gt;." type="java.lang.String" name="toString">
				<dev:params>
					<dev:param type="int" comment="The number of spaces to add to each level of indentation." name="indentFactor"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The writer." type="java.io.Writer" name="write">
				<dev:params>
					<dev:param type="java.io.Writer" name="writer"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.duet.tools.bose.esp88.json.dr1_0_0.IJSONString"></dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ValidateUtil">
		<dev:methods>
			<dev:constructor visibility="public" name="ValidateUtil"></dev:constructor>
			<dev:method visibility="public" returncomment="String containing the current baud rate setting, or the default value" type="java.lang.String" name="validateBaudRate" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="String containing the device&apos;s current baud rate setting" name="rate"></dev:param>
					<dev:param type="java.lang.String[]" comment="an array of Strings containing all valid baud rates for the device" name="validRates"></dev:param>
					<dev:param type="java.lang.String" comment="String containing the device&apos;s default baud rate" name="defaultRate"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="String containing the current device ID setting, or the default value" type="java.lang.String" name="validateDeviceID" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="String containing the device&apos;s current device ID setting" name="deviceID"></dev:param>
					<dev:param type="int" comment="integer, represents the smallest valid ID" name="nMinID"></dev:param>
					<dev:param type="int" comment="integer, represents the largest valid ID" name="nMaxID"></dev:param>
					<dev:param type="java.lang.String" comment="String containing the device&apos;s default ID" name="defaultID"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="String containing the current poll time setting, or the default value in   milliseconds converted to seconds" type="java.lang.String" name="validatePollTime" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="String containing the device&apos;s current poll time setting" name="polltime"></dev:param>
					<dev:param type="long" comment="integer, represents the default poll time in milliseconds" name="nTime"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="String containing the current poll time setting, or the default value in   milliseconds converted to seconds" type="java.lang.String" name="validatePollTime" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="String containing the device&apos;s current poll time setting" name="polltime"></dev:param>
					<dev:param type="long" comment="minimum poll time value." name="lMin"></dev:param>
					<dev:param type="long" comment="maximum poll time value." name="lMax"></dev:param>
					<dev:param type="long" comment="integer, represents the default poll time in milliseconds" name="lTime"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="java.lang.String" name="validateTimeoutCount" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="" name="timeout"></dev:param>
					<dev:param type="int" comment="" name="nMax"></dev:param>
					<dev:param type="int" comment="" name="nDefault"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="java.lang.String" name="validateReconnnectTime" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="connectTime"></dev:param>
					<dev:param type="long" comment="" name="lMin"></dev:param>
					<dev:param type="long" comment="" name="lMax"></dev:param>
					<dev:param type="long" comment="" name="lTime"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if this is a valid DPS; false otherwise" type="boolean" final="true" name="isValidDPS" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="String containing the DPS to validate" name="dps"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if this is a valid DPS; false otherwise" type="boolean" final="true" name="isValidDPS" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="DPS to validate" name="dps"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if this is a valid IP address; false otherwise" type="boolean" final="true" name="isValidIP" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="String containing the address to validate" name="ip"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="int value contained in the string" type="int" name="ATOI" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="- String containing an int value" name="str"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectType">
		<dev:fields>
			<dev:field visibility="public" fulltype="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectType" type="ObjectType" final="true" name="INVALID" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectType" type="ObjectType" final="true" name="BOOL" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectType" type="ObjectType" final="true" name="BYTE" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectType" type="ObjectType" final="true" name="CHAR" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectType" type="ObjectType" final="true" name="SHORT" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectType" type="ObjectType" final="true" name="INTEGER" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectType" type="ObjectType" final="true" name="LONG" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectType" type="ObjectType" final="true" name="FLOAT" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectType" type="ObjectType" final="true" name="DOUBLE" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectType" type="ObjectType" final="true" name="STRING" static="true"></dev:field>
			<dev:field visibility="public" fulltype="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectType" type="ObjectType" final="true" name="OBJECT" static="true"></dev:field>
			<dev:field visibility="public" fulltype="java.util.List" type="List" final="true" name="VALUES" static="true"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:method visibility="public" returncomment="String" type="java.lang.String" name="getName"></dev:method>
			<dev:method visibility="public" type="java.lang.String" name="toString"></dev:method>
			<dev:method visibility="public" type="boolean" final="true" name="equals">
				<dev:params>
					<dev:param type="java.lang.Object" name="obj"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="int" final="true" name="hashCode"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef">
		<dev:methods>
			<dev:constructor visibility="public" name="ObjectRef">
				<dev:params>
					<dev:param type="boolean" comment="a &lt;code&gt;boolean&lt;/code&gt;." name="b"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="ObjectRef">
				<dev:params>
					<dev:param type="byte" comment="a &lt;code&gt;byte&lt;/code&gt;." name="b"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="ObjectRef">
				<dev:params>
					<dev:param type="char" comment="a &lt;code&gt;char&lt;/code&gt;." name="c"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="ObjectRef">
				<dev:params>
					<dev:param type="short" comment="a &lt;code&gt;short&lt;/code&gt;." name="s"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="ObjectRef">
				<dev:params>
					<dev:param type="int" comment="a &lt;code&gt;int&lt;/code&gt;." name="i"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="ObjectRef">
				<dev:params>
					<dev:param type="long" comment="a &lt;code&gt;long&lt;/code&gt;." name="l"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="ObjectRef">
				<dev:params>
					<dev:param type="float" comment="a &lt;code&gt;float&lt;/code&gt;." name="f"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="ObjectRef">
				<dev:params>
					<dev:param type="double" comment="a &lt;code&gt;double&lt;/code&gt;." name="d"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="ObjectRef">
				<dev:params>
					<dev:param type="java.lang.String" comment="a &lt;code&gt;String&lt;/code&gt;." name="str"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="ObjectRef">
				<dev:params>
					<dev:param type="java.lang.Object" comment="an &lt;code&gt;Object&lt;/code&gt;." name="o"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="ObjectRef">
				<dev:params>
					<dev:param type="java.lang.Object" comment="an &lt;code&gt;Object&lt;/code&gt;." name="o"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectType" comment="the &lt;code&gt;ObjectType&lt;/code&gt; that the object is assigned as." name="refType"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="ObjectRef">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectType" comment="the &lt;code&gt;ObjectType&lt;/code&gt; that the object is assigned as." name="refType"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" returncomment="The &lt;code&gt;boolean&lt;/code&gt; value created as a &lt;code&gt;Boolean&lt;/code&gt;   object and cast to an &lt;code&gt;Object&lt;/code&gt;." type="java.lang.Object" name="valueOf">
				<dev:params>
					<dev:param type="boolean" comment="a &lt;code&gt;boolean&lt;/code&gt;." name="b"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The &lt;code&gt;byte&lt;/code&gt; value created as a &lt;code&gt;Byte&lt;/code&gt; object   and cast to an &lt;code&gt;Object&lt;/code&gt;." type="java.lang.Object" name="valueOf">
				<dev:params>
					<dev:param type="byte" comment="a &lt;code&gt;byte&lt;/code&gt;." name="b"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The &lt;code&gt;char&lt;/code&gt; value created as a &lt;code&gt;Character&lt;/code&gt;    object and cast to an &lt;code&gt;Object&lt;/code&gt;." type="java.lang.Object" name="valueOf">
				<dev:params>
					<dev:param type="char" comment="a &lt;code&gt;char&lt;/code&gt;." name="c"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The &lt;code&gt;short&lt;/code&gt; value created as a &lt;code&gt;Short&lt;/code&gt;    object and cast to an &lt;code&gt;Object&lt;/code&gt;." type="java.lang.Object" name="valueOf">
				<dev:params>
					<dev:param type="short" comment="a &lt;code&gt;short&lt;/code&gt;." name="s"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The &lt;code&gt;int&lt;/code&gt; value created as a &lt;code&gt;Integer&lt;/code&gt;    object and cast to an &lt;code&gt;Object&lt;/code&gt;." type="java.lang.Object" name="valueOf">
				<dev:params>
					<dev:param type="int" comment="an &lt;code&gt;int&lt;/code&gt;." name="i"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The &lt;code&gt;long&lt;/code&gt; value created as a &lt;code&gt;Long&lt;/code&gt;    object and cast to an &lt;code&gt;Object&lt;/code&gt;." type="java.lang.Object" name="valueOf">
				<dev:params>
					<dev:param type="long" comment="a &lt;code&gt;long&lt;/code&gt;." name="l"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The &lt;code&gt;float&lt;/code&gt; value created as a &lt;code&gt;Float&lt;/code&gt;    object and cast to an &lt;code&gt;Object&lt;/code&gt;." type="java.lang.Object" name="valueOf">
				<dev:params>
					<dev:param type="float" comment="a &lt;code&gt;float&lt;/code&gt;." name="f"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The &lt;code&gt;double&lt;/code&gt; value created as a &lt;code&gt;Double&lt;/code&gt;    object and cast to an &lt;code&gt;Object&lt;/code&gt;." type="java.lang.Object" name="valueOf">
				<dev:params>
					<dev:param type="double" comment="a &lt;code&gt;double&lt;/code&gt;." name="d"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The &lt;code&gt;String&lt;/code&gt; value cast to an &lt;code&gt;Object&lt;/code&gt;." type="java.lang.Object" name="valueOf">
				<dev:params>
					<dev:param type="java.lang.String" comment="a &lt;code&gt;String&lt;/code&gt;." name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The &lt;code&gt;Object&lt;/code&gt; argument passed it." type="java.lang.Object" name="valueOf">
				<dev:params>
					<dev:param type="java.lang.Object" comment="an &lt;code&gt;Object&lt;/code&gt;." name="o"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The &lt;code&gt;Object&lt;/code&gt; argument passed it." type="java.lang.Object" name="valueOf">
				<dev:params>
					<dev:param type="java.lang.Object" comment="an &lt;code&gt;Object&lt;/code&gt;." name="o"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectType" comment="" name="refType"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="If this object was created from a &lt;code&gt;boolean&lt;/code&gt; value, then   that value will be returned. Otherwise, &lt;code&gt;false&lt;/code&gt; will be returned." type="boolean" name="booleanValue"></dev:method>
			<dev:method visibility="public" returncomment="If this object was created from a &lt;code&gt;byte&lt;/code&gt; value, then   that value will be returned. Otherwise, &lt;code&gt;0&lt;/code&gt; will be returned." type="byte" name="byteValue"></dev:method>
			<dev:method visibility="public" returncomment="If this object was created from a &lt;code&gt;char&lt;/code&gt; value, then   that value will be returned. Otherwise, &lt;code&gt;0&lt;/code&gt; will be returned." type="char" name="charValue"></dev:method>
			<dev:method visibility="public" returncomment="If this object was created from a &lt;code&gt;short&lt;/code&gt; value, then   that value will be returned. Otherwise, &lt;code&gt;0&lt;/code&gt; will be returned." type="short" name="shortValue"></dev:method>
			<dev:method visibility="public" returncomment="If this object was created from a &lt;code&gt;int&lt;/code&gt; value, then   that value will be returned. Otherwise, &lt;code&gt;0&lt;/code&gt; will be returned." type="int" name="intValue"></dev:method>
			<dev:method visibility="public" returncomment="If this object was created from a &lt;code&gt;long&lt;/code&gt; value, then   that value will be returned. Otherwise, &lt;code&gt;0&lt;/code&gt; will be returned." type="long" name="longValue"></dev:method>
			<dev:method visibility="public" returncomment="If this object was created from a &lt;code&gt;float&lt;/code&gt; value, then   that value will be returned. Otherwise, &lt;code&gt;0&lt;/code&gt; will be returned." type="float" name="floatValue"></dev:method>
			<dev:method visibility="public" returncomment="If this object was created from a &lt;code&gt;double&lt;/code&gt; value, then   that value will be returned. Otherwise, &lt;code&gt;0&lt;/code&gt; will be returned." type="double" name="doubleValue"></dev:method>
			<dev:method visibility="public" returncomment="If this object was created from a &lt;code&gt;String&lt;/code&gt; value, then   that value will be returned. Otherwise, an empty string will be returned." type="java.lang.String" name="stringValue"></dev:method>
			<dev:method visibility="public" returncomment="The &lt;code&gt;Object&lt;/code&gt; stored in this object." type="java.lang.Object" name="getValue"></dev:method>
			<dev:method visibility="public" returncomment="&lt;code&gt;ObjectType&lt;/code&gt; representing the type of object stored." type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectType" name="getType"></dev:method>
			<dev:method visibility="public" type="boolean" name="equals">
				<dev:params>
					<dev:param type="java.lang.Object" name="obj"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String" name="toString"></dev:method>
			<dev:method visibility="public" returncomment="The converted &lt;code&gt;boolean&lt;/code&gt; value. If the stored value is equal to   &quot;true&quot; or a value other than 0, the return value will be &lt;code&gt;true&lt;/code&gt;.   Otherwise, the return value should be false." type="boolean" name="toBoolean"></dev:method>
			<dev:method visibility="public" returncomment="The converted &lt;code&gt;byte&lt;/code&gt; value. If the stored value is equal to   &quot;true&quot;, the return value will be &lt;code&gt;1&lt;/code&gt;. If the value could not be   converted the return value will be &lt;code&gt;0&lt;/code&gt;. Otherwise, the return value   should be a value between &lt;code&gt;Byte.MIN_VALUE&lt;/code&gt; and   &lt;code&gt;Byte.MAX_VALUE&lt;/code&gt;." type="byte" name="toByte"></dev:method>
			<dev:method visibility="public" returncomment="The converted &lt;code&gt;char&lt;/code&gt; value. If the stored value is equal to   &quot;true&quot;, the return value will be &lt;code&gt;1&lt;/code&gt;. If the value could not be   converted the return value will be &lt;code&gt;0&lt;/code&gt;. Otherwise, the return value   should be a value between &lt;code&gt;Character.MIN_VALUE&lt;/code&gt; and   &lt;code&gt;Character.MAX_VALUE&lt;/code&gt;." type="char" name="toChar"></dev:method>
			<dev:method visibility="public" returncomment="The converted &lt;code&gt;short&lt;/code&gt; value. If the stored value is equal to   &quot;true&quot;, the return value will be &lt;code&gt;1&lt;/code&gt;. If the value could not be   converted the return value will be &lt;code&gt;0&lt;/code&gt;. Otherwise, the return value   should be a value between &lt;code&gt;Short.MIN_VALUE&lt;/code&gt; and   &lt;code&gt;Short.MAX_VALUE&lt;/code&gt;." type="short" name="toShort"></dev:method>
			<dev:method visibility="public" returncomment="The converted &lt;code&gt;int&lt;/code&gt; value. If the stored value is equal to   &quot;true&quot;, the return value will be &lt;code&gt;1&lt;/code&gt;. If the value could not be   converted the return value will be &lt;code&gt;0&lt;/code&gt;. Otherwise, the return value   should be a value between &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt; and   &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;." type="int" name="toInt"></dev:method>
			<dev:method visibility="public" returncomment="The converted &lt;code&gt;long&lt;/code&gt; value. If the stored value is equal to   &quot;true&quot;, the return value will be &lt;code&gt;1&lt;/code&gt;. If the value could not be   converted the return value will be &lt;code&gt;0&lt;/code&gt;. Otherwise, the return value   should be a value between &lt;code&gt;Long.MIN_VALUE&lt;/code&gt; and   &lt;code&gt;Long.MAX_VALUE&lt;/code&gt;." type="long" name="toLong"></dev:method>
			<dev:method visibility="public" returncomment="The converted &lt;code&gt;float&lt;/code&gt; value. If the stored value is equal to   &quot;true&quot;, the return value will be &lt;code&gt;1&lt;/code&gt;. If the value could not be   converted the return value will be &lt;code&gt;0&lt;/code&gt;. Otherwise, the return value   should be a value between &lt;code&gt;Float.MIN_VALUE&lt;/code&gt; and   &lt;code&gt;Float.MAX_VALUE&lt;/code&gt;." type="float" name="toFloat"></dev:method>
			<dev:method visibility="public" returncomment="The converted &lt;code&gt;double&lt;/code&gt; value. If the stored value is equal to   &quot;true&quot;, the return value will be &lt;code&gt;1&lt;/code&gt;. If the value could not be   converted the return value will be &lt;code&gt;0&lt;/code&gt;. Otherwise, the return value   should be a value between &lt;code&gt;Double.MIN_VALUE&lt;/code&gt; and   &lt;code&gt;Double.MAX_VALUE&lt;/code&gt;." type="double" name="toDouble"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.Logger">
		<dev:fields>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="4" const="4" name="LOG_DEBUG" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="3" const="3" name="LOG_INFO" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="2" const="2" name="LOG_WARNING" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="1" const="1" name="LOG_ERROR" static="true"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor visibility="public" name="Logger"></dev:constructor>
			<dev:method visibility="public" type="void" final="true" name="diag" static="true">
				<dev:params>
					<dev:param type="java.lang.Object" comment="method caller (usually the &lt;strong&gt;this&lt;/strong&gt; member)" name="obj"></dev:param>
					<dev:param type="java.lang.String" comment="data to be displayed" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" final="true" name="diag" static="true">
				<dev:params>
					<dev:param type="java.lang.Class" comment="Class calling the method (usually the &lt;strong&gt;.class&lt;/strong&gt; member)" name="cls"></dev:param>
					<dev:param type="java.lang.String" comment="data to be displayed" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" final="true" name="diag" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="name of the class to prepend to log message" name="sClassName"></dev:param>
					<dev:param type="java.lang.String" comment="data to be displayed" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" final="true" name="error" static="true">
				<dev:params>
					<dev:param type="java.lang.Object" comment="method caller (usually the &lt;strong&gt;this&lt;/strong&gt; member)" name="obj"></dev:param>
					<dev:param type="java.lang.String" comment="data to be displayed" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" final="true" name="error" static="true">
				<dev:params>
					<dev:param type="java.lang.Class" comment="Class calling the method (usually the &lt;strong&gt;.class&lt;/strong&gt; member)" name="cls"></dev:param>
					<dev:param type="java.lang.String" comment="data to be displayed" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" final="true" name="error" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="name of the class to prepend to error message" name="sClassName"></dev:param>
					<dev:param type="java.lang.String" comment="data to be displayed" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="diag">
				<dev:params>
					<dev:param type="java.lang.String" comment="data to be displayed" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="error">
				<dev:params>
					<dev:param type="java.lang.String" comment="data to be displayed" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="debug">
				<dev:params>
					<dev:param type="java.lang.String" comment="str data to be displayed" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" final="true" name="enableDebug">
				<dev:params>
					<dev:param type="boolean" comment="true if debugging should be enable; false otherwise." name="bState"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if debugging is enabled; false otherwise." type="boolean" final="true" name="isDebugEnabled"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ClassName">
		<dev:methods>
			<dev:constructor visibility="public" name="ClassName"></dev:constructor>
			<dev:method visibility="public" returncomment="String containing only the Class name without the package details" type="java.lang.String" final="true" name="getClassName" static="true">
				<dev:params>
					<dev:param type="java.lang.Object" comment="Object whose name is to be retrieved" name="rStr"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="String containing only the Class name without the package details" type="java.lang.String" final="true" name="getClassName" static="true">
				<dev:params>
					<dev:param type="java.lang.Class" comment="Class whose name is to be retrieved" name="cls"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The last String in a dot separated string" type="java.lang.String" final="true" name="getClassName" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="dot delimited String containing the name to be retrieved" name="name"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ByteBuffer">
		<dev:methods>
			<dev:constructor visibility="public" name="ByteBuffer"></dev:constructor>
			<dev:constructor visibility="public" name="ByteBuffer">
				<dev:params>
					<dev:param type="int" comment="the initial value of the byte array" name="b"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="ByteBuffer">
				<dev:params>
					<dev:param type="byte[]" comment="a &lt;TT&gt;byte[]&lt;/TT&gt;." name="original"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="ByteBuffer">
				<dev:params>
					<dev:param type="byte[]" comment="array that is the source of bytes." name="value"></dev:param>
					<dev:param type="int" comment="the initial offset." name="offset"></dev:param>
					<dev:param type="int" comment="the length." name="size"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="ByteBuffer">
				<dev:params>
					<dev:param type="java.lang.String" comment="the initial value of the byte array" name="value"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="ByteBuffer">
				<dev:params>
					<dev:param type="char[]" comment="the initial value of the byte array" name="value"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" type="void" name="append">
				<dev:params>
					<dev:param type="int" comment="" name="b"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="append">
				<dev:params>
					<dev:param type="byte[]" comment="" name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="append">
				<dev:params>
					<dev:param type="byte[]" comment="" name="value"></dev:param>
					<dev:param type="int" comment="" name="offset"></dev:param>
					<dev:param type="int" comment="" name="size"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="append">
				<dev:params>
					<dev:param type="java.lang.String" comment="" name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="append">
				<dev:params>
					<dev:param type="char[]" comment="" name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="byte[]" name="toByteArray"></dev:method>
			<dev:method visibility="public" returncomment="" type="char[]" name="toCharArray"></dev:method>
			<dev:method visibility="public" returncomment="" type="byte" name="byteAt">
				<dev:params>
					<dev:param type="int" comment="" name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" name="UByteAt">
				<dev:params>
					<dev:param type="int" comment="" name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="char" name="charAt">
				<dev:params>
					<dev:param type="int" comment="" name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="String representation of a byte array" type="java.lang.String" name="toString"></dev:method>
			<dev:method visibility="public" returncomment="ASCII hex representation of a byte array" type="java.lang.String" name="toHex"></dev:method>
			<dev:method visibility="public" returncomment="the number of valid bytes in the byte array." type="int" name="length"></dev:method>
			<dev:method visibility="public" type="void" name="clear"></dev:method>
			<dev:method visibility="public" returncomment="the index of the first occurrence of the byte in the           byte sequence represented by this object, or           &lt;code&gt;-1&lt;/code&gt; if the byte does not occur." type="int" name="indexof">
				<dev:params>
					<dev:param type="int" comment="a byte." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" name="indexof">
				<dev:params>
					<dev:param type="int" comment="" name="value"></dev:param>
					<dev:param type="int" comment="" name="fromIndex"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" name="indexof">
				<dev:params>
					<dev:param type="byte[]" comment="" name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" name="indexof">
				<dev:params>
					<dev:param type="byte[]" comment="" name="value"></dev:param>
					<dev:param type="int" comment="" name="fromIndex"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" name="indexof">
				<dev:params>
					<dev:param type="char[]" comment="" name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" name="indexof">
				<dev:params>
					<dev:param type="char[]" comment="" name="value"></dev:param>
					<dev:param type="int" comment="" name="fromIndex"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="if the string argument occurs as a substring within this           object, then the index of the first character of the first           such substring is returned; if it does not occur as a           substring, &lt;code&gt;-1&lt;/code&gt; is returned." type="int" name="indexof">
				<dev:params>
					<dev:param type="java.lang.String" name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" name="indexof">
				<dev:params>
					<dev:param type="java.lang.String" comment="" name="value"></dev:param>
					<dev:param type="int" comment="" name="fromIndex"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if the character sequence represented by the argument is a prefix of the character sequence   represented by this byte buffer; false otherwise. Note also that true will be returned if the argument   is an empty string or is equal to this ByteBuffer object as determined by the equals(Object) method." type="boolean" name="startsWith">
				<dev:params>
					<dev:param type="java.lang.String" comment="the prefix" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if the character sequence represented by the argument is a suffix of the character sequence   represented by this object; false otherwise. Note that the result will be true if the argument is the   empty string or is equal to this ByteBuffer object as determined by the equals(Object) method." type="boolean" name="endsWith">
				<dev:params>
					<dev:param type="java.lang.String" comment="the suffix." name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="An empty byte buffer." type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ByteBuffer" name="delete"></dev:method>
			<dev:method visibility="public" returncomment="This byte buffer." type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ByteBuffer" name="delete">
				<dev:params>
					<dev:param type="int" comment="The number of characters to remove from beginning to &lt;code&gt;len&lt;/code&gt;." name="len"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="This byte buffer." type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ByteBuffer" name="delete">
				<dev:params>
					<dev:param type="int" comment="The beginning index, inclusive." name="start"></dev:param>
					<dev:param type="int" comment="The ending index, exclusive." name="end"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="This byte buffer." type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ByteBuffer" name="replace">
				<dev:params>
					<dev:param type="int" comment="The beginning index, inclusive." name="start"></dev:param>
					<dev:param type="int" comment="The ending index, exclusive." name="end"></dev:param>
					<dev:param type="byte[]" comment="Byte[] that will replace previous contents." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The new ByteBuffer." type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ByteBuffer" name="substring">
				<dev:params>
					<dev:param type="int" comment="The beginning index, inclusive." name="start"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The new ByteBuffer." type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ByteBuffer" name="substring">
				<dev:params>
					<dev:param type="int" comment="The beginning index, inclusive." name="start"></dev:param>
					<dev:param type="int" comment="The ending index, exclusive." name="end"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.Bits">
		<dev:methods>
			<dev:constructor visibility="public" name="Bits"></dev:constructor>
			<dev:method visibility="public" returncomment="" type="boolean" final="true" name="getBoolean" static="true">
				<dev:params>
					<dev:param type="byte[]" comment="" name="b"></dev:param>
					<dev:param type="int" comment="" name="off"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="char" final="true" name="getChar" static="true">
				<dev:params>
					<dev:param type="byte[]" comment="" name="b"></dev:param>
					<dev:param type="int" comment="" name="off"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="short" final="true" name="getShort" static="true">
				<dev:params>
					<dev:param type="byte[]" comment="" name="b"></dev:param>
					<dev:param type="int" comment="" name="off"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" final="true" name="getInt" static="true">
				<dev:params>
					<dev:param type="byte[]" comment="" name="b"></dev:param>
					<dev:param type="int" comment="" name="off"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="float" final="true" name="getFloat" static="true">
				<dev:params>
					<dev:param type="byte[]" comment="" name="b"></dev:param>
					<dev:param type="int" comment="" name="off"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="long" final="true" name="getLong" static="true">
				<dev:params>
					<dev:param type="byte[]" comment="" name="b"></dev:param>
					<dev:param type="int" comment="" name="off"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="double" final="true" name="getDouble" static="true">
				<dev:params>
					<dev:param type="byte[]" comment="" name="b"></dev:param>
					<dev:param type="int" comment="" name="off"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" final="true" name="putBoolean" static="true">
				<dev:params>
					<dev:param type="byte[]" comment="" name="b"></dev:param>
					<dev:param type="int" comment="" name="off"></dev:param>
					<dev:param type="boolean" comment="" name="val"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" final="true" name="putChar" static="true">
				<dev:params>
					<dev:param type="byte[]" comment="" name="b"></dev:param>
					<dev:param type="int" comment="" name="off"></dev:param>
					<dev:param type="char" comment="" name="val"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" final="true" name="putShort" static="true">
				<dev:params>
					<dev:param type="byte[]" comment="" name="b"></dev:param>
					<dev:param type="int" comment="" name="off"></dev:param>
					<dev:param type="short" comment="" name="val"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" final="true" name="putInt" static="true">
				<dev:params>
					<dev:param type="byte[]" comment="" name="b"></dev:param>
					<dev:param type="int" comment="" name="off"></dev:param>
					<dev:param type="int" comment="" name="val"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" final="true" name="putFloat" static="true">
				<dev:params>
					<dev:param type="byte[]" comment="" name="b"></dev:param>
					<dev:param type="int" comment="" name="off"></dev:param>
					<dev:param type="float" comment="" name="val"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" final="true" name="putLong" static="true">
				<dev:params>
					<dev:param type="byte[]" comment="" name="b"></dev:param>
					<dev:param type="int" comment="" name="off"></dev:param>
					<dev:param type="long" comment="" name="val"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" final="true" name="putDouble" static="true">
				<dev:params>
					<dev:param type="byte[]" comment="" name="b"></dev:param>
					<dev:param type="int" comment="" name="off"></dev:param>
					<dev:param type="double" comment="" name="val"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if the bit is set; false otherwise." type="boolean" final="true" name="isBitSet" static="true">
				<dev:params>
					<dev:param type="int" comment="8 bit value" name="value"></dev:param>
					<dev:param type="int" comment="0-7 (bytes 1-8 respectively)" name="pos"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.math.dr1_0_0.RangeUtil">
		<dev:methods>
			<dev:constructor visibility="public" name="RangeUtil"></dev:constructor>
			<dev:method visibility="public" returncomment="integer containing the newly calculated value which can be sent to a setter method directly" type="int" name="evaluateValue" static="true">
				<dev:params>
					<dev:param type="int" comment="is the value to be adjusted" name="value"></dev:param>
					<dev:param type="int" comment="is the currently evaluated step to be added to value" name="increment"></dev:param>
					<dev:param type="int" comment="is the minimum number that value can be set to" name="min"></dev:param>
					<dev:param type="int" comment="is the maximum number that value can be set to" name="max"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="boolean - result" type="boolean" name="fnRangeCheck" static="true">
				<dev:params>
					<dev:param type="int" comment="- int value in question" name="value"></dev:param>
					<dev:param type="int" comment="- int lower limit" name="lowerBound"></dev:param>
					<dev:param type="int" comment="- int upper limit" name="upperBound"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="boolean - result" type="boolean" name="rangeCheck" static="true">
				<dev:params>
					<dev:param type="int" comment="- int value in question" name="value"></dev:param>
					<dev:param type="int" comment="- int lower limit" name="lowerBound"></dev:param>
					<dev:param type="int" comment="- int upper limit" name="upperBound"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="integer value of the scaled value" type="int" name="fnScaleRange" static="true">
				<dev:params>
					<dev:param type="int" comment="is the value to be scaled" name="value"></dev:param>
					<dev:param type="int" comment="is the minimum value of the current scale that value is in" name="sourceMin"></dev:param>
					<dev:param type="int" comment="is the maximum value of the current scale that value is in" name="sourceMax"></dev:param>
					<dev:param type="int" comment="is the minimum value of the scale to which value should be converted to" name="targetMin"></dev:param>
					<dev:param type="int" comment="is the maximum value of the scale to which value should be converted to" name="targetMax"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="float value of the scaled value" type="float" name="fnScaleRange" static="true">
				<dev:params>
					<dev:param type="float" comment="is the value to be scaled" name="value"></dev:param>
					<dev:param type="float" comment="is the minimum value of the current scale that value is in" name="sourceMin"></dev:param>
					<dev:param type="float" comment="is the maximum value of the current scale that value is in" name="sourceMax"></dev:param>
					<dev:param type="float" comment="is the minimum value of the scale to which value should be converted to" name="targetMin"></dev:param>
					<dev:param type="float" comment="is the maximum value of the scale to which value should be converted to" name="targetMax"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="integer value of the scaled value" type="int" name="scaleRange" static="true">
				<dev:params>
					<dev:param type="int" comment="is the value to be scaled" name="value"></dev:param>
					<dev:param type="int" comment="is the minimum value of the current scale that value is in" name="sourceMin"></dev:param>
					<dev:param type="int" comment="is the maximum value of the current scale that value is in" name="sourceMax"></dev:param>
					<dev:param type="int" comment="is the minimum value of the scale to which value should be converted to" name="targetMin"></dev:param>
					<dev:param type="int" comment="is the maximum value of the scale to which value should be converted to" name="targetMax"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="float value of the scaled value" type="float" name="scaleRange" static="true">
				<dev:params>
					<dev:param type="float" comment="is the value to be scaled" name="value"></dev:param>
					<dev:param type="float" comment="is the minimum value of the current scale that value is in" name="sourceMin"></dev:param>
					<dev:param type="float" comment="is the maximum value of the current scale that value is in" name="sourceMax"></dev:param>
					<dev:param type="float" comment="is the minimum value of the scale to which value should be converted to" name="targetMin"></dev:param>
					<dev:param type="float" comment="is the maximum value of the scale to which value should be converted to" name="targetMax"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.math.dr1_0_0.Range">
		<dev:methods>
			<dev:constructor visibility="public" name="Range">
				<dev:params>
					<dev:param type="double" comment="The minimum value of the range." name="minValue"></dev:param>
					<dev:param type="double" comment="The maximum value of the range." name="maxValue"></dev:param>
					<dev:param type="double" comment="The increment between each discrete value of the range." name="increment"></dev:param>
					<dev:param type="double" comment="The current value of range." name="currentValue"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="Range">
				<dev:params>
					<dev:param type="double" comment="The minimum value of the range." name="minValue"></dev:param>
					<dev:param type="double" comment="The maximum value of the range." name="maxValue"></dev:param>
					<dev:param type="double" comment="The increment between each discrete value of the range." name="increment"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" returncomment="Returns the currentValue." type="double" name="getCurrentValue"></dev:method>
			<dev:method visibility="public" returncomment="Returns the _increment." type="double" name="getIncrement"></dev:method>
			<dev:method visibility="public" returncomment="Returns the maxValue." type="double" name="getMaxValue"></dev:method>
			<dev:method visibility="public" returncomment="Returns the minValue." type="double" name="getMinValue"></dev:method>
			<dev:method visibility="public" returncomment="The discrete position that most closely matches the currentValue." type="int" name="getPosition"></dev:method>
			<dev:method visibility="public" returncomment="The discrete position that most closely matches the value." type="int" name="getPosition">
				<dev:params>
					<dev:param type="double" comment="The value you want to evaluate the position of." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The value within this range that most closely matches the          position of the value within sourceRange." type="double" name="getScaledValue">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.math.dr1_0_0.Range" comment="The range you want to evaluate the discrete position of the             value." name="sourceRange"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The value of the position within the range." type="double" name="getValue">
				<dev:params>
					<dev:param type="int" comment="The discrete position of this range." name="step"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The value for this range adjusted by the offset." type="double" name="getValueForOffset">
				<dev:params>
					<dev:param type="int" comment="The number of discrete units to adjust." name="offset"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The number of discrete values within the range." type="int" name="numberOfSteps"></dev:method>
			<dev:method visibility="public" returncomment="The discrete position of this range that most closely matches the          value contained in the sourceRange." type="int" name="scale">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.math.dr1_0_0.Range" comment="The range you want to evaluate the discrete position of the             value." name="sourceRange"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setCurrentValue">
				<dev:params>
					<dev:param type="double" comment="The currentValue to set." name="value"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.math.dr1_0_0.LevelUtil">
		<dev:fields>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="0" const="0" name="MIN_LVL" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="255" const="255" name="MAX_LVL" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-255" const="-255" name="MIN_ADJUST" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="255" const="255" name="MAX_ADJUST" static="true"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor visibility="public" name="LevelUtil"></dev:constructor>
			<dev:method visibility="public" returncomment="" type="int" name="adjustLevel" static="true">
				<dev:params>
					<dev:param type="int" comment="" name="nLevel"></dev:param>
					<dev:param type="int" comment="" name="nOffset"></dev:param>
					<dev:param type="int" comment="" name="deviceMin"></dev:param>
					<dev:param type="int" comment="" name="deviceMax"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.duet.tools.bose.esp88.net.http.dr1_0_0.IHttpPostWrapper"></dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.net.http.dr1_0_0.HttpPostWrapper">
		<dev:fields>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="0" const="0" name="HTTP_POST_SUCCESS" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="1" const="1" name="INVALID_URL" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="2" const="2" name="HTTP_CONNECTION_FAILED" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="3" const="3" name="HTTP_OUTPUT_STREAM_FAILED" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="4" const="4" name="HTTP_INPUT_STREAM_FAILED" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="5" const="5" name="HTTP_CONNECTION_ALREADY_CONNECTED" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="6" const="6" name="HTTP_CONNECTION_GENERAL_EXCEPTION" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="7" const="7" name="HTTP_CONNECTION_DISPOSED" static="true"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor visibility="public" name="HttpPostWrapper">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.net.http.dr1_0_0.IHttpPostWrapper" name="caller"></dev:param>
					<dev:param type="long" name="handle"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" type="void" name="setRequestProperty">
				<dev:params>
					<dev:param type="java.lang.String" comment="" name="name"></dev:param>
					<dev:param type="java.lang.String" comment="" name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setRequestProperties">
				<dev:params>
					<dev:param type="java.util.Properties" comment="" name="props"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="java.lang.String" name="getRequestProperty">
				<dev:params>
					<dev:param type="java.lang.String" comment="" name="name"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="java.util.Properties" name="getRequestProperties"></dev:method>
			<dev:method visibility="public" type="void" name="doPost">
				<dev:params>
					<dev:param type="java.lang.String" comment="" name="url"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="dispose"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.duet.tools.bose.esp88.net.tcp.dr1_0_0.SocketConnectionListener"></dev:class>
	<dev:class superclass="java.lang.Thread" name="com.amx.duet.tools.bose.esp88.net.tcp.dr1_0_0.SocketConnection">
		<dev:fields>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="1" const="1" name="CONNECTED" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-1" const="-1" name="TIMEOUT" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-2" const="-2" name="CLOSED" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-3" const="-3" name="INVALID_HOST" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="-4" const="-4" name="FAILED_CONNECT" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="0" const="0" name="INFINITE" static="true"></dev:field>
			<dev:field visibility="public" fulltype="java.lang.String" type="String" final="true" name="className" static="true"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor visibility="public" name="SocketConnection">
				<dev:params>
					<dev:param type="java.net.InetAddress" comment="InetAddress object indicating the host to connect to" name="addr"></dev:param>
					<dev:param type="int" comment="integer port number to connect to" name="port"></dev:param>
					<dev:param type="int" comment="integer size of maximum receive buffer" name="bufferSize"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.net.tcp.dr1_0_0.SocketConnectionListener" comment="SocketReceiveHandler object that will be called when data is received on a      sockect or when an error occurs." name="listener"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="SocketConnection">
				<dev:params>
					<dev:param type="java.lang.String" comment="String name of host to connect to" name="host"></dev:param>
					<dev:param type="int" comment="port number to connect to" name="port"></dev:param>
					<dev:param type="int" comment="integer size of maximum receive buffer" name="bufferSize"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.net.tcp.dr1_0_0.SocketConnectionListener" comment="SocketReceiveHandler object that will be called when data is received on a       sockect or when an error occurs." name="listener"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="SocketConnection">
				<dev:params>
					<dev:param type="java.net.InetAddress" comment="host String name of host to connect to" name="addr"></dev:param>
					<dev:param type="int" comment="port number to connect to" name="port"></dev:param>
					<dev:param type="int" comment="integer size of maximum receive buffer" name="bufferSize"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.net.tcp.dr1_0_0.SocketConnectionListener" comment="SocketReceiveHandler object that will be called when data is received on a      sockect or when an error occurs." name="listener"></dev:param>
					<dev:param type="int" comment="number of milliseconds to wait for received data" name="timeout"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="SocketConnection">
				<dev:params>
					<dev:param type="java.lang.String" comment="String name of host to connect to" name="host"></dev:param>
					<dev:param type="int" comment="port number to connect to" name="port"></dev:param>
					<dev:param type="int" comment="integer size of maximum receive buffer" name="bufferSize"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.net.tcp.dr1_0_0.SocketConnectionListener" comment="SocketReceiveHandler object that will be called when data is received on a       sockect or when an error occurs." name="listener"></dev:param>
					<dev:param type="int" name="timeout"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" type="void" name="initConnection">
				<dev:params>
					<dev:param type="java.lang.String" name="addrStr"></dev:param>
					<dev:param type="int" name="port"></dev:param>
					<dev:param type="int" name="bufferSize"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.net.tcp.dr1_0_0.SocketConnectionListener" name="listener"></dev:param>
					<dev:param type="int" name="timeout"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;i&gt;true&lt;/i&gt; if successful set, &lt;i&gt;false&lt;/i&gt; if set failed due to invalid host." type="boolean" name="setAddressAndPort">
				<dev:params>
					<dev:param type="java.lang.String" comment="String containing the new host name to connect to." name="host"></dev:param>
					<dev:param type="int" comment="integer value containing the new port number to connect to." name="port"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment=",i&gt;true&lt;/i&gt; if set was successful, else &lt;i&gt;false&lt;/i&gt;" type="boolean" name="setAddressAndPort">
				<dev:params>
					<dev:param type="java.net.InetAddress" comment="&lt;b&gt;InetAddress&lt;/b&gt; object containing the new IP address" name="addr"></dev:param>
					<dev:param type="int" comment="integer value containing the new port." name="port"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setTimeout">
				<dev:params>
					<dev:param type="int" comment="" name="timeout"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if the connection was initiated, false if the address is invalid" type="boolean" name="connect"></dev:method>
			<dev:method visibility="public" type="void" name="disconnect"></dev:method>
			<dev:method visibility="public" type="boolean" name="isConnected"></dev:method>
			<dev:method visibility="public" type="void" name="dispose"></dev:method>
			<dev:method visibility="public" type="void" name="finalize"></dev:method>
			<dev:method visibility="public" returncomment="&lt;b&gt;true&lt;/b&gt; if write was successful, else &lt;b&gt;false&lt;/b&gt;" type="boolean" name="write">
				<dev:params>
					<dev:param type="byte[]" comment="byte array containing data to write" name="data"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;i&gt;true&lt;/i&gt; if write or queuing was successful, else &lt;i&gt;false&lt;/i&gt;" type="boolean" name="writeQueued">
				<dev:params>
					<dev:param type="byte[]" comment="byte array containing data to send." name="data"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="flushQueue">
				<dev:params>
					<dev:param type="boolean" comment="boolean flag indicating if the queued messages should be send (&lt;i&gt;true&lt;/i&gt;) or  discarded (&lt;i&gt;false&lt;/i&gt;)" name="send"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setOKtoSendTrue"></dev:method>
			<dev:method visibility="public" type="void" name="run"></dev:method>
			<dev:method visibility="public" type="void" name="setDebug">
				<dev:params>
					<dev:param type="boolean" comment="" name="bState"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setDebugState">
				<dev:params>
					<dev:param type="int" comment="" name="nState"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" name="getDebugState"></dev:method>
			<dev:method visibility="public" type="void" name="log">
				<dev:params>
					<dev:param type="int" comment="" name="level"></dev:param>
					<dev:param type="java.lang.String" comment="" name="msg"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.StringCharacterIterator">
		<dev:extends>
			<dev:extend name="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.CharacterIterator"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor visibility="public" name="StringCharacterIterator">
				<dev:params>
					<dev:param type="java.lang.String" comment="- encapsulated String" name="src"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" returncomment="a substring" type="java.lang.String" name="substring">
				<dev:params>
					<dev:param type="int" name="beginIndex"></dev:param>
					<dev:param type="int" name="endIndex"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a substring" type="java.lang.String" name="substring">
				<dev:params>
					<dev:param type="int" name="beginIndex"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a character at the specified position." type="char" name="charAt">
				<dev:params>
					<dev:param type="int" name="pos"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;tt&gt;true&lt;/tt&gt; iff if the specified index is after the end of the character stream" type="boolean" name="isEnd">
				<dev:params>
					<dev:param type="int" name="pos"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.StreamCharacterIterator">
		<dev:extends>
			<dev:extend name="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.CharacterIterator"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor visibility="public" name="StreamCharacterIterator">
				<dev:params>
					<dev:param type="java.io.InputStream" comment="an InputStream, which is parsed" name="is"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" returncomment="a substring" type="java.lang.String" name="substring">
				<dev:params>
					<dev:param type="int" name="beginIndex"></dev:param>
					<dev:param type="int" name="endIndex"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a substring" type="java.lang.String" name="substring">
				<dev:params>
					<dev:param type="int" name="beginIndex"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a character at the specified position." type="char" name="charAt">
				<dev:params>
					<dev:param type="int" name="pos"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;tt&gt;true&lt;/tt&gt; iff if the specified index is after the end of the character stream" type="boolean" name="isEnd">
				<dev:params>
					<dev:param type="int" name="pos"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.REUtil">
		<dev:methods>
			<dev:constructor visibility="public" name="REUtil"></dev:constructor>
			<dev:method visibility="public" returncomment="The regular expression object" type="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.RE" name="createRE" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="The expression, beginning with a prefix if it&apos;s complex or   having no prefix if it&apos;s simple" name="expression"></dev:param>
					<dev:param type="int" comment="Matching style flags" name="matchFlags"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The regular expression object" type="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.RE" name="createRE" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="The expression, beginning with a prefix if it&apos;s complex or   having no prefix if it&apos;s simple" name="expression"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.RuntimeException" serializable="true" name="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.RESyntaxException"></dev:class>
	<dev:class superclass="java.lang.Object" serializable="true" name="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.REProgram">
		<dev:extends>
			<dev:extend name="java.io.Serializable"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor visibility="public" name="REProgram">
				<dev:params>
					<dev:param type="char[]" comment="Character array with RE opcode instructions in it" name="instruction"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="REProgram">
				<dev:params>
					<dev:param type="int" comment="Count of parens in the program" name="parens"></dev:param>
					<dev:param type="char[]" comment="Character array with RE opcode instructions in it" name="instruction"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="REProgram">
				<dev:params>
					<dev:param type="char[]" comment="Character array with RE opcode instructions in it" name="instruction"></dev:param>
					<dev:param type="int" comment="Amount of instruction array in use" name="lenInstruction"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" returncomment="A copy of the current compiled RE program" type="char[]" name="getInstructions"></dev:method>
			<dev:method visibility="public" type="void" name="setInstructions">
				<dev:params>
					<dev:param type="char[]" comment="Program instruction buffer" name="instruction"></dev:param>
					<dev:param type="int" comment="Length of instruction buffer in use" name="lenInstruction"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A copy of the prefix of current compiled RE program" type="char[]" name="getPrefix"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.RECompiler" name="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.REDebugCompiler">
		<dev:methods>
			<dev:constructor visibility="public" name="REDebugCompiler"></dev:constructor>
			<dev:method visibility="public" type="void" name="dumpProgram">
				<dev:params>
					<dev:param type="java.io.PrintWriter" comment="PrintWriter for program dump output" name="p"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="dumpProgram"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.RECompiler">
		<dev:methods>
			<dev:constructor visibility="public" name="RECompiler"></dev:constructor>
			<dev:method visibility="public" returncomment="A compiled regular expression program." type="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.REProgram" name="compile">
				<dev:params>
					<dev:param type="java.lang.String" comment="Regular expression pattern to compile (see RECompiler class  for details)." name="pattern"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.recompile">
		<dev:methods>
			<dev:constructor visibility="public" name="recompile"></dev:constructor>
			<dev:method visibility="public" type="void" name="main" static="true">
				<dev:params>
					<dev:param type="java.lang.String[]" comment="Command line arguments" name="arg"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.ReaderCharacterIterator">
		<dev:extends>
			<dev:extend name="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.CharacterIterator"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor visibility="public" name="ReaderCharacterIterator">
				<dev:params>
					<dev:param type="java.io.Reader" comment="a Reader, which is parsed" name="reader"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" returncomment="a substring" type="java.lang.String" name="substring">
				<dev:params>
					<dev:param type="int" name="beginIndex"></dev:param>
					<dev:param type="int" name="endIndex"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a substring" type="java.lang.String" name="substring">
				<dev:params>
					<dev:param type="int" name="beginIndex"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a character at the specified position." type="char" name="charAt">
				<dev:params>
					<dev:param type="int" name="pos"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;tt&gt;true&lt;/tt&gt; iff if the specified index is after the end of the character stream" type="boolean" name="isEnd">
				<dev:params>
					<dev:param type="int" name="pos"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" serializable="true" name="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.RE">
		<dev:extends>
			<dev:extend name="java.io.Serializable"></dev:extend>
		</dev:extends>
		<dev:fields>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="0" const="0" name="MATCH_NORMAL" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="1" const="1" name="MATCH_CASEINDEPENDENT" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="2" const="2" name="MATCH_MULTILINE" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="4" const="4" name="MATCH_SINGLELINE" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="0" const="0" name="REPLACE_ALL" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="1" const="1" name="REPLACE_FIRSTONLY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="2" const="2" name="REPLACE_BACKREFERENCES" static="true"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor visibility="public" name="RE">
				<dev:params>
					<dev:param type="java.lang.String" comment="The regular expression pattern to compile." name="pattern"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="RE">
				<dev:params>
					<dev:param type="java.lang.String" comment="The regular expression pattern to compile." name="pattern"></dev:param>
					<dev:param type="int" comment="The matching style" name="matchFlags"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="RE">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.REProgram" comment="Compiled regular expression program (see RECompiler and/or recompile)" name="program"></dev:param>
					<dev:param type="int" comment="One or more of the RE match behaviour flags (RE.MATCH_*):   &lt;pre&gt;    MATCH_NORMAL              // Normal (case-sensitive) matching    MATCH_CASEINDEPENDENT     // Case folded comparisons    MATCH_MULTILINE           // Newline matches as BOL/EOL  &lt;/pre&gt;" name="matchFlags"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="RE">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.REProgram" comment="Compiled regular expression program" name="program"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="RE"></dev:constructor>
			<dev:method visibility="public" returncomment="The full regular expression" type="java.lang.String" name="simplePatternToFullRegularExpression" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="The pattern to convert" name="pattern"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setMatchFlags">
				<dev:params>
					<dev:param type="int" comment="One or more of the RE match behaviour flags (RE.MATCH_*):   &lt;pre&gt;    MATCH_NORMAL              // Normal (case-sensitive) matching    MATCH_CASEINDEPENDENT     // Case folded comparisons    MATCH_MULTILINE           // Newline matches as BOL/EOL  &lt;/pre&gt;" name="matchFlags"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="Current match behaviour flags (RE.MATCH_*).   &lt;pre&gt;    MATCH_NORMAL              // Normal (case-sensitive) matching    MATCH_CASEINDEPENDENT     // Case folded comparisons    MATCH_MULTILINE           // Newline matches as BOL/EOL  &lt;/pre&gt;" type="int" name="getMatchFlags"></dev:method>
			<dev:method visibility="public" type="void" name="setProgram">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.REProgram" comment="Regular expression program compiled by RECompiler." name="program"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="Regular expression program" type="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.REProgram" name="getProgram"></dev:method>
			<dev:method visibility="public" returncomment="Number of available parenthesized subexpressions" type="int" name="getParenCount"></dev:method>
			<dev:method visibility="public" returncomment="String" type="java.lang.String" name="getParen">
				<dev:params>
					<dev:param type="int" comment="Nesting level of subexpression" name="which"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="String index" type="int" final="true" name="getParenStart">
				<dev:params>
					<dev:param type="int" comment="Nesting level of subexpression" name="which"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="String index" type="int" final="true" name="getParenEnd">
				<dev:params>
					<dev:param type="int" comment="Nesting level of subexpression" name="which"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="Number of characters in the parenthesized subexpression" type="int" final="true" name="getParenLength">
				<dev:params>
					<dev:param type="int" comment="Nesting level of subexpression" name="which"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="True if string matched" type="boolean" name="match">
				<dev:params>
					<dev:param type="java.lang.String" comment="String to match against" name="search"></dev:param>
					<dev:param type="int" comment="Index to start searching at" name="i"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="True if string matched" type="boolean" name="match">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.CharacterIterator" comment="String to match against" name="search"></dev:param>
					<dev:param type="int" comment="Index to start searching at" name="i"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="True if string matched" type="boolean" name="match">
				<dev:params>
					<dev:param type="java.lang.String" comment="String to match against" name="search"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="Array of strings" type="java.lang.String[]" name="split">
				<dev:params>
					<dev:param type="java.lang.String" comment="String to split on this regular exression" name="s"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The string substituteIn with zero or more occurrences of the current  regular expression replaced with the substitution String (if this regular  expression object doesn&apos;t match at any position, the original String is returned  unchanged)." type="java.lang.String" name="subst">
				<dev:params>
					<dev:param type="java.lang.String" comment="String to substitute within" name="substituteIn"></dev:param>
					<dev:param type="java.lang.String" comment="String to substitute for all matches of this regular expression." name="substitution"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The string substituteIn with zero or more occurrences of the current  regular expression replaced with the substitution String (if this regular  expression object doesn&apos;t match at any position, the original String is returned  unchanged)." type="java.lang.String" name="subst">
				<dev:params>
					<dev:param type="java.lang.String" comment="String to substitute within" name="substituteIn"></dev:param>
					<dev:param type="java.lang.String" comment="String to substitute for matches of this regular expression" name="substitution"></dev:param>
					<dev:param type="int" comment="One or more bitwise flags from REPLACE_*.  If the REPLACE_FIRSTONLY  flag bit is set, only the first occurrence of this regular expression is replaced.  If the bit is not set (REPLACE_ALL), all occurrences of this pattern will be  replaced. If the flag REPLACE_BACKREFERENCES is set, all backreferences will  be processed." name="flags"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="Array of Strings whose toString() value matches this regular expression." type="java.lang.String[]" name="grep">
				<dev:params>
					<dev:param type="java.lang.Object[]" comment="Array of Objects to search" name="search"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.CharacterIterator"></dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.CharacterArrayCharacterIterator">
		<dev:extends>
			<dev:extend name="com.amx.duet.tools.bose.esp88.regexp.dr1_0_0.CharacterIterator"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor visibility="public" name="CharacterArrayCharacterIterator">
				<dev:params>
					<dev:param type="char[]" comment="- encapsulated String" name="src"></dev:param>
					<dev:param type="int" name="off"></dev:param>
					<dev:param type="int" name="len"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" returncomment="a substring" type="java.lang.String" name="substring">
				<dev:params>
					<dev:param type="int" name="beginIndex"></dev:param>
					<dev:param type="int" name="endIndex"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a substring" type="java.lang.String" name="substring">
				<dev:params>
					<dev:param type="int" name="beginIndex"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a character at the specified position." type="char" name="charAt">
				<dev:params>
					<dev:param type="int" name="pos"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;tt&gt;true&lt;/tt&gt; iff if the specified index is after the end of the character stream" type="boolean" name="isEnd">
				<dev:params>
					<dev:param type="int" name="pos"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringUtil">
		<dev:methods>
			<dev:constructor visibility="public" name="StringUtil"></dev:constructor>
			<dev:method visibility="public" returncomment="an array of strings" type="java.lang.String[]" final="true" name="parse" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="data string to be parsed" name="data"></dev:param>
					<dev:param type="java.lang.String" comment="string delimiter to parse the data by" name="delim"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="the newly replaced string" type="java.lang.String" final="true" name="ReplaceString" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="String to be manipulated" name="str"></dev:param>
					<dev:param type="java.lang.String" comment="Pattern to remove from source string" name="pattern"></dev:param>
					<dev:param type="java.lang.String" comment="Pattern to replace removed pattern with" name="replace"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="String that no longer contains pattern" type="java.lang.String" final="true" name="RemoveStringAll" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="String to be manipulated" name="str"></dev:param>
					<dev:param type="java.lang.String" comment="Pattern to remove from source string" name="pattern"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="String that no longer contains pattern" type="java.lang.String" final="true" name="RemoveString" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="Source string to be manipulated" name="str"></dev:param>
					<dev:param type="java.lang.String" comment="Pattern to remove from source string" name="pattern"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="String that no longer contains pattern" type="java.lang.String" final="true" name="RemoveString" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="Must be of type &lt;STRONG&gt;String&lt;/STRONG&gt;. ObjectRef containing the source string data   to be manipulated (value is passed by reference).&lt;P&gt;    Create rStr with a &lt;STRONG&gt;valueOf(String)&lt;/STRONG&gt; Example: &lt;br&gt;  &lt;code&gt;ObjectRef rStr = new ObjectRef(&quot;&quot;) or rStr.valueOf(&quot;&quot;)&lt;/code&gt;" name="rStr"></dev:param>
					<dev:param type="java.lang.String" comment="Pattern to remove from source string" name="pattern"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="String that no longer contains pattern" type="java.lang.String" final="true" name="RemoveString" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="Source string to be manipulated" name="str"></dev:param>
					<dev:param type="java.lang.String" comment="Pattern to remove from source string" name="pattern"></dev:param>
					<dev:param type="int" comment="offset value" name="start"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="String that no longer contains pattern" type="java.lang.String" final="true" name="RemoveString" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="Must be of type &lt;STRONG&gt;String&lt;/STRONG&gt;. ObjectRef containing the source string data   to be manipulated (value is passed by reference).&lt;P&gt;    Create rStr with a &lt;STRONG&gt;valueOf(String)&lt;/STRONG&gt; Example: &lt;br&gt;  &lt;code&gt;ObjectRef rStr = new ObjectRef(&quot;&quot;) or rStr.valueOf(&quot;&quot;)&lt;/code&gt;" name="rStr"></dev:param>
					<dev:param type="java.lang.String" comment="Pattern to remove from source string" name="pattern"></dev:param>
					<dev:param type="int" comment="offset value" name="start"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="String that contains all of the characters that were removed from the string" type="java.lang.String" final="true" name="RemoveString" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="Must be of type &lt;STRONG&gt;String&lt;/STRONG&gt;. ObjectRef containing the source string data   to be manipulated (value is passed by reference).&lt;P&gt;    Create rStr with a &lt;STRONG&gt;valueOf(String)&lt;/STRONG&gt; Example: &lt;br&gt;  &lt;code&gt;ObjectRef rStr = new ObjectRef(&quot;&quot;) or rStr.valueOf(&quot;&quot;)&lt;/code&gt;" name="rStr"></dev:param>
					<dev:param type="int" comment="the number of characters to remove" name="count"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="Only the character that were not removed from the string" type="java.lang.String" final="true" name="RemoveString" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="Source string to be manipulated" name="str"></dev:param>
					<dev:param type="int" comment="the number of characters to remove" name="count"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="new byte array containg the copied bytes" type="byte[]" final="true" name="writeBytes" static="true">
				<dev:params>
					<dev:param type="byte[]" comment="source byte array containing all of the data" name="b"></dev:param>
					<dev:param type="int" comment="offset value to start copying source array from" name="off"></dev:param>
					<dev:param type="int" comment="number of bytes to copy after offset" name="len"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="ASCII hex representation of a byte array" type="java.lang.String" final="true" name="toAsciiHexString" static="true">
				<dev:params>
					<dev:param type="byte[]" name="bArr"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="String that contains all of the characters that were removed from the string" type="java.lang.String" final="true" name="GetBufferString" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" name="rbuffer"></dev:param>
					<dev:param type="int" comment="the number of characters to be retrieved and then shifted" name="count"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The character that was removed from the string." type="char" final="true" name="GetBufferChar" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" name="rbuffer"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A String containing a copy of the first count characters from the string." type="java.lang.String" final="true" name="LeftString" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="the string from which to extract the characters." name="str"></dev:param>
					<dev:param type="int" comment="the number of character to copy from the beginning of the string." name="count"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A String containing a copy of the last count characters from the string." type="java.lang.String" final="true" name="RightString" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="the string from which to extract the characters." name="str"></dev:param>
					<dev:param type="int" comment="the number of character to copy from the end of the string." name="count"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A String containing a copy of the specified characters from the string." type="java.lang.String" final="true" name="MidString" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="the string from which to extract the characters." name="str"></dev:param>
					<dev:param type="int" comment="the starting location in the string." name="start"></dev:param>
					<dev:param type="int" comment="the number of characters to extract." name="count"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="An integer representing the character location of pattern in the string. If the character   sequence is found at the beginning of the string, this method returns 0. Any error condition   returns -1." type="int" final="true" name="FindString" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="the string of characters to search." name="str"></dev:param>
					<dev:param type="java.lang.String" comment="the sequence of characters to search for" name="pattern"></dev:param>
					<dev:param type="int" comment="the starting character position for the search" name="start"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt">
		<dev:methods>
			<dev:constructor visibility="public" name="StringBufferExt"></dev:constructor>
			<dev:constructor visibility="public" name="StringBufferExt">
				<dev:params>
					<dev:param type="int" comment="the initial capacity." name="capacity"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="StringBufferExt">
				<dev:params>
					<dev:param type="java.lang.String" comment="the initial contents of the buffer." name="str"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" returncomment="the length of the sequence of characters currently            represented by this string buffer." type="int" name="length"></dev:method>
			<dev:method visibility="public" returncomment="the current capacity of this string buffer." type="int" name="capacity"></dev:method>
			<dev:method visibility="public" type="void" name="ensureCapacity">
				<dev:params>
					<dev:param type="int" comment="the minimum desired capacity." name="minimumCapacity"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setLength">
				<dev:params>
					<dev:param type="int" comment="the new length of the buffer." name="newLength"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="the character at the specified index of this string buffer." type="char" name="charAt">
				<dev:params>
					<dev:param type="int" comment="the index of the desired character." name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="getChars">
				<dev:params>
					<dev:param type="int" comment="start copying at this offset in the string buffer." name="srcBegin"></dev:param>
					<dev:param type="int" comment="stop copying at this offset in the string buffer." name="srcEnd"></dev:param>
					<dev:param type="char[]" comment="the array to copy the data into." name="dst"></dev:param>
					<dev:param type="int" comment="offset into &lt;code&gt;dst&lt;/code&gt;." name="dstBegin"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setCharAt">
				<dev:params>
					<dev:param type="int" comment="the index of the character to modify." name="index"></dev:param>
					<dev:param type="char" comment="the new character." name="ch"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="set">
				<dev:params>
					<dev:param type="java.lang.Object" comment="an &lt;code&gt;Object&lt;/code&gt;." name="obj"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt;." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="set">
				<dev:params>
					<dev:param type="java.lang.String" comment="a string." name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="set">
				<dev:params>
					<dev:param type="java.lang.StringBuffer" comment="the &lt;tt&gt;StringBuffer&lt;/tt&gt; to set." name="sb"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="set">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" comment="the &lt;tt&gt;StringBufferExt&lt;/tt&gt; to set." name="sb"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="set">
				<dev:params>
					<dev:param type="char[]" comment="the characters to set." name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="set">
				<dev:params>
					<dev:param type="char[]" comment="the characters to be added." name="str"></dev:param>
					<dev:param type="int" comment="the index of the first character to set." name="offset"></dev:param>
					<dev:param type="int" comment="the number of characters to set." name="len"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt;." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="set">
				<dev:params>
					<dev:param type="boolean" comment="a &lt;code&gt;boolean&lt;/code&gt;." name="b"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="set">
				<dev:params>
					<dev:param type="char" comment="a &lt;code&gt;char&lt;/code&gt;." name="c"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="set">
				<dev:params>
					<dev:param type="int" comment="an &lt;code&gt;int&lt;/code&gt;." name="i"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a referenct to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="set">
				<dev:params>
					<dev:param type="long" comment="a &lt;code&gt;long&lt;/code&gt;." name="l"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="set">
				<dev:params>
					<dev:param type="float" comment="a &lt;code&gt;float&lt;/code&gt;." name="f"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="set">
				<dev:params>
					<dev:param type="double" comment="a &lt;code&gt;double&lt;/code&gt;." name="d"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="append">
				<dev:params>
					<dev:param type="java.lang.Object" comment="an &lt;code&gt;Object&lt;/code&gt;." name="obj"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt;." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="append">
				<dev:params>
					<dev:param type="java.lang.String" comment="a string." name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="append">
				<dev:params>
					<dev:param type="java.lang.StringBuffer" comment="the &lt;tt&gt;StringBuffer&lt;/tt&gt; to append." name="sb"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="append">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" comment="the &lt;tt&gt;StringBufferExt &lt;/tt&gt; to append." name="sb"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="append">
				<dev:params>
					<dev:param type="char[]" comment="the characters to be appended." name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="append">
				<dev:params>
					<dev:param type="char[]" comment="the characters to be appended." name="str"></dev:param>
					<dev:param type="int" comment="the index of the first character to append." name="offset"></dev:param>
					<dev:param type="int" comment="the number of characters to append." name="len"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt;." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="append">
				<dev:params>
					<dev:param type="boolean" comment="a &lt;code&gt;boolean&lt;/code&gt;." name="b"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="append">
				<dev:params>
					<dev:param type="char" comment="a &lt;code&gt;char&lt;/code&gt;." name="c"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="append">
				<dev:params>
					<dev:param type="int" comment="an &lt;code&gt;int&lt;/code&gt;." name="i"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a referenct to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="append">
				<dev:params>
					<dev:param type="long" comment="a &lt;code&gt;long&lt;/code&gt;." name="l"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="append">
				<dev:params>
					<dev:param type="float" comment="a &lt;code&gt;float&lt;/code&gt;." name="f"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="append">
				<dev:params>
					<dev:param type="double" comment="a &lt;code&gt;double&lt;/code&gt;." name="d"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="An empty string buffer." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="delete"></dev:method>
			<dev:method visibility="public" returncomment="This string buffer." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="delete">
				<dev:params>
					<dev:param type="int" comment="The number of characters to remove from beginning to &lt;code&gt;len&lt;/code&gt;." name="len"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="This string buffer." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="delete">
				<dev:params>
					<dev:param type="int" comment="The beginning index, inclusive." name="start"></dev:param>
					<dev:param type="int" comment="The ending index, exclusive." name="end"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="This string buffer." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="deleteCharAt">
				<dev:params>
					<dev:param type="int" comment="Index of character to remove" name="index"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="This string buffer." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="replace">
				<dev:params>
					<dev:param type="int" comment="The beginning index, inclusive." name="start"></dev:param>
					<dev:param type="int" comment="The ending index, exclusive." name="end"></dev:param>
					<dev:param type="java.lang.String" comment="String that will replace previous contents." name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The new string." type="java.lang.String" name="substring">
				<dev:params>
					<dev:param type="int" comment="The beginning index, inclusive." name="start"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The new string." type="java.lang.String" name="substring">
				<dev:params>
					<dev:param type="int" comment="The beginning index, inclusive." name="start"></dev:param>
					<dev:param type="int" comment="The ending index, exclusive." name="end"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="This string buffer." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="insert">
				<dev:params>
					<dev:param type="int" comment="position at which to insert subarray." name="index"></dev:param>
					<dev:param type="char[]" comment="A character array." name="str"></dev:param>
					<dev:param type="int" comment="the index of the first character in subarray to      to be inserted." name="offset"></dev:param>
					<dev:param type="int" comment="the number of characters in the subarray to      to be inserted." name="len"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="insert">
				<dev:params>
					<dev:param type="int" comment="the offset." name="offset"></dev:param>
					<dev:param type="java.lang.Object" comment="an &lt;code&gt;Object&lt;/code&gt;." name="obj"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="insert">
				<dev:params>
					<dev:param type="int" comment="the offset." name="offset"></dev:param>
					<dev:param type="java.lang.String" comment="a string." name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="insert">
				<dev:params>
					<dev:param type="int" comment="the offset." name="offset"></dev:param>
					<dev:param type="char[]" comment="a character array." name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="insert">
				<dev:params>
					<dev:param type="int" comment="the offset." name="offset"></dev:param>
					<dev:param type="boolean" comment="a &lt;code&gt;boolean&lt;/code&gt;." name="b"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="insert">
				<dev:params>
					<dev:param type="int" comment="the offset." name="offset"></dev:param>
					<dev:param type="char" comment="a &lt;code&gt;char&lt;/code&gt;." name="c"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="insert">
				<dev:params>
					<dev:param type="int" comment="the offset." name="offset"></dev:param>
					<dev:param type="int" comment="an &lt;code&gt;int&lt;/code&gt;." name="i"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="insert">
				<dev:params>
					<dev:param type="int" comment="the offset." name="offset"></dev:param>
					<dev:param type="long" comment="a &lt;code&gt;long&lt;/code&gt;." name="l"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="insert">
				<dev:params>
					<dev:param type="int" comment="the offset." name="offset"></dev:param>
					<dev:param type="float" comment="a &lt;code&gt;float&lt;/code&gt;." name="f"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="insert">
				<dev:params>
					<dev:param type="int" comment="the offset." name="offset"></dev:param>
					<dev:param type="double" comment="a &lt;code&gt;double&lt;/code&gt;." name="d"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="the index of the first occurrence of the character in the           character sequence represented by this object, or           &lt;code&gt;-1&lt;/code&gt; if the character does not occur." type="int" name="indexOf">
				<dev:params>
					<dev:param type="int" comment="a character." name="ch"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="the index of the first occurrence of the character in the           character sequence represented by this object that is greater           than or equal to &lt;code&gt;fromIndex&lt;/code&gt;, or &lt;code&gt;-1&lt;/code&gt;           if the character does not occur." type="int" name="indexOf">
				<dev:params>
					<dev:param type="int" comment="a character." name="ch"></dev:param>
					<dev:param type="int" comment="the index to start the search from." name="fromIndex"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="the index of the last occurrence of the character in the           character sequence represented by this object, or           &lt;code&gt;-1&lt;/code&gt; if the character does not occur." type="int" name="lastIndexOf">
				<dev:params>
					<dev:param type="int" comment="a character." name="ch"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="the index of the last occurrence of the character in the           character sequence represented by this object that is less           than or equal to &lt;code&gt;fromIndex&lt;/code&gt;, or &lt;code&gt;-1&lt;/code&gt;           if the character does not occur before that point." type="int" name="lastIndexOf">
				<dev:params>
					<dev:param type="int" comment="a character." name="ch"></dev:param>
					<dev:param type="int" comment="the index to start the search from. There is no            restriction on the value of &lt;code&gt;fromIndex&lt;/code&gt;. If it is            greater than or equal to the length of this string, it has            the same effect as if it were equal to one less than the            length of this string: this entire string may be searched.            If it is negative, it has the same effect as if it were -1:            -1 is returned." name="fromIndex"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="if the string argument occurs as a substring within this           object, then the index of the first character of the first           such substring is returned; if it does not occur as a           substring, &lt;code&gt;-1&lt;/code&gt; is returned." type="int" name="indexOf">
				<dev:params>
					<dev:param type="java.lang.String" comment="any string." name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="If the string argument occurs as a substring within this           object at a starting index no smaller than           &lt;code&gt;fromIndex&lt;/code&gt;, then the index of the first character           of the first such substring is returned. If it does not occur           as a substring starting at &lt;code&gt;fromIndex&lt;/code&gt; or beyond,           &lt;code&gt;-1&lt;/code&gt; is returned." type="int" name="indexOf">
				<dev:params>
					<dev:param type="java.lang.String" comment="the substring to search for." name="str"></dev:param>
					<dev:param type="int" comment="the index to start the search from." name="fromIndex"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="if the string argument occurs one or more times as a substring           within this object, then the index of the first character of           the last such substring is returned. If it does not occur as           a substring, &lt;code&gt;-1&lt;/code&gt; is returned." type="int" name="lastIndexOf">
				<dev:params>
					<dev:param type="java.lang.String" comment="the substring to search for." name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="If the string argument occurs one or more times as a substring           within this object at a starting index no greater than           &lt;code&gt;fromIndex&lt;/code&gt;, then the index of the first character of           the last such substring is returned. If it does not occur as a           substring starting at &lt;code&gt;fromIndex&lt;/code&gt; or earlier,           &lt;code&gt;-1&lt;/code&gt; is returned." type="int" name="lastIndexOf">
				<dev:params>
					<dev:param type="java.lang.String" comment="the substring to search for." name="str"></dev:param>
					<dev:param type="int" comment="the index to start the search from. There is no            restriction on the value of fromIndex. If it is greater than            the length of this string buffer, it has the same effect as if it            were equal to the length of this string buffer: this entire string            buffer may be searched. If it is negative, it has the same effect            as if it were -1: -1 is returned." name="fromIndex"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if the character sequence represented by the argument is a prefix of the character sequence   represented by this string buffer; false otherwise. Note also that true will be returned if the argument   is an empty string or is equal to this StringBufferExt object as determined by the equals(Object) method." type="boolean" name="startsWith">
				<dev:params>
					<dev:param type="java.lang.String" comment="the prefix" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if the character sequence represented by the argument is a suffix of the character sequence   represented by this object; false otherwise. Note that the result will be true if the argument is the   empty string or is equal to this StringBufferExt object as determined by the equals(Object) method." type="boolean" name="endsWith">
				<dev:params>
					<dev:param type="java.lang.String" comment="the suffix." name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a reference to this &lt;codeStringBuffer&lt;/code&gt; object.." type="com.amx.duet.tools.bose.esp88.text.dr1_0_0.StringBufferExt" name="reverse"></dev:method>
			<dev:method visibility="public" returncomment="the StringBuffer representation of this object." type="java.lang.StringBuffer" name="toStringBuffer"></dev:method>
			<dev:method visibility="public" returncomment="a string representation of the string buffer." type="java.lang.String" name="toString"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.text.dr1_0_0.NumericUtil">
		<dev:methods>
			<dev:constructor visibility="public" name="NumericUtil"></dev:constructor>
			<dev:method visibility="public" returncomment="true if this a numeric value; false otherwise." type="boolean" final="true" name="isNumeric" static="true">
				<dev:params>
					<dev:param type="char" comment="character value to check." name="cValue"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if this is a numeric string; false otherwise." type="boolean" final="true" name="isNumeric" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="String value to check." name="sValue"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="int value contained in the string" type="int" name="ATOI" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="- String containing an int value" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="float value contained in the string" type="float" name="ATOF" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="- String containing a float value" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A 32-bit integer representing the converted string. Any non-numeric   characters in the string are ignored. &lt;code&gt;atoi&lt;/code&gt; returns the value representing   the first complete set of characters that represent an integer. Valid characters   are &quot;0&quot; through &quot;9&quot; as well as a prepended &quot;-&quot; representing a negative sign. If   invalid characters are found, zero is returned as a result." type="int" final="true" name="atoi" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="String containing the character representation of the integer" name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A 64-bit long representing the converted string. Any non-numeric   characters in the string are ignored. &lt;code&gt;atol&lt;/code&gt; returns the value representing   the first complete set of characters that represent a long. Valid characters   are &quot;0&quot; through &quot;9&quot; as well as a prepended &quot;-&quot; representing a negative sign.   If invalid characters are found, zero is returned as a result." type="long" final="true" name="atol" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="String containing the character representation of the long" name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A 32-bit floating point number representing the converted string. Any non-numeric   characters in the string are ignored. &lt;code&gt;atof&lt;/code&gt; returns the value representing the first   complete set of characters that represents a floating point value. Valid characters are   &quot;0&quot; through &quot;9&quot; and &quot;.&quot; along with the sign designators (&quot;+&quot; and &quot;-&quot;) and the exponent   (&quot;e&quot; or &quot;E&quot;). If invalid characters are found, zero is returned as a result." type="float" final="true" name="atof" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="String containing the character representation of the floating point number." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A 64-bit floating point number representing the converted string. Any non-numeric   characters in the string are ignored. &lt;code&gt;atod&lt;/code&gt; returns the value representing the first   complete set of characters that represents a floating point value. Valid characters are   &quot;0&quot; through &quot;9&quot; and &quot;.&quot; along with the sign designators (&quot;+&quot; and &quot;-&quot;) and the exponent   (&quot;e&quot; or &quot;E&quot;). If invalid characters are found, zero is returned as a result." type="double" final="true" name="atod" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="String containing the character representation of the floating point number." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A boolean value (either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;) representing the   converted string. &lt;code&gt;atob&lt;/code&gt; returns the value representing the first complete set  of characters that represent a boolean like value. Valid &lt;STRONG&gt;true&lt;/STRONG&gt; characters are  &quot;1&quot; or &quot;true&quot; (case sensitive). Everything else is considered &lt;STRONG&gt;false&lt;/STRONG&gt;." type="boolean" final="true" name="atob" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="String containing the character representation of the boolean value." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A character string that contains the representation of the specified integer." type="java.lang.String" final="true" name="itoa" static="true">
				<dev:params>
					<dev:param type="int" comment="a 32-bit integer to convert to a string." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A character string that contains the representation of the specified long." type="java.lang.String" final="true" name="ltoa" static="true">
				<dev:params>
					<dev:param type="long" comment="a 64-bit long to convert to a string." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A character string that contains the representation of the specified floating   point number. The character representation will use exponents if necessary." type="java.lang.String" final="true" name="ftoa" static="true">
				<dev:params>
					<dev:param type="float" comment="a 32-bit floating-point number to convert to a string." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A character string that contains the representation of the specified double   value. The character representation will use exponents if necessary." type="java.lang.String" final="true" name="dtoa" static="true">
				<dev:params>
					<dev:param type="double" comment="a 64-bit floating-point number to convert to a string." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A character string that contains the representation of the specified boolean. If   value is &lt;STRONG&gt;true&lt;/STRONG&gt;, a &quot;1&quot; will be returned. Otherwise, &quot;0&quot; will be returned." type="java.lang.String" final="true" name="btoa" static="true">
				<dev:params>
					<dev:param type="boolean" comment="a boolean to convert to a string." name="value"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.text.dr1_0_0.HexUtil">
		<dev:methods>
			<dev:constructor visibility="public" name="HexUtil"></dev:constructor>
			<dev:method visibility="public" returncomment="An integer representing the converted string. Any non-hexadecimal characters in the   string are ignored. hextoi returns a value representing the first complete set of characters that   represents an integer. Valid characters are &quot;0&quot; through &quot;9&quot;, &quot;A&quot; through &quot;F&quot; and &quot;a&quot; through &quot;f&quot;.   If no valid characters are found, zero is returned as a result." type="int" final="true" name="hextoi" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="hex"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="A character string that contains the hexadecimal representation of the specified integer." type="java.lang.String" final="true" name="itohex" static="true">
				<dev:params>
					<dev:param type="int" comment="integer to be converted to a hexadecimal string." name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="integer" type="int" name="HEXTOI" static="true">
				<dev:params>
					<dev:param type="byte" comment="[0x30..0x39,0x41..0x46]" name="cZa"></dev:param>
					<dev:param type="byte" comment="[0x30..0x39,0x41..0x46]" name="cZb"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="integer" type="int" name="HEXTOI" static="true">
				<dev:params>
					<dev:param type="char" comment="[&apos;0&apos;..&apos;9&apos;,&apos;A&apos;..&apos;F&apos;]" name="cZa"></dev:param>
					<dev:param type="char" comment="[&apos;0&apos;..&apos;9&apos;,&apos;A&apos;..&apos;F&apos;]" name="cZb"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="char" type="char" name="HEXTOA" static="true">
				<dev:params>
					<dev:param type="byte" comment="" name="cZa"></dev:param>
					<dev:param type="byte" comment="" name="cZb"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="com.amx.duet.util.Timer" name="com.amx.duet.tools.bose.esp88.util.dr1_0_0.WaitTimer">
		<dev:methods>
			<dev:constructor visibility="public" name="WaitTimer">
				<dev:params>
					<dev:param type="com.amx.duet.util.TimerListener" comment="a &lt;i&gt;TimerListener&lt;/i&gt; object that will handle timeout events" name="listener"></dev:param>
					<dev:param type="long" comment="length of timeout in milliseconds" name="timeout"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="WaitTimer">
				<dev:params>
					<dev:param type="com.amx.duet.util.TimerListener" comment="a &lt;i&gt;TimerListener&lt;/i&gt; object that will handle timer events" name="listener"></dev:param>
					<dev:param type="long" comment="length of timeout in milliseconds" name="timeout"></dev:param>
					<dev:param type="int" comment="number of times the timer should repeat.  0 indicates no repeat, &lt;i&gt;Timer.INFINITE&lt;/i&gt;  indicates the Timer should repeat until cancelled. For example, a repeat value of 1 will cause the   timer to trigger twice." name="repeat"></dev:param>
					<dev:param type="java.lang.Object" comment="an Object instance that is retained by the Timer object." name="argument"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" returncomment="int value containing the timer ID." type="int" name="getTimerID"></dev:method>
			<dev:method visibility="public" type="void" name="cancel"></dev:method>
			<dev:method visibility="public" returncomment="status indicating if the timer was started" type="boolean" name="start"></dev:method>
			<dev:method visibility="public" returncomment="status indicating if the timer was started" type="boolean" name="isStarted"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.util.dr1_0_0.TimeDateUtil">
		<dev:fields>
			<dev:field visibility="public" fulltype="java.lang.String" type="String" final="true" constexpr="&quot;hh:mm:ss&quot;" const="hh:mm:ss" name="TIME_FORMAT" static="true"></dev:field>
			<dev:field visibility="public" fulltype="java.lang.String" type="String" final="true" constexpr="&quot;MM/dd/yyyy&quot;" const="MM/dd/yyyy" name="DATE_FORMAT" static="true"></dev:field>
			<dev:field visibility="public" fulltype="java.lang.String" type="String" final="true" constexpr="&quot;hh:mm:ss MM/dd/yyyy&quot;" const="hh:mm:ss MM/dd/yyyy" name="TIME_DATE_FORMAT" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="20" const="20" name="TDL_DATE_LEN" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="10" const="10" name="TDL_TIME_LEN" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="1" const="1" name="TDL_SUNDAY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="2" const="2" name="TDL_MONDAY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="3" const="3" name="TDL_TUESDAY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="4" const="4" name="TDL_WEDNESDAY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="5" const="5" name="TDL_THURSDAY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="6" const="6" name="TDL_FRIDAY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="7" const="7" name="TDL_SATURDAY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="60" const="60" name="TDL_SECONDS_PER_MINUTE" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="60" const="60" name="TDL_MINUTES_PER_HOUR" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="24" const="24" name="TDL_HOURS_PER_DAY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="3600" const="3600" name="TDL_SECONDS_PER_HOUR" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="1440" const="1440" name="TDL_MINUTES_PER_DAY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="86400" const="86400" name="TDL_SECONDS_PER_DAY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="12" const="12" name="TDL_MONTHS_PER_YEAR" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="365" const="365" name="TDL_DAYS_PER_YEAR" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="1000" const="1000" name="ONE_SECOND" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="60000" const="60000" name="ONE_MINUTE" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="3600000" const="3600000" name="ONE_HOUR" static="true"></dev:field>
			<dev:field visibility="public" fulltype="long" type="long" final="true" constexpr="86400000l" const="86400000" name="ONE_DAY" static="true"></dev:field>
			<dev:field visibility="public" fulltype="long" type="long" final="true" constexpr="604800000l" const="604800000" name="ONE_WEEK" static="true"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor visibility="public" name="TimeDateUtil"></dev:constructor>
			<dev:method visibility="public" returncomment="a long value containing the converted time." type="long" final="true" name="nanoTime" static="true"></dev:method>
			<dev:method visibility="public" returncomment="The long name of a Day (ie. Wednesday)" type="java.lang.String" final="true" name="LongDayName" static="true">
				<dev:params>
					<dev:param type="java.util.Date" comment="a Date object" name="date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The short name of a Day (ie. Wed)" type="java.lang.String" final="true" name="ShortDayName" static="true">
				<dev:params>
					<dev:param type="java.util.Date" comment="a Date object" name="date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The long name of a Month (ie. January)" type="java.lang.String" final="true" name="LongMonthName" static="true">
				<dev:params>
					<dev:param type="java.util.Date" comment="a Date object" name="date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="The short name of a Month (ie. Jan)" type="java.lang.String" final="true" name="ShortMonthName" static="true">
				<dev:params>
					<dev:param type="java.util.Date" comment="a Date object" name="date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String" final="true" name="GetFormalDateDay" static="true">
				<dev:params>
					<dev:param type="long" name="lDay"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String" final="true" name="GetFormalDayOffset" static="true">
				<dev:params>
					<dev:param type="long" name="lOffset"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String" final="true" name="GetFormalDate" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="sDate"></dev:param>
					<dev:param type="boolean" name="bUKDate"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="int" final="true" name="DaysPerMonth" static="true">
				<dev:params>
					<dev:param type="long" name="lMonth"></dev:param>
					<dev:param type="long" name="lYear"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String" final="true" name="TimeSerial" static="true">
				<dev:params>
					<dev:param type="long" name="lHour"></dev:param>
					<dev:param type="long" name="lMin"></dev:param>
					<dev:param type="long" name="lSec"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String" final="true" name="DateSerial" static="true">
				<dev:params>
					<dev:param type="long" name="lMonth"></dev:param>
					<dev:param type="long" name="lDay"></dev:param>
					<dev:param type="long" name="lYear"></dev:param>
					<dev:param type="int" name="nYrLen"></dev:param>
					<dev:param type="boolean" name="bUKDate"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String" final="true" name="LocalizedDate" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="sDate"></dev:param>
					<dev:param type="boolean" name="bUKDate"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String" final="true" name="TimeAdd" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="sTime"></dev:param>
					<dev:param type="long" name="lSec"></dev:param>
					<dev:param type="long" name="lMin"></dev:param>
					<dev:param type="long" name="lHour"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String" final="true" name="TimeDiff" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="sTime1"></dev:param>
					<dev:param type="java.lang.String" name="sTime2"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" name="rlSec"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" name="rlMin"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" name="rlHour"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" name="rbOneLtTwo"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="int" final="true" name="DateDiff" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="sDate1"></dev:param>
					<dev:param type="java.lang.String" name="sDate2"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" name="rDay"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" name="rMonth"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" name="rYear"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String" final="true" name="DateAdd" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="sDate"></dev:param>
					<dev:param type="long" name="lDay"></dev:param>
					<dev:param type="long" name="lMonth"></dev:param>
					<dev:param type="long" name="lYear"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="int" final="true" name="DateCompare" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="sDate1"></dev:param>
					<dev:param type="java.lang.String" name="sDate2"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String" final="true" name="AmPmTime" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="sTime"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String" final="true" name="ShortAmPmTime" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="sTime"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String" final="true" name="LocalizedTime" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="sTime"></dev:param>
					<dev:param type="boolean" name="bMilitary"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String" final="true" name="ShortLocalizedTime" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="sTime"></dev:param>
					<dev:param type="boolean" name="bMilitary"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String" final="true" name="CalcFloatingDate" static="true">
				<dev:params>
					<dev:param type="int" name="nDayOfMonthOffset"></dev:param>
					<dev:param type="int" name="nDayOfMonthDay"></dev:param>
					<dev:param type="int" name="nMonth"></dev:param>
					<dev:param type="int" name="nYear"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="java.util.Date" final="true" name="StringToDate" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="" name="str"></dev:param>
					<dev:param type="java.lang.String" comment="" name="pattern"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="java.lang.String" final="true" name="DateToString" static="true">
				<dev:params>
					<dev:param type="java.util.Date" comment="" name="date"></dev:param>
					<dev:param type="java.lang.String" comment="" name="pattern"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="java.util.Date" final="true" name="DateStringToDate" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="" name="sDate"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="java.util.Date" final="true" name="TimeStringToDate" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="" name="sTime"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="java.lang.String" final="true" name="DateToStringDate" static="true">
				<dev:params>
					<dev:param type="java.util.Date" comment="" name="date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="java.lang.String" final="true" name="DateToStringTime" static="true">
				<dev:params>
					<dev:param type="java.util.Date" comment="" name="date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="java.lang.String" final="true" name="FormatDate" static="true">
				<dev:params>
					<dev:param type="int" comment="" name="nMonth"></dev:param>
					<dev:param type="int" comment="" name="nDay"></dev:param>
					<dev:param type="int" comment="" name="nYear"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String" final="true" name="FormatDate" static="true">
				<dev:params>
					<dev:param type="int" name="nMonth"></dev:param>
					<dev:param type="int" name="nDay"></dev:param>
					<dev:param type="int" name="nYear"></dev:param>
					<dev:param type="java.lang.String" name="sPattern"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="java.lang.String" final="true" name="FormatTime" static="true">
				<dev:params>
					<dev:param type="int" comment="" name="nHour"></dev:param>
					<dev:param type="int" comment="" name="nMin"></dev:param>
					<dev:param type="int" comment="" name="nSec"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="long" final="true" name="TimeToSecond" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="sTime"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="long" final="true" name="TimeToMinute" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="sTime"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="long" final="true" name="TimeToHour" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="sTime"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="long" final="true" name="DateToDay" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="sDate"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="long" final="true" name="DateToMonth" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="sDate"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="long" final="true" name="DateToYear" static="true">
				<dev:params>
					<dev:param type="java.lang.String" name="sDate"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String" final="true" name="CurrentDate" static="true"></dev:method>
			<dev:method visibility="public" type="java.lang.String" final="true" name="CurrentTime" static="true"></dev:method>
			<dev:method visibility="public" returncomment="a &lt;TT&gt;long&lt;/TT&gt; value containing the time difference based on the field   modifier passed in" type="long" final="true" name="TimeDateDiff" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="must be in either (MM/DD/YYYY) date format or (hh:mm:ss) time format" name="sTimeDate1"></dev:param>
					<dev:param type="java.lang.String" comment="must be in either (MM/DD/YYYY) date format or (hh:mm:ss) time format" name="sTimeDate2"></dev:param>
					<dev:param type="int" comment="&lt;TT&gt;Calendar&lt;/TT&gt; field modifier (ie Calendar.YEAR, Calendar.HOUR)" name="nTimeField"></dev:param>
					<dev:param type="com.amx.duet.tools.bose.esp88.lang.dr1_0_0.ObjectRef" comment="must be a boolean type return value" name="rbOneLtTwo"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="adjusted time in milliseconds" type="long" final="true" name="getNextTimeout" static="true">
				<dev:params>
					<dev:param type="long" comment="number of milliseconds" name="timeout"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true is the time is expired; false otherwise" type="boolean" final="true" name="isTimeExpired" static="true">
				<dev:params>
					<dev:param type="long" comment="time in milliseconds" name="timeout"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.util.dr1_0_0.Reg">
		<dev:methods>
			<dev:constructor visibility="public" name="Reg"></dev:constructor>
			<dev:constructor visibility="public" name="Reg">
				<dev:params>
					<dev:param type="java.lang.String" comment="" name="appkey"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" type="void" name="setAppKey">
				<dev:params>
					<dev:param type="java.lang.String" comment="String specifying the key path" name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="java.lang.String" name="getAppKey"></dev:method>
			<dev:method visibility="public" returncomment="SUCCESS, NO_CURRENT_KEY, INVALID_KEY, FAILURE" type="int" name="setCurrentKey">
				<dev:params>
					<dev:param type="java.lang.String" comment="a String object containing the desired key path" name="key"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="key a String object containing the current key path" type="java.lang.String" name="getCurrentKey"></dev:method>
			<dev:method visibility="public" returncomment="true if the key was successfully writen to; false otherwise" type="boolean" name="writeKey">
				<dev:params>
					<dev:param type="java.lang.String" comment="a String object containing the name to set" name="regKey"></dev:param>
					<dev:param type="java.lang.String" comment="a String object containing the value to set" name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a String object containing the requested value." type="java.lang.String" name="readKey">
				<dev:params>
					<dev:param type="java.lang.String" comment="a String containing the name of the value to retrieve" name="regKey"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if the key was successfully deleted; false otherwise" type="boolean" name="removeKey">
				<dev:params>
					<dev:param type="java.lang.String" comment="a String object containing the key path" name="regKey"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setDebug">
				<dev:params>
					<dev:param type="boolean" comment="" name="bState"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="setDebugState">
				<dev:params>
					<dev:param type="int" comment="" name="nState"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" name="getDebugState"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.util.dr1_0_0.Pulser">
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor visibility="public" name="Pulser">
				<dev:params>
					<dev:param type="int" comment="" name="nTime"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method visibility="public" type="void" name="setPulseTime">
				<dev:params>
					<dev:param type="int" comment="&lt;TT&gt;int&lt;/TT&gt;" name="nTime"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="&lt;TT&gt;int&lt;/TT&gt;" type="int" name="getPulseTime"></dev:method>
			<dev:method visibility="public" type="void" name="pulse">
				<dev:params>
					<dev:param type="com.amx.duet.da.NetLinxDevice" comment="&lt;code&gt;NetLinxDevice&lt;/code&gt;" name="dev"></dev:param>
					<dev:param type="int" comment="&lt;TT&gt;int&lt;/TT&gt;" name="nChannel"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.util.dr1_0_0.NetLinxUtil">
		<dev:fields>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="32768" const="32768" name="FIRST_VIRTUAL_DEVICE" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="2" const="2" name="FIRST_LOCAL_PORT" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="0" const="0" name="TIMELINE_ONCE" static="true"></dev:field>
			<dev:field visibility="public" fulltype="int" type="int" final="true" constexpr="1" const="1" name="TIMELINE_REPEAT" static="true"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor visibility="public" name="NetLinxUtil"></dev:constructor>
			<dev:method visibility="public" returncomment="" type="int" final="true" name="SendLevel" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.da.NetLinxDevice" comment="" name="nlDev"></dev:param>
					<dev:param type="int" comment="" name="nLevel"></dev:param>
					<dev:param type="int" comment="" name="nValue"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" final="true" name="SendLevel" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.da.NetLinxDevice" comment="" name="nlDev"></dev:param>
					<dev:param type="int" comment="" name="nLevel"></dev:param>
					<dev:param type="float" comment="" name="fValue"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" final="true" name="SendString" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.da.NetLinxDevice" comment="" name="nlDev"></dev:param>
					<dev:param type="java.lang.String" comment="" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" final="true" name="SendCommand" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.da.NetLinxDevice" comment="" name="nlDev"></dev:param>
					<dev:param type="java.lang.String" comment="" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" final="true" name="Push" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.da.NetLinxDevice" comment="" name="nlDev"></dev:param>
					<dev:param type="int" comment="" name="nChan"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" final="true" name="Release" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.da.NetLinxDevice" comment="" name="nlDev"></dev:param>
					<dev:param type="int" comment="" name="nChan"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" final="true" name="On" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.da.NetLinxDevice" comment="" name="nlDev"></dev:param>
					<dev:param type="int" comment="" name="nChan"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" final="true" name="Off" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.da.NetLinxDevice" comment="" name="nlDev"></dev:param>
					<dev:param type="int" comment="" name="nChan"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" final="true" name="Pulse" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.da.NetLinxDevice" comment="" name="nlDev"></dev:param>
					<dev:param type="int" comment="" name="nChan"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" final="true" name="setPulseTime" static="true">
				<dev:params>
					<dev:param type="int" comment="" name="nTime"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="" type="int" final="true" name="getPulseTime" static="true"></dev:method>
			<dev:method visibility="public" type="void" final="true" name="CancelWait" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.util.dr1_0_0.WaitTimer" comment="WaitTimer to be cancelled." name="timer"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if the timer was able to start" type="boolean" final="true" name="Wait" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.util.dr1_0_0.WaitTimer" comment="WaitTimer object" name="timer"></dev:param>
					<dev:param type="int" comment="period of time to reset the timer to" name="nTimeOut"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="true if the timer was able to start" type="boolean" final="true" name="Wait" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.tools.bose.esp88.util.dr1_0_0.WaitTimer" comment="WaitTimer object" name="timer"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="An integer &amp;gt= 0 and &amp;lt number" type="int" final="true" name="RandomNumber" static="true">
				<dev:params>
					<dev:param type="int" comment="integer (must be greater than zero) that will serve as   the upper limit for the random number generator." name="number"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="the lower value" type="long" final="true" name="MinValue" static="true">
				<dev:params>
					<dev:param type="long" comment="variable that must be a long or casted to a long" name="lvar1"></dev:param>
					<dev:param type="long" comment="variable that must be a long or casted to a long" name="lvar2"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="the higher variable." type="long" final="true" name="MaxValue" static="true">
				<dev:params>
					<dev:param type="long" comment="variable that must be a long or casted to a long" name="lvar1"></dev:param>
					<dev:param type="long" comment="variable that must be a long or casted to a long" name="lvar2"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="com.amx.duet.da.NetLinxDevice" name="com.amx.duet.tools.bose.esp88.util.dr1_0_0.LoopBackDevice">
		<dev:methods>
			<dev:constructor visibility="public" name="LoopBackDevice">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="" name="dps"></dev:param>
					<dev:param type="boolean" comment="" name="virtualDevice"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor visibility="public" name="LoopBackDevice"></dev:constructor>
			<dev:method visibility="public" type="void" name="addButtonListener">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.IButtonListener" name="buttonListener"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="addChannelListener">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.IChannelListener" name="channelListener"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="addCustomListener">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.ICustomListener" name="customListener"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="addDataListener">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.IDataListener" name="dataListener"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="addLevelListener">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.ILevelListener" name="levelListener"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="notifyOffline"></dev:method>
			<dev:method visibility="public" type="void" name="notifyOnline"></dev:method>
			<dev:method visibility="public" type="void" name="off">
				<dev:params>
					<dev:param type="int" name="channelId"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="offInputChannel">
				<dev:params>
					<dev:param type="int" name="channelId"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="on">
				<dev:params>
					<dev:param type="int" name="channelId"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="onInputChannel">
				<dev:params>
					<dev:param type="int" name="channelId"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendCommand">
				<dev:params>
					<dev:param type="byte[]" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendCommand">
				<dev:params>
					<dev:param type="char[]" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendCommand">
				<dev:params>
					<dev:param type="java.lang.String" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendCommandWide">
				<dev:params>
					<dev:param type="java.lang.String" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendCustom">
				<dev:params>
					<dev:param type="int" name="id"></dev:param>
					<dev:param type="int" name="eventType"></dev:param>
					<dev:param type="int" name="flag"></dev:param>
					<dev:param type="int" name="value1"></dev:param>
					<dev:param type="int" name="value2"></dev:param>
					<dev:param type="int" name="value3"></dev:param>
					<dev:param type="byte[]" name="eventData"></dev:param>
					<dev:param type="byte[]" name="encode"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendCustom">
				<dev:params>
					<dev:param type="int" name="id"></dev:param>
					<dev:param type="int" name="eventType"></dev:param>
					<dev:param type="int" name="flag"></dev:param>
					<dev:param type="int" name="value1"></dev:param>
					<dev:param type="int" name="value2"></dev:param>
					<dev:param type="int" name="value3"></dev:param>
					<dev:param type="char[]" name="eventData"></dev:param>
					<dev:param type="byte[]" name="encode"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendCustom">
				<dev:params>
					<dev:param type="int" name="id"></dev:param>
					<dev:param type="int" name="eventType"></dev:param>
					<dev:param type="int" name="flag"></dev:param>
					<dev:param type="int" name="value1"></dev:param>
					<dev:param type="int" name="value2"></dev:param>
					<dev:param type="int" name="value3"></dev:param>
					<dev:param type="java.lang.String" name="eventData"></dev:param>
					<dev:param type="byte[]" name="encode"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendCustomWide">
				<dev:params>
					<dev:param type="int" name="id"></dev:param>
					<dev:param type="int" name="eventType"></dev:param>
					<dev:param type="int" name="flag"></dev:param>
					<dev:param type="int" name="value1"></dev:param>
					<dev:param type="int" name="value2"></dev:param>
					<dev:param type="int" name="value3"></dev:param>
					<dev:param type="java.lang.String" name="eventData"></dev:param>
					<dev:param type="byte[]" name="encode"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendLevel">
				<dev:params>
					<dev:param type="int" name="levelId"></dev:param>
					<dev:param type="com.amx.duet.core.master.netlinx.Level" name="l"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendString">
				<dev:params>
					<dev:param type="byte[]" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendString">
				<dev:params>
					<dev:param type="char[]" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendString">
				<dev:params>
					<dev:param type="java.lang.String" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" type="void" name="sendStringWide">
				<dev:params>
					<dev:param type="java.lang.String" name="str"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.util.dr1_0_0.EventPacker">
		<dev:methods>
			<dev:constructor visibility="public" name="EventPacker"></dev:constructor>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packError" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="int" comment="Error value to be reported" name="error"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packOnline" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packOffline" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packOff" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="int" comment="is the index of the channel (1 based)" name="channelId"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packOffInputChannel" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="int" comment="is the index of the channel (1 based)" name="channelId"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packOn" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="int" comment="is the index of the channel (1 based)" name="channelId"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packOnInputChannel" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="int" comment="is the index of the channel (1 based)" name="channelId"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packSendCommand" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="byte[]" comment="is a string containing the command data" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packSendCommand" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="char[]" comment="is a string containing the command data" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packSendCommand" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="java.lang.String" comment="is a string containing the command data" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packSendCommandWide" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="java.lang.String" comment="is a string containing the command data" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packSendCustom" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="int" comment="" name="id"></dev:param>
					<dev:param type="int" comment="" name="eventType"></dev:param>
					<dev:param type="int" comment="" name="flag"></dev:param>
					<dev:param type="int" comment="" name="value1"></dev:param>
					<dev:param type="int" comment="" name="value2"></dev:param>
					<dev:param type="int" comment="" name="value3"></dev:param>
					<dev:param type="byte[]" comment="a string containing the custom event data" name="eventData"></dev:param>
					<dev:param type="byte[]" comment="" name="encode"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packSendCustom" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="int" comment="" name="id"></dev:param>
					<dev:param type="int" comment="" name="eventType"></dev:param>
					<dev:param type="int" comment="" name="flag"></dev:param>
					<dev:param type="int" comment="" name="value1"></dev:param>
					<dev:param type="int" comment="" name="value2"></dev:param>
					<dev:param type="int" comment="" name="value3"></dev:param>
					<dev:param type="char[]" comment="a string containing the custom event data" name="eventData"></dev:param>
					<dev:param type="byte[]" comment="" name="encode"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packSendCustom" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="int" comment="" name="id"></dev:param>
					<dev:param type="int" comment="" name="eventType"></dev:param>
					<dev:param type="int" comment="" name="flag"></dev:param>
					<dev:param type="int" comment="" name="value1"></dev:param>
					<dev:param type="int" comment="" name="value2"></dev:param>
					<dev:param type="int" comment="" name="value3"></dev:param>
					<dev:param type="java.lang.String" comment="a string containing the custom event data" name="eventData"></dev:param>
					<dev:param type="byte[]" comment="" name="encode"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packSendCustomWide" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="int" comment="" name="id"></dev:param>
					<dev:param type="int" comment="" name="eventType"></dev:param>
					<dev:param type="int" comment="" name="flag"></dev:param>
					<dev:param type="int" comment="" name="value1"></dev:param>
					<dev:param type="int" comment="" name="value2"></dev:param>
					<dev:param type="int" comment="" name="value3"></dev:param>
					<dev:param type="java.lang.String" comment="a string containing the custom event data" name="eventData"></dev:param>
					<dev:param type="byte[]" comment="" name="encode"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packSendLevel" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="int" comment="a one based integer representing the level to send" name="levelId"></dev:param>
					<dev:param type="com.amx.duet.core.master.netlinx.Level" comment="a Level object containing the level value to send" name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packSendLevel" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="int" comment="a one based integer representing the level to send" name="levelId"></dev:param>
					<dev:param type="int" comment="int level value to send" name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packSendLevel" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="int" comment="a one based integer representing the level to send" name="levelId"></dev:param>
					<dev:param type="float" comment="int level value to send" name="value"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packSendString" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="byte[]" comment="is a string buffer containing the string data" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packSendString" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="char[]" comment="is a string buffer containing the string data" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packSendString" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="java.lang.String" comment="is a string buffer containing the string data" name="str"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="an Event object containing all necessary event information." type="com.amx.duet.core.master.netlinx.Event" final="true" name="packSendStringWide" static="true">
				<dev:params>
					<dev:param type="com.amx.duet.core.master.netlinx.DPS" comment="a DPS object representing the D:P:S of an IcspNetLinxDevice" name="dps"></dev:param>
					<dev:param type="java.lang.String" comment="is a string buffer containing the string data" name="str"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class superclass="java.lang.Object" name="com.amx.duet.tools.bose.esp88.util.dr1_0_0.DuetUtil">
		<dev:methods>
			<dev:constructor visibility="public" name="DuetUtil"></dev:constructor>
			<dev:method visibility="public" returncomment="String converted from a byte or character array" type="java.lang.String" final="true" name="eventValToStr" static="true">
				<dev:params>
					<dev:param type="java.lang.Object" comment="Class object that called this method" name="caller"></dev:param>
					<dev:param type="com.amx.duet.core.master.netlinx.Event" comment="Duet &lt;code&gt;Event&lt;/code&gt; object containing the data" name="evt"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a &lt;code&gt;NetLinxDevice&lt;/code&gt; with the vitual flag set to true" type="com.amx.duet.da.NetLinxDevice" final="true" name="createVirtualDevice" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="String containing a DPS value (ie &quot;0:1:0&quot;)" name="vdStr"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method visibility="public" returncomment="a newly created &lt;code&gt;LoopBackDevice&lt;/code&gt;" type="com.amx.duet.tools.bose.esp88.util.dr1_0_0.LoopBackDevice" final="true" name="createLoopBackDevice" static="true">
				<dev:params>
					<dev:param type="java.lang.String" comment="String containing a DPS value (ie &quot;0:1:0&quot;)" name="vdStr"></dev:param>
					<dev:param type="boolean" comment="boolean value used to register the device as virtual or physical" name="bVirtual"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	</dev:type-info>
	&components;
</dev:module>