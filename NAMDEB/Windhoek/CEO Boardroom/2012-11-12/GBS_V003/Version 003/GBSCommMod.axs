MODULE_NAME='GBSCommMod' (DEV vTX_COMMS_DEVICE_ARRAY[], INTEGER vTX_COMMS_DEVICE_ID_ARRAY[], INTEGER TOTAL_NODE_COUNT, DEV TX_COMMS_DEVICE, DEV RX_COMMS_DEVICE, CHAR GBS_TX_IP_ADDRESS[], INTEGER GBS_IP_PORT, INTEGER LIGHTING_LEVELS[][], INTEGER SWITCH_STATES[][], INTEGER MODULE_VERSION, INTEGER DEBUG, INTEGER INDIVIDUAL_DEBUGS[])

#DEFINE PV_DIAGNOSTICS

(***********************************************************)
(* System Type : NetLinx                                   *)
(***********************************************************)
(* REV HISTORY:                                            *)
(***********************************************************)

(***********************************************************)
(*          DEVICE NUMBER DEFINITIONS GO BELOW             *)
(***********************************************************)
DEFINE_DEVICE

(***********************************************************)
(*               CONSTANT DEFINITIONS GO BELOW             *)
(***********************************************************)
DEFINE_CONSTANT

(*                  DO NOT CHANGE                          *)
GB_BUFFER_SIZE                      = 255
GB_CIRCULAR_BUFFER_SIZE             = 400
GB_vPACK_INITIALISED					 			= 250
GB_DTR_CHANNEL			 								= 252
IP 																	= 1
RS232 															= 2
(*               END OF DO NOT CHANGE                      *)

(***********************************************************)
(*              DATA TYPE DEFINITIONS GO BELOW             *)
(***********************************************************)
DEFINE_TYPE

(***********************************************************)
(*               VARIABLE DEFINITIONS GO BELOW             *)
(***********************************************************)
DEFINE_VARIABLE

VOLATILE CHAR 	 	DIMMER_LEVEL;
VOLATILE SLONG   	hFILE;
VOLATILE CHAR			DATA_FILENAME[100];

VOLATILE INTEGER 	MEDIUM;
VOLATILE INTEGER 	GB_WRONG_STRING_SENT_COUNT;
VOLATILE INTEGER 	GB_WRONG_STRING_COMMAND_COUNT;
VOLATILE INTEGER 	GB_SEND_COUNT;
VOLATILE INTEGER 	GB_OLD_SEND_COUNT;
VOLATILE INTEGER 	DUPLICATE_RECORDS;
VOLATILE INTEGER 	GB_DTR;
VOLATILE INTEGER 	GB_ITR;

VOLATILE INTEGER 	GB_TYPE;
VOLATILE INTEGER 	GB_FINISHED;
VOLATILE INTEGER 	GB_IN_POINTER;
VOLATILE INTEGER 	GB_OUT_POINTER;
VOLATILE INTEGER 	GB_OUT_POINTER_MEMORY;
VOLATILE INTEGER 	GB_WATCH_DOG;
VOLATILE INTEGER 	GB_SPONT_DETECTED;
VOLATILE INTEGER 	GB_PROCESS_SPONT_FBACK;
VOLATILE INTEGER 	GB_PROCESSED_SPONT_FBACK;
VOLATILE INTEGER 	GB_STORE_GET_VALUE;
VOLATILE INTEGER 	GB_MAX_PERIOD;
VOLATILE INTEGER 	GB_VALID_FEEDBACK;
VOLATILE INTEGER 	GB_LINKED_STATE[GB_CIRCULAR_BUFFER_SIZE];
VOLATILE INTEGER 	GB_FEEDBACK_FLAG[GB_CIRCULAR_BUFFER_SIZE];

VOLATILE INTEGER 	GB_USED_LAST_PIECE_OF_BUFFER;
VOLATILE INTEGER 	GB_CODE_SEND_WINDOW;
VOLATILE INTEGER 	GB_OFFLINE_COUNT;
VOLATILE INTEGER 	GB_TX_ONLINE;
VOLATILE INTEGER 	GB_RX_ONLINE;
VOLATILE INTEGER 	GB_NUMBER_OF_COMMS_RETRIES;
VOLATILE INTEGER 	GB_NUMBER_OF_COMMS_FAILURES;
VOLATILE INTEGER 	GB_CIRCULAR_POINTER;
VOLATILE INTEGER 	GB_BUFFER_OVERFLOW_COUNT;
VOLATILE INTEGER 	GB_TEMP_ZONE_NUMBER;

VOLATILE CHAR    	GB_BUFFER[10000];
VOLATILE CHAR		 	GB_CONVERTED_COMMAND[GB_BUFFER_SIZE];
VOLATILE CHAR    	GB_BUFFER_MODIFIED[GB_BUFFER_SIZE];
VOLATILE CHAR    	GB_LAST_PIECE_OF_BUFFER[GB_BUFFER_SIZE];
VOLATILE CHAR    	GB_DATE_OF_LAST_SEND_RX[GB_BUFFER_SIZE];
VOLATILE CHAR    	GB_TIME_OF_LAST_SEND_RX[GB_BUFFER_SIZE];
VOLATILE CHAR    	GB_LAST_ONLINE_DATE[GB_BUFFER_SIZE];
VOLATILE CHAR    	GB_LAST_ONLINE_TIME[GB_BUFFER_SIZE];
VOLATILE CHAR    	GB_LAST_OFFLINE_DATE[GB_BUFFER_SIZE];
VOLATILE CHAR    	GB_LAST_OFFLINE_TIME[GB_BUFFER_SIZE];
VOLATILE CHAR    	GB_SPONT_FEEDBACK[GB_BUFFER_SIZE];
VOLATILE CHAR    	GB_CODE_TO_SEND[GB_CIRCULAR_BUFFER_SIZE][GB_BUFFER_SIZE];
VOLATILE CHAR		 	GB_MISSED_COMMS[100][GB_BUFFER_SIZE];
VOLATILE INTEGER 	GB_MISSED_COMMS_COUNT;
VOLATILE INTEGER 	GB_MISSED_COMMS_OUT_POINTER[100];
VOLATILE DEV		 	GB_TX_COMMS_DEVICE_USED[GB_CIRCULAR_BUFFER_SIZE];
VOLATILE CHAR    	GB_DATE_OF_COMMS_FAILURE[20][10];
VOLATILE CHAR    	GB_TIME_OF_COMMS_FAILURE[20][10];

VOLATILE LONG			GB_TIME_ARRAY[] = {50};
VOLATILE CHAR			RECEIVED_MESSAGE[13];
VOLATILE CHAR			INCOMPLETE_PACKET_RECEIVED_PREVIOUSLY[255];
VOLATILE CHAR			GB_RECEIVER_ADDRESSES[255][6];
VOLATILE CHAR			GB_TRANSMITTER_ADDRESSES[255][6];
VOLATILE INTEGER 	COMMS_MODE;
VOLATILE INTEGER	MAX_NUMBER_OF_PACKETS_RECEIVED;
VOLATILE INTEGER	A_PACKET_NOT_RECOGNIZED_SINCE_REBOOT;

VOLATILE INTEGER constCRCTable[] = 
		 {$0000, $1021, $2042, $3063, $4084, $50a5, $60c6, $70e7, //1-8
      $8108, $9129, $a14a, $b16b, $c18c, $d1ad, $e1ce, $f1ef, //9-16
      $1231, $0210, $3273, $2252, $52b5, $4294, $72f7, $62d6, //17-24
      $9339, $8318, $b37b, $a35a, $d3bd, $c39c, $f3ff, $e3de, //25-32
      $2462, $3443, $0420, $1401, $64e6, $74c7, $44a4, $5485, //33-40
      $a56a, $b54b, $8528, $9509, $e5ee, $f5cf, $c5ac, $d58d, //41-48
      $3653, $2672, $1611, $0630, $76d7, $66f6, $5695, $46b4, //49-56
      $b75b, $a77a, $9719, $8738, $f7df, $e7fe, $d79d, $c7bc, //57-64
      $48c4, $58e5, $6886, $78a7, $0840, $1861, $2802, $3823, //65-72
      $c9cc, $d9ed, $e98e, $f9af, $8948, $9969, $a90a, $b92b, //73-80
      $5af5, $4ad4, $7ab7, $6a96, $1a71, $0a50, $3a33, $2a12, //81-88
      $dbfd, $cbdc, $fbbf, $eb9e, $9b79, $8b58, $bb3b, $ab1a, //89-96
      $6ca6, $7c87, $4ce4, $5cc5, $2c22, $3c03, $0c60, $1c41, //97-104
      $edae, $fd8f, $cdec, $ddcd, $ad2a, $bd0b, $8d68, $9d49, //105-112
      $7e97, $6eb6, $5ed5, $4ef4, $3e13, $2e32, $1e51, $0e70, //113-120
      $ff9f, $efbe, $dfdd, $cffc, $bf1b, $af3a, $9f59, $8f78, //121-128
      $9188, $81a9, $b1ca, $a1eb, $d10c, $c12d, $f14e, $e16f, //129-136
      $1080, $00a1, $30c2, $20e3, $5004, $4025, $7046, $6067, //137-144
      $83b9, $9398, $a3fb, $b3da, $c33d, $d31c, $e37f, $f35e, //145-152
      $02b1, $1290, $22f3, $32d2, $4235, $5214, $6277, $7256, //153-160
      $b5ea, $a5cb, $95a8, $8589, $f56e, $e54f, $d52c, $c50d, //161-168
      $34e2, $24c3, $14a0, $0481, $7466, $6447, $5424, $4405, //169-176
      $a7db, $b7fa, $8799, $97b8, $e75f, $f77e, $c71d, $d73c, //177-184
      $26d3, $36f2, $0691, $16b0, $6657, $7676, $4615, $5634, //185-192
      $d94c, $c96d, $f90e, $e92f, $99c8, $89e9, $b98a, $a9ab, //193-200
      $5844, $4865, $7806, $6827, $18c0, $08e1, $3882, $28a3, //201-208
      $cb7d, $db5c, $eb3f, $fb1e, $8bf9, $9bd8, $abbb, $bb9a, //209-216
      $4a75, $5a54, $6a37, $7a16, $0af1, $1ad0, $2ab3, $3a92, //217-224
      $fd2e, $ed0f, $dd6c, $cd4d, $bdaa, $ad8b, $9de8, $8dc9, //225-232
      $7c26, $6c07, $5c64, $4c45, $3ca2, $2c83, $1ce0, $0cc1, //233-240
      $ef1f, $ff3e, $cf5d, $df7c, $af9b, $bfba, $8fd9, $9ff8, //241-248
			$6e17, $7e36, $4e55, $5e74, $2e93, $3eb2, $0ed1, $1ef0};//249-256

(***********************************************************)
(*               LATCHING DEFINITIONS GO BELOW             *)
(***********************************************************)
DEFINE_LATCHING

(***********************************************************)
(*       MUTUALLY EXCLUSIVE DEFINITIONS GO BELOW           *)
(***********************************************************)
DEFINE_MUTUALLY_EXCLUSIVE

(***********************************************************)
(*        SUBROUTINE/FUNCTION DEFINITIONS GO BELOW         *)
(***********************************************************)

DEFINE_FUNCTION INTEGER ASTOI(CHAR CONVERT_STRING[])

{
	RETURN ATOI("'0',CONVERT_STRING")
}

DEFINE_FUNCTION CHAR[8] EIGHT_BIT_TWOS_COMPLEMENT (CHAR ORIGGB_STRING[7]) 

LOCAL_VAR VOLATILE INTEGER COUNT
					VOLATILE CHAR CHECKSUM

{
	OFF[COUNT]
	OFF[CHECKSUM]
	WHILE (COUNT < LENGTH_STRING(ORIGGB_STRING))
	{
		COUNT++
		CHECKSUM = CHECKSUM + ORIGGB_STRING[COUNT]
	}
	
	CHECKSUM = BNOT(CHECKSUM)
	CHECKSUM = CHECKSUM + 1
	RETURN "ORIGGB_STRING,CHECKSUM"
}

DEFINE_FUNCTION CHAR[64] ADD_CRC(CHAR ArrayPtrBuf[64])

LOCAL_VAR VOLATILE INTEGER 	wdCRC
					VOLATILE INTEGER 	wdPtrCount
					VOLATILE CHAR 		bytDat
					VOLATILE INTEGER 	tempwdCRC
					VOLATILE INTEGER	BUFFER_LENGTH
					VOLATILE CHAR			mbytCRCHighData
					VOLATILE CHAR			mbytCRCLowData

{
	IF (LEFT_STRING(ArrayPtrBuf,2) == "$AA,$AA")
	{
		ArrayPtrBuf = RIGHT_STRING(ArrayPtrBuf,LENGTH_STRING(ArrayPtrBuf) - 2)
		BUFFER_LENGTH = ArrayPtrBuf[1] - 2
		wdCRC = 0;
		wdPtrCount = 0;
		while (BUFFER_LENGTH > 0) 
		{
			bytdat = wdCRC >> 8;
			wdCRC = wdCRC << 8;
			wdCRC = wdCRC ^ constCRCTable[bytdat ^ ArrayPtrBuf[wdPtrCount + 1] + 1];
			wdPtrCount++;
			BUFFER_LENGTH--;
		}

		arrayPtrBuf[wdPtrCount + 1] = wdCRC >> 8;
		mbytCRCHighData = ArrayPtrBuf[wdPtrCount + 1];
		wdPtrCount++;
		ArrayPtrBuf[wdPtrCount + 1] = wdCRC & $FF;
		mbytCRCLowData = ArrayPtrBuf[wdPtrCount + 1];
		RETURN "$AA,$AA,ArrayPtrBuf,mbytCRCHighData,mbytCRCLowData";
	}
	ELSE
	{
		RETURN '';
	}
}

DEFINE_CALL 'SHOW AND PARSE AN SBUS MESSAGE' (CHAR MESSAGE[],CHAR DIAGNOSTIC_STRING[255])

LOCAL_VAR 	VOLATILE CHAR 			TEMP_ANSWER_LEADING[200]
						VOLATILE CHAR 			TEMP_ANSWER_BODY1[200]
						VOLATILE CHAR 			TEMP_ANSWER_BODY2[200]
						VOLATILE CHAR 			TEMP_ANSWER_CRC[200]
						VOLATILE INTEGER 		CHAR_COUNT
						VOLATILE INTEGER		TEMP_SOURCE_TYPE
						VOLATILE INTEGER		TEMP_OPERATION_CODE
						VOLATILE INTEGER 		TEMP_NODE
						VOLATILE INTEGER		TEMP_CHANNEL
						VOLATILE INTEGER 		TEMP_VALUE
						VOLATILE INTEGER		TEMP_TOTAL_CHANNEL_QTY
						VOLATILE INTEGER		TEMP_TOTAL_AREA_QTY
						VOLATILE INTEGER		TEMP_SWITCH_NUMBER

{
#IF_DEFINED PV_DIAGNOSTICS
  IF (DEBUG)
		CALL 'SEND DIAGNOSTIC MESSAGE' ("'IN ''SHOW AND PARSE AN SBUS MESSAGE'' MESSAGE'",MESSAGE,3)
	CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(FIND_NODE(MESSAGE[5])),') IN ''SHOW AND PARSE AN SBUS MESSAGE'' MESSAGE'",MESSAGE,3,FIND_NODE(MESSAGE[5]))
#END_IF
  TEMP_ANSWER_LEADING = ''
  TEMP_ANSWER_BODY1 = ''
	TEMP_ANSWER_BODY2 = ''
	TEMP_SOURCE_TYPE = 0
	TEMP_OPERATION_CODE = 0
  OFF[CHAR_COUNT]
	WHILE (CHAR_COUNT < LENGTH_STRING(DIAGNOSTIC_STRING))
	{
		CHAR_COUNT++
		SELECT
		{
			ACTIVE (CHAR_COUNT == 1) :
			{
				TEMP_ANSWER_LEADING = "TEMP_ANSWER_LEADING,'''','$',ITOHEX(DIAGNOSTIC_STRING[CHAR_COUNT]),','"
			}

			ACTIVE (CHAR_COUNT == 2) :
			{
				TEMP_ANSWER_LEADING = "TEMP_ANSWER_LEADING,'$',ITOHEX(DIAGNOSTIC_STRING[CHAR_COUNT]),''', '"
			}

			ACTIVE (CHAR_COUNT == 3) :
			{
				TEMP_ANSWER_LEADING = "TEMP_ANSWER_LEADING,'LENGTH: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
			}

			ACTIVE (CHAR_COUNT == 4) :
			{
				TEMP_ANSWER_LEADING = "TEMP_ANSWER_LEADING,'SOURCE SUBNET: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
			}

			ACTIVE (CHAR_COUNT == 5) :
			{
				TEMP_ANSWER_LEADING = "TEMP_ANSWER_LEADING,'ID: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
				TEMP_NODE = FIND_NODE(DIAGNOSTIC_STRING[CHAR_COUNT])
			}

			ACTIVE (CHAR_COUNT == 6) :
			{
				TEMP_SOURCE_TYPE = DIAGNOSTIC_STRING[CHAR_COUNT] * 256
			}

			ACTIVE (CHAR_COUNT == 7) :
			{
				TEMP_SOURCE_TYPE = TEMP_SOURCE_TYPE + DIAGNOSTIC_STRING[CHAR_COUNT]
				TEMP_ANSWER_LEADING = "TEMP_ANSWER_LEADING,'TYPE: ',ITOA(TEMP_SOURCE_TYPE),', '"
			}

			ACTIVE (CHAR_COUNT == 8) :
			{
				TEMP_OPERATION_CODE = DIAGNOSTIC_STRING[CHAR_COUNT] * 256
			}

			ACTIVE (CHAR_COUNT == 9) :
			{
				TEMP_OPERATION_CODE = TEMP_OPERATION_CODE + DIAGNOSTIC_STRING[CHAR_COUNT]
				TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'OPCODE: ($',ITOHEX(TEMP_OPERATION_CODE),'), '"
				SWITCH (TEMP_OPERATION_CODE)
				{
					CASE $31 :
						TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'SINGLE CHANNEL CONTROL, '"
					CASE $32 :
						TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'SINGLE CHANNEL CONTROL CONFIRMATION, '"
					CASE $EFFF :
						TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'SCENE STATUS BROADCAST, '"
					CASE $E01C :
						TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'UNIVERSAL SWITCH CONTROL, '"
					CASE $E017 :
						TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'UNIVERSAL SWITCH BROADCAST, '"
				}
			}

			ACTIVE (CHAR_COUNT == 10) :
			{
				TEMP_ANSWER_LEADING = "TEMP_ANSWER_LEADING,'TARGET SUBNET: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
				CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(TEMP_NODE),') TEST1, TEMP_ANSWER_LEADING'",TEMP_ANSWER_LEADING,2,TEMP_NODE)
			}

			ACTIVE (CHAR_COUNT == 11) :
			{
				TEMP_ANSWER_LEADING = "TEMP_ANSWER_LEADING,'ID: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT])"
				CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(TEMP_NODE),') TEST2, TEMP_ANSWER_LEADING'",TEMP_ANSWER_LEADING,2,TEMP_NODE)
			}

			ACTIVE ((CHAR_COUNT == 12) AND ((DIAGNOSTIC_STRING[3]/*LENGTH BYTE*/ - 2) > 9)) :
			{
				SWITCH (TEMP_OPERATION_CODE)
				{
					CASE $31 :
					{
						TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'CHANNEL: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
						TEMP_CHANNEL = DIAGNOSTIC_STRING[CHAR_COUNT]
					}
					
					CASE $32 :
					{
						TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'CHANNEL: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
						TEMP_CHANNEL = DIAGNOSTIC_STRING[CHAR_COUNT]
					}
					
					CASE $EFFF :
					{
						TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'TOTAL AREAS: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
						TEMP_TOTAL_AREA_QTY = DIAGNOSTIC_STRING[CHAR_COUNT]
					}
					
					CASE $E01C :
					{
						TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'SWITCH NUMBER: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
						TEMP_SWITCH_NUMBER = DIAGNOSTIC_STRING[CHAR_COUNT]
					}
					
					CASE $E017 :
					{
						TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'SWITCH STATES: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT + 1]),', ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT + 2]),', ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT + 3]),', '"
						IF (TEMP_SOURCE_TYPE == 115)
						{
							SWITCH_STATES[TEMP_NODE][1] = DIAGNOSTIC_STRING[CHAR_COUNT];
							[vTX_COMMS_DEVICE_ARRAY[TEMP_NODE],1] = DIAGNOSTIC_STRING[CHAR_COUNT];
							SWITCH_STATES[TEMP_NODE][2] = DIAGNOSTIC_STRING[CHAR_COUNT + 1];
							[vTX_COMMS_DEVICE_ARRAY[TEMP_NODE],2] = DIAGNOSTIC_STRING[CHAR_COUNT + 1];
							SWITCH_STATES[TEMP_NODE][3] = DIAGNOSTIC_STRING[CHAR_COUNT + 2];
							[vTX_COMMS_DEVICE_ARRAY[TEMP_NODE],3] = DIAGNOSTIC_STRING[CHAR_COUNT + 2];
							SWITCH_STATES[TEMP_NODE][4] = DIAGNOSTIC_STRING[CHAR_COUNT + 3];
							[vTX_COMMS_DEVICE_ARRAY[TEMP_NODE],4] = DIAGNOSTIC_STRING[CHAR_COUNT + 3];
						}
					}
				}
				
				CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(TEMP_NODE),') TEST3, TEMP_ANSWER_BODY1'",TEMP_ANSWER_BODY1,2,TEMP_NODE)
			}

			ACTIVE ((CHAR_COUNT == 13) AND ((DIAGNOSTIC_STRING[3]/*LENGTH BYTE*/ - 2) > 10)) :
			{
				SWITCH (TEMP_OPERATION_CODE)
				{
					CASE $31 :
					{
						TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'VALUE: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
						TEMP_VALUE = DIAGNOSTIC_STRING[CHAR_COUNT]
					}
					
					CASE $32 :
					{
						SWITCH (DIAGNOSTIC_STRING[CHAR_COUNT])
						{
							CASE $F5 :
								TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'FAILURE, '"
							CASE $F8 :
								TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'SUCCESS, '"
						}
					}
					
					CASE $EFFF :
					{
						IF (TEMP_TOTAL_AREA_QTY)
							TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'AREA1 SCENE: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
					}
					
					CASE $E01C :
					{
						IF (TEMP_SWITCH_NUMBER)
						{
							TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'STATE: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
							SWITCH (DIAGNOSTIC_STRING[CHAR_COUNT])
							{
								CASE 0 :
								{
									OFF[SWITCH_STATES[TEMP_NODE][TEMP_SWITCH_NUMBER]]
									OFF[vTX_COMMS_DEVICE_ARRAY[TEMP_NODE],TEMP_SWITCH_NUMBER]
								}

								CASE 255 :
								{
									ON[SWITCH_STATES[TEMP_NODE][TEMP_SWITCH_NUMBER]]
									ON[vTX_COMMS_DEVICE_ARRAY[TEMP_NODE],TEMP_SWITCH_NUMBER]
								}
							}
						}
					}
				}
				
				CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(TEMP_NODE),') TEST4, TEMP_ANSWER_BODY1'",TEMP_ANSWER_BODY1,2,TEMP_NODE)
			}

			ACTIVE ((CHAR_COUNT == 14) AND ((DIAGNOSTIC_STRING[3]/*LENGTH BYTE*/ - 2) > 11)) :
			{
				SWITCH (TEMP_OPERATION_CODE)
				{
					CASE $31 :
						TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'TIME DOWN: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
					CASE $32 :
					{
						TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'VALUE: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
						TEMP_VALUE = DIAGNOSTIC_STRING[CHAR_COUNT]
						IF (DIAGNOSTIC_STRING[CHAR_COUNT - 1] == $F8)
						{
							LIGHTING_LEVELS[TEMP_NODE][TEMP_CHANNEL] = TEMP_VALUE
							SEND_LEVEL vTX_COMMS_DEVICE_ARRAY[TEMP_NODE],TEMP_CHANNEL,TEMP_VALUE
#IF_DEFINED PV_DIAGNOSTICS
							IF (DEBUG)
								SEND_STRING 0,"'SENDING LEVEL EVENT TO DEVICE ',ITOA(vTX_COMMS_DEVICE_ARRAY[TEMP_NODE].number),':',ITOA(vTX_COMMS_DEVICE_ARRAY[TEMP_NODE].port),':',ITOA(vTX_COMMS_DEVICE_ARRAY[TEMP_NODE].system),', LEVEL CODE ',ITOA(TEMP_CHANNEL),', VALUE ',ITOA(TEMP_VALUE)"
							CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(TEMP_NODE),') SENDING LEVEL EVENT TO DEVICE '","ITOA(vTX_COMMS_DEVICE_ARRAY[TEMP_NODE].number),':',ITOA(vTX_COMMS_DEVICE_ARRAY[TEMP_NODE].port),':',ITOA(vTX_COMMS_DEVICE_ARRAY[TEMP_NODE].system),', LEVEL CODE ',ITOA(TEMP_CHANNEL),', VALUE ',ITOA(TEMP_VALUE)",2,TEMP_NODE)
#END_IF
						}
					}
					
					CASE $EFFF :
					{
						IF (TEMP_TOTAL_AREA_QTY > 1)
							TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'AREA2 SCENE: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
						ELSE 
						{
							TEMP_TOTAL_CHANNEL_QTY = DIAGNOSTIC_STRING[CHAR_COUNT]
							TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'TOTAL CHANNELS: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
						}
					}
				}
				
				CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(TEMP_NODE),') TEST5, TEMP_ANSWER_BODY1'",TEMP_ANSWER_BODY1,2,TEMP_NODE)
			}

			ACTIVE ((CHAR_COUNT == 15) AND ((DIAGNOSTIC_STRING[3]/*LENGTH BYTE*/ - 2) > 12)) :
			{
				SWITCH (TEMP_OPERATION_CODE)
				{
					CASE $31 :
						TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'TIME UP: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
					CASE $32 :
						TEMP_ANSWER_BODY2 = "TEMP_ANSWER_BODY2,'TOTAL CHANNELS: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
					CASE $EFFF :
					{
						IF (TEMP_TOTAL_AREA_QTY > 2)
							TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'AREA3 SCENE: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
						ELSE IF (TEMP_TOTAL_CHANNEL_QTY)
						{
							TEMP_SWITCH_NUMBER = DIAGNOSTIC_STRING[CHAR_COUNT]
							TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'SWITCH 1: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
						}
					}
				}
				
				CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(TEMP_NODE),') TEST6, TEMP_ANSWER_BODY1'",TEMP_ANSWER_BODY1,2,TEMP_NODE)
			}

			ACTIVE ((CHAR_COUNT == 16) AND ((DIAGNOSTIC_STRING[3]/*LENGTH BYTE*/ - 2) > 13)) :
			{
				SWITCH (TEMP_OPERATION_CODE)
				{
					CASE $32 :
						TEMP_ANSWER_BODY2 = "TEMP_ANSWER_BODY2,'ALL CHANNELS STATUS: ',ITO8B(DIAGNOSTIC_STRING[CHAR_COUNT])"
				}
				
				CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(TEMP_NODE),') TEST7, TEMP_ANSWER_BODY1'",TEMP_ANSWER_BODY1,2,TEMP_NODE)
			}

			ACTIVE ((CHAR_COUNT == 17) AND ((DIAGNOSTIC_STRING[3]/*LENGTH BYTE*/ - 2) > 14)) :
			{
				IF ((DIAGNOSTIC_STRING[17] - 2) == 15)
					TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'DATA6: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT])"
				ELSE
					TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'DATA6: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
				
				CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(TEMP_NODE),') TEST8, TEMP_ANSWER_BODY1'",TEMP_ANSWER_BODY1,2,TEMP_NODE)
			}

			ACTIVE ((CHAR_COUNT == 18) AND ((DIAGNOSTIC_STRING[3]/*LENGTH BYTE*/ - 2) > 15)) :
			{
				IF ((DIAGNOSTIC_STRING[17] - 2) == 16)
					TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'DATA7: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT])"
				ELSE
					TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'DATA7: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
				
				CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(TEMP_NODE),') TEST9, TEMP_ANSWER_BODY1'",TEMP_ANSWER_BODY1,2,TEMP_NODE)
			}

			ACTIVE ((CHAR_COUNT == 18) AND ((DIAGNOSTIC_STRING[3]/*LENGTH BYTE*/ - 2) > 16)) :
			{
				IF ((DIAGNOSTIC_STRING[17] - 2) == 17)
					TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'DATA8: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT])"
				ELSE
					TEMP_ANSWER_BODY1 = "TEMP_ANSWER_BODY1,'DATA8: ',ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),', '"
				
				CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(TEMP_NODE),') TEST10, TEMP_ANSWER_BODY1'",TEMP_ANSWER_BODY1,2,TEMP_NODE)
			}
		}
	}

#IF_DEFINED PV_DIAGNOSTICS
	IF (DEBUG)
		IF (LENGTH_STRING(TEMP_ANSWER_LEADING))
			SEND_STRING 0,"TEMP_ANSWER_LEADING"
	IF (LENGTH_STRING(TEMP_ANSWER_LEADING))
		CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(TEMP_NODE),') ANALYSIS 1'",TEMP_ANSWER_LEADING,2,TEMP_NODE)
	IF (DEBUG)
		IF (LENGTH_STRING(TEMP_ANSWER_BODY1))
			SEND_STRING 0,"TEMP_ANSWER_BODY1"
	IF (LENGTH_STRING(TEMP_ANSWER_BODY1))
		CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(TEMP_NODE),') ANALYSIS 2'",TEMP_ANSWER_BODY1,2,TEMP_NODE)
	IF (DEBUG)
		IF (LENGTH_STRING(TEMP_ANSWER_BODY2))
			SEND_STRING 0,"TEMP_ANSWER_BODY2"
	IF (LENGTH_STRING(TEMP_ANSWER_BODY2))
		CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(TEMP_NODE),') ANALYSIS 3'",TEMP_ANSWER_BODY2,2,TEMP_NODE)
#END_IF
}

#IF_DEFINED PV_DIAGNOSTICS
DEFINE_CALL 'SEND DIAGNOSTIC MESSAGE' (CHAR MESSAGE[50],CHAR DIAGNOSTIC_STRING[255],MODE)
(* 
MODE = 1 =  ALL CHARACTERS BELOW SPACE (32) AND ALL CHARACTERS ABOVE ~ (126) ARE REPRESENTED AS 
	    INTEGERS, WHILE ALL THE REST ARE SHOWN IN THEIR ASCII FORMAT                  
MODE = 2 =  ALL CHARACTERS BELOW SPACE (32) AND ALL CHARACTERS ABOVE ~ (126) ARE REPRESENTED AS 
	    HEX, WHILE ALL THE REST ARE SHOWN IN THEIR ASCII FORMAT                  
MODE = 3 =  ALL CHARACTERS ARE REPRESENTED AS HEX
*)	      
LOCAL_VAR 	VOLATILE CHAR 		TEMP_ANSWER[200]
						VOLATILE INTEGER 	CHAR_COUNT

{
#IF_DEFINED PV_DIAGNOSTICS
	SEND_STRING 0,"'LENGTH/',MESSAGE,' = ',ITOA(LENGTH_STRING(DIAGNOSTIC_STRING))"
#END_IF
  TEMP_ANSWER = '"'
  OFF[CHAR_COUNT]
  WHILE (CHAR_COUNT < LENGTH_STRING(DIAGNOSTIC_STRING))
  {
    CHAR_COUNT++
    SELECT
    {
      ACTIVE (((DIAGNOSTIC_STRING[CHAR_COUNT] < 32) OR
	     (DIAGNOSTIC_STRING[CHAR_COUNT] > 126)) AND (MODE = 1)) :
      {
				TEMP_ANSWER = "TEMP_ANSWER,ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),','"
      }

      ACTIVE (((DIAGNOSTIC_STRING[CHAR_COUNT] < 32) OR
	     (DIAGNOSTIC_STRING[CHAR_COUNT] > 126)) AND (MODE = 2)) :
      {
				TEMP_ANSWER = "TEMP_ANSWER,'$',ITOHEX(DIAGNOSTIC_STRING[CHAR_COUNT]),','"
      }

      ACTIVE (MODE = 3) :
      {
				TEMP_ANSWER = "TEMP_ANSWER,'$',ITOHEX(DIAGNOSTIC_STRING[CHAR_COUNT]),','"
      }

      ACTIVE (1) :
      {
				TEMP_ANSWER = "TEMP_ANSWER,DIAGNOSTIC_STRING[CHAR_COUNT]"
      }
    }
  }
    
	IF (TEMP_ANSWER[LENGTH_STRING(TEMP_ANSWER)] == ',')
		TEMP_ANSWER[LENGTH_STRING(TEMP_ANSWER)] = '"'
#IF_DEFINED PV_DIAGNOSTICS
	SEND_STRING 0,"TEMP_ANSWER"
#END_IF
}
#END_IF

#IF_DEFINED PV_DIAGNOSTICS
DEFINE_CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' (CHAR MESSAGE[],CHAR DIAGNOSTIC_STRING[255],INTEGER MODE, INTEGER NODE)
(* 
MODE = 1 =  ALL CHARACTERS BELOW SPACE (32) AND ALL CHARACTERS ABOVE ~ (126) ARE REPRESENTED AS 
	    INTEGERS, WHILE ALL THE REST ARE SHOWN IN THEIR ASCII FORMAT                  
MODE = 2 =  ALL CHARACTERS BELOW SPACE (32) AND ALL CHARACTERS ABOVE ~ (126) ARE REPRESENTED AS 
	    HEX, WHILE ALL THE REST ARE SHOWN IN THEIR ASCII FORMAT                  
MODE = 3 =  ALL CHARACTERS ARE REPRESENTED AS HEX
*)	      
LOCAL_VAR VOLATILE CHAR 		TEMP_ANSWER[200];
					VOLATILE INTEGER 	CHAR_COUNT;
					VOLATILE INTEGER 	TEMP_COUNT;

{
	FOR (TEMP_COUNT=1;TEMP_COUNT<=LENGTH_ARRAY(INDIVIDUAL_DEBUGS);TEMP_COUNT++)
	{
		//SEND_STRING 0,"'INDIVIDUAL_DEBUGS[TEMP_COUNT] / NODE / TEMP_COUNT = ',ITOA(INDIVIDUAL_DEBUGS[TEMP_COUNT]),'/',ITOA(NODE),'/',ITOA(TEMP_COUNT)"
		IF ((INDIVIDUAL_DEBUGS[TEMP_COUNT]) AND (NODE == TEMP_COUNT))
		{
			SEND_STRING 0,"MESSAGE,':'"
			TEMP_ANSWER = '"'
			OFF[CHAR_COUNT]
			WHILE (CHAR_COUNT < LENGTH_STRING(DIAGNOSTIC_STRING))
			{
				CHAR_COUNT++
				SELECT
				{
					ACTIVE (((DIAGNOSTIC_STRING[CHAR_COUNT] < 32) OR
					 (DIAGNOSTIC_STRING[CHAR_COUNT] > 126)) AND (MODE = 1)) :
					{
						TEMP_ANSWER = "TEMP_ANSWER,ITOA(DIAGNOSTIC_STRING[CHAR_COUNT]),','"
					}
		
					ACTIVE (((DIAGNOSTIC_STRING[CHAR_COUNT] < 32) OR
					 (DIAGNOSTIC_STRING[CHAR_COUNT] > 126)) AND (MODE = 2)) :
					{
						TEMP_ANSWER = "TEMP_ANSWER,'$',ITOHEX(DIAGNOSTIC_STRING[CHAR_COUNT]),','"
					}
		
					ACTIVE (MODE = 3) :
					{
						TEMP_ANSWER = "TEMP_ANSWER,'$',ITOHEX(DIAGNOSTIC_STRING[CHAR_COUNT]),','"
					}
		
					ACTIVE (1) :
					{
						TEMP_ANSWER = "TEMP_ANSWER,DIAGNOSTIC_STRING[CHAR_COUNT]"
					}
				}
			}
				
			IF (TEMP_ANSWER[LENGTH_STRING(TEMP_ANSWER)] == ',')
				TEMP_ANSWER[LENGTH_STRING(TEMP_ANSWER)] = '"'
			SEND_STRING 0,"TEMP_ANSWER"
		}
	}
}
#END_IF

DEFINE_CALL 'SPLIT COMMAND ELEMENTS' (CHAR COMMAND_BUFFER[33], CHAR COMMAND_SPLIT_ELEMENTS[33][33])

LOCAL_VAR VOLATILE INTEGER TEST_POINT1
LOCAL_VAR VOLATILE INTEGER TEST_POINT2
LOCAL_VAR VOLATILE INTEGER TEST_POINT3
LOCAL_VAR VOLATILE INTEGER ELEMENT_COUNT
LOCAL_VAR VOLATILE INTEGER PRINT_COUNT

{
	TEST_POINT1 = FIND_STRING(COMMAND_BUFFER, "2", 1)
	TEST_POINT3 = FIND_STRING(COMMAND_BUFFER, "3", 1)
	TEST_POINT2 = FIND_STRING(COMMAND_BUFFER, '-', TEST_POINT1 + 1)
	OFF[ELEMENT_COUNT]
	IF ((TEST_POINT1) AND (TEST_POINT2) AND (TEST_POINT3))
	{
		WHILE ((TEST_POINT1) AND  (TEST_POINT2) AND (TEST_POINT2 <> TEST_POINT3))
		{
			ELEMENT_COUNT++
			COMMAND_SPLIT_ELEMENTS[ELEMENT_COUNT] = MID_STRING(COMMAND_BUFFER, TEST_POINT1 + 1, TEST_POINT2 - TEST_POINT1 - 1)
			TEST_POINT1 = TEST_POINT2
			TEST_POINT2 = FIND_STRING(COMMAND_BUFFER, '-', TEST_POINT1 + 1)
			IF (!TEST_POINT2)
				TEST_POINT2 = FIND_STRING(COMMAND_BUFFER, "3", 1)
		}
		
		IF (TEST_POINT2)
		{
			ELEMENT_COUNT++
			COMMAND_SPLIT_ELEMENTS[ELEMENT_COUNT] = MID_STRING(COMMAND_BUFFER, TEST_POINT1 + 1, TEST_POINT2 - TEST_POINT1 - 1)
		}
	
		OFF[PRINT_COUNT]
		WHILE (PRINT_COUNT < ELEMENT_COUNT)
		{
			PRINT_COUNT++
		}
	}
}

DEFINE_CALL 'GB_MANAGE CODE_SEND_WINDOW'
{
  IF ((GB_CODE_SEND_WINDOW) AND (!TIMELINE_ACTIVE(1)))
	{
		TIMELINE_CREATE(1, GB_TIME_ARRAY, 1, TIMELINE_ABSOLUTE, TIMELINE_ONCE)
	}
}

DEFINE_CALL 'GB_SEND CODE TO GBS'

LOCAL_VAR VOLATILE INTEGER TEST_POINT1
					VOLATILE INTEGER TEMP_ZONE
					VOLATILE INTEGER DELAY_COUNTER1
					VOLATILE CHAR		SEND_COUNT
					
{
	CLEAR_BUFFER GB_BUFFER
  IF (GB_DTR)
  {
    GB_DATE_OF_LAST_SEND_RX = DATE
    GB_TIME_OF_LAST_SEND_RX = TIME
		IF (TIMELINE_ACTIVE(1))
		{
			TIMELINE_KILL(1)
		}
		
		ON[GB_CODE_SEND_WINDOW]
		SEND_STRING TX_COMMS_DEVICE,"GB_CODE_TO_SEND[GB_OUT_POINTER]"
		GB_TX_COMMS_DEVICE_USED[GB_OUT_POINTER] = TX_COMMS_DEVICE
#IF_DEFINED PV_DIAGNOSTICS
		IF (DEBUG)
		{
			SEND_STRING 0,"'IN COMM, IN SEND, GB_OUT_POINTER/DEVICE = ',
											ITOA(GB_OUT_POINTER),'/',
											ITOA(TX_COMMS_DEVICE.NUMBER),':',
											ITOA(TX_COMMS_DEVICE.PORT),':',
											ITOA(TX_COMMS_DEVICE.SYSTEM)"
			CALL 'SEND DIAGNOSTIC MESSAGE' ("'IN COMM, IN SEND, GB_CODE_TO_SEND[',ITOA(GB_OUT_POINTER),']'",GB_CODE_TO_SEND[GB_OUT_POINTER],3)
		}                  
		
		CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(FIND_NODE(GB_CODE_TO_SEND[GB_OUT_POINTER][11])),') TEST , IN COMM, IN SEND, GB_CODE_TO_SEND[',ITOA(GB_OUT_POINTER),']'",GB_CODE_TO_SEND[GB_OUT_POINTER],3,FIND_NODE(GB_CODE_TO_SEND[GB_OUT_POINTER][11]))
#END_IF

    OFF[GB_DTR]
    OFF[GB_FINISHED]
  }
}

DEFINE_CALL 'GB_CHECK SEND WINDOW AND SEND'
{
  IF (!GB_CODE_SEND_WINDOW)
	{
    CALL 'GB_SEND CODE TO GBS'
	}
}

DEFINE_FUNCTION CHAR[8] ITO8B(INTEGER NUMBER)
{
	RETURN "ITOA((NUMBER BAND 128)>>7),
					ITOA((NUMBER BAND 64)>>6),
					ITOA((NUMBER BAND 32)>>5),
					ITOA((NUMBER BAND 16)>>4),
					ITOA((NUMBER BAND 8)>>3),
					ITOA((NUMBER BAND 4)>>2),
					ITOA((NUMBER BAND 2)>>1),
					ITOA(NUMBER BAND 1)"
}

DEFINE_FUNCTION CHAR[16] ITO16B(INTEGER NUMBER)
{
	RETURN "ITOA((NUMBER BAND 32768)>>15),
					ITOA((NUMBER BAND 16384)>>14),
					ITOA((NUMBER BAND 8192)>>13),
					ITOA((NUMBER BAND 4096)>>12),
					ITOA((NUMBER BAND 2048)>>11),
					ITOA((NUMBER BAND 1024)>>10),
					ITOA((NUMBER BAND 512)>>9),
					ITOA((NUMBER BAND 256)>>8),
					ITOA((NUMBER BAND 128)>>7),
					ITOA((NUMBER BAND 64)>>6),
					ITOA((NUMBER BAND 32)>>5),
					ITOA((NUMBER BAND 16)>>4),
					ITOA((NUMBER BAND 8)>>3),
					ITOA((NUMBER BAND 4)>>2),
					ITOA((NUMBER BAND 2)>>1),
					ITOA(NUMBER BAND 1)"
}

DEFINE_FUNCTION INTEGER FIND_NODE(INTEGER NODE_ADDRESS)

LOCAL_VAR VOLATILE INTEGER NODE_COUNT
LOCAL_VAR VOLATILE INTEGER NODE_FOUND

{
	OFF[NODE_FOUND]
	OFF[NODE_COUNT]
	WHILE ((NODE_COUNT < TOTAL_NODE_COUNT) AND (!NODE_FOUND))
	{
		NODE_COUNT++
		IF (NODE_ADDRESS == vTX_COMMS_DEVICE_ID_ARRAY[NODE_COUNT])
		{
			ON[NODE_FOUND]
		}
	}
	
	IF (NODE_FOUND)
		RETURN NODE_COUNT
	ELSE
		RETURN 0
}

DEFINE_CALL 'GB_PROCESS COMMAND' (INTEGER GB_ADDRESS, CHAR BUFFER[])

LOCAL_VAR VOLATILE INTEGER TEST_POINT1
          VOLATILE INTEGER TEST_POINT2
          VOLATILE INTEGER TEST_POINT3
          VOLATILE INTEGER TEST_POINT4
          VOLATILE INTEGER TEST_POINT5
          VOLATILE INTEGER PASS_COUNT
          VOLATILE INTEGER ZONE_COUNT
					VOLATILE INTEGER LOCAL_COUNT
          VOLATILE INTEGER MAX_ZONE_COUNT
					VOLATILE INTEGER TEMP_NUMBER
					VOLATILE INTEGER TEMP_PORT
					VOLATILE INTEGER TEMP_SYSTEM
					VOLATILE LONG 		TEMP_ZONE
					VOLATILE INTEGER TEMP_BOX
					VOLATILE INTEGER BOX_FOUND
					VOLATILE INTEGER TEMP_CHANNEL
					VOLATILE INTEGER TEMP_LEVEL
					VOLATILE INTEGER TEMP_RAMP
					VOLATILE INTEGER TEMP_CHANNELS
					VOLATILE INTEGER CURRENT_LINE
					VOLATILE INTEGER BYTE_COUNT
					VOLATILE INTEGER CHECKSUM_RIGHT
					VOLATILE CHAR		TEMP_STRING[8]
					VOLATILE CHAR		TEMP_STRING1[8]
					VOLATILE CHAR		ADDRESS_STRING[6]
					VOLATILE CHAR		FILE_LINE_READ[100]
					VOLATILE SINTEGER   FILE_READ_RESULT
					VOLATILE SLONG   FILE_WRITE_RESULT 
					VOLATILE CHAR		LEVEL_STRING[2]

{
	SELECT
	{
		ACTIVE ((LEFT_STRING(BUFFER,3) == 'L:[') AND (FIND_STRING(BUFFER,']:',4))) :
		//THIS IS USED TO ACHIEVE DIMMING LEVELS
		{
			OFF[TEMP_ZONE]
			OFF[TEMP_LEVEL]
			OFF[TEMP_RAMP]
			TEST_POINT1 = FIND_STRING(GB_BUFFER,'L:[',1)
			TEST_POINT2 = FIND_STRING(GB_BUFFER,']:',TEST_POINT1 + 3)
			TEMP_ZONE = ATOI("'0',MID_STRING(GB_BUFFER,TEST_POINT1 + 3,TEST_POINT2 - TEST_POINT1 - 3)")
			IF (TEMP_ZONE)
			{
				ON[GB_VALID_FEEDBACK] 
				TEST_POINT1 = FIND_STRING(GB_BUFFER,':',TEST_POINT2 + 2)
				IF (TEST_POINT1)
				{
					TEMP_LEVEL = ATOI("'0',MID_STRING(GB_BUFFER,TEST_POINT2 + 2,TEST_POINT1 - TEST_POINT2 - 2)")
					TEMP_RAMP = ATOI("'0',RIGHT_STRING(GB_BUFFER,LENGTH_STRING(GB_BUFFER) - TEST_POINT1)")
				}
				ELSE 
				{
					TEMP_LEVEL = ATOI("'0',RIGHT_STRING(GB_BUFFER,LENGTH_STRING(GB_BUFFER) - TEST_POINT2 - 1)")
				}

				IF (COMMS_MODE == 1)
					GB_CONVERTED_COMMAND = "192,168,10,251,'HDLMIRACLE',ADD_CRC("$AA,$AA,$F,$1,$FE,$0,$FE,$0,$31,1,GB_ADDRESS,TEMP_ZONE,TEMP_LEVEL,$0,$0")"
				ELSE IF (COMMS_MODE == 2)
					GB_CONVERTED_COMMAND = "ADD_CRC("$AA,$AA,$F,$1,$FE,$FF,$FE,$0,$31,1,GB_ADDRESS,TEMP_ZONE,TEMP_LEVEL,$0,$0")"
#IF_DEFINED KWYNI_DIAGNOSTICS
				IF (DEBUG)
				{
					CALL 'SEND DIAGNOSTIC MESSAGE' ("'TEST, GB_CONVERTED_COMMAND'",GB_CONVERTED_COMMAND,1)
				}
				
				CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(FIND_NODE(GB_ADDRESS)),') TEST , GB_CONVERTED_COMMAND'",GB_CONVERTED_COMMAND,3,FIND_NODE(GB_ADDRESS))
#END_IF
			}
		}

		ACTIVE (1) :
		{
#IF_DEFINED KWYNI_DIAGNOSTICS
			IF (DEBUG)
			{
				CALL 'SEND DIAGNOSTIC MESSAGE'  ('INVALID COMMAND RECEIVED ON vGBS DEVICE ',TEMP_STRING,2)
			}
#END_IF
			CLEAR_BUFFER BUFFER
		}
  }  
}

DEFINE_FUNCTION INTEGER BREAK_UP_AND_PROCESS_MESSAGES (CHAR RECEIVED_MESSAGE[])

LOCAL_VAR VOLATILE INTEGER 	TEST_POINT1;
          VOLATILE INTEGER 	TEST_POINT2;
          VOLATILE INTEGER 	PASS_COUNT;
					VOLATILE INTEGER 	NUMBER_OF_COMPLETE_MESSAGES_RECEIVED;
					VOLATILE INTEGER 	LAST_MESSAGE_NOT_COMPLETE;
					VOLATILE INTEGER 	PACKET_COUNT;
					VOLATILE INTEGER 	ALL_CURRENT_PACKETS_RECOGNIZED;
					VOLATILE CHAR			PACKETS[32][255];
					VOLATILE CHAR			TEST_PACKET[255];

{
	IF (LENGTH_STRING(INCOMPLETE_PACKET_RECEIVED_PREVIOUSLY))
	{
		RECEIVED_MESSAGE = "INCOMPLETE_PACKET_RECEIVED_PREVIOUSLY,RECEIVED_MESSAGE";
		INCOMPLETE_PACKET_RECEIVED_PREVIOUSLY = '';
	}

	FOR (PACKET_COUNT=1;PACKET_COUNT<=32;PACKET_COUNT++)
	{
		PACKETS[PACKET_COUNT] = '';
	}

	OFF[NUMBER_OF_COMPLETE_MESSAGES_RECEIVED];
	OFF[LAST_MESSAGE_NOT_COMPLETE];
	TEST_POINT1 = FIND_STRING(RECEIVED_MESSAGE,"$AA,$AA",1);
	OFF[PACKET_COUNT];
	OFF[PASS_COUNT];
	WHILE ((TEST_POINT1) AND (PASS_COUNT < 32))
	{
		PASS_COUNT++;
		TEST_POINT2 = FIND_STRING(RECEIVED_MESSAGE,"$AA,$AA",TEST_POINT1 + 2);
		IF (TEST_POINT2)
			IF (MID_STRING(RECEIVED_MESSAGE,TEST_POINT2,3) == "$AA,$AA,$AA")
				WHILE (MID_STRING(RECEIVED_MESSAGE,TEST_POINT2,3) == "$AA,$AA,$AA")
					TEST_POINT2++;
#IF_DEFINED PV_DIAGNOSTICS
		IF (DEBUG)
			SEND_STRING 0,"'TEST1, TEST_POINT1/TEST_POINT2 = ',ITOA(TEST_POINT1),'/',ITOA(TEST_POINT2)";
#END_IF			
		IF (LENGTH_STRING(RECEIVED_MESSAGE) >= RECEIVED_MESSAGE[TEST_POINT1 + 2] + 2)
			TEST_PACKET = MID_STRING(RECEIVED_MESSAGE,TEST_POINT1,RECEIVED_MESSAGE[TEST_POINT1 + 2] + 2);
		ELSE
			TEST_PACKET = RIGHT_STRING(RECEIVED_MESSAGE,LENGTH_STRING(RECEIVED_MESSAGE) - TEST_POINT1);
		IF (TEST_POINT2)
		{
			PACKETS[PASS_COUNT] = TEST_PACKET;
#IF_DEFINED PV_DIAGNOSTICS
			IF (DEBUG)
				CALL 'SEND DIAGNOSTIC MESSAGE' ("'TEST2, PACKETS[',ITOA(PASS_COUNT),']'",PACKETS[PASS_COUNT] ,3);
			CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(FIND_NODE(PACKETS[PASS_COUNT][5])),') TEST2, PACKETS[',ITOA(PASS_COUNT),']'",PACKETS[PASS_COUNT],3,FIND_NODE(PACKETS[PASS_COUNT][5]))
#END_IF			
			IF ((LENGTH_STRING(PACKETS[PASS_COUNT]) == (PACKETS[PASS_COUNT][3] + 2)) AND (PACKETS[PASS_COUNT] == ADD_CRC(LEFT_STRING(PACKETS[PASS_COUNT],LENGTH_STRING(PACKETS[PASS_COUNT]) - 2))))
			{
				NUMBER_OF_COMPLETE_MESSAGES_RECEIVED = PASS_COUNT;
#IF_DEFINED PV_DIAGNOSTICS
				IF (DEBUG)
					SEND_STRING 0,"'TEST3, NUMBER_OF_COMPLETE_MESSAGES_RECEIVED = ',ITOA(NUMBER_OF_COMPLETE_MESSAGES_RECEIVED)";
#END_IF			
			}
		}
		ELSE IF (LENGTH_STRING(TEST_PACKET) == (TEST_PACKET[3] + 2))
		{
			IF (TEST_PACKET == ADD_CRC(LEFT_STRING(TEST_PACKET,LENGTH_STRING(TEST_PACKET) - 2)))
			{
				PACKETS[PASS_COUNT] = TEST_PACKET;
#IF_DEFINED PV_DIAGNOSTICS
				IF (DEBUG)
					CALL 'SEND DIAGNOSTIC MESSAGE' ("'TEST4, PACKETS[',ITOA(PASS_COUNT),']'",PACKETS[PASS_COUNT] ,3);
				CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(FIND_NODE(PACKETS[PASS_COUNT][5])),') TEST4, PACKETS[',ITOA(PASS_COUNT),']'",PACKETS[PASS_COUNT],3,FIND_NODE(PACKETS[PASS_COUNT][5]))
#END_IF
				NUMBER_OF_COMPLETE_MESSAGES_RECEIVED = PASS_COUNT;
#IF_DEFINED PV_DIAGNOSTICS
				IF (DEBUG)
					SEND_STRING 0,"'TEST4, NUMBER_OF_COMPLETE_MESSAGES_RECEIVED = ',ITOA(NUMBER_OF_COMPLETE_MESSAGES_RECEIVED)";
#END_IF
			}
		}
		ELSE IF (LENGTH_STRING(TEST_PACKET) < (TEST_PACKET[3] + 2))
		{
			INCOMPLETE_PACKET_RECEIVED_PREVIOUSLY = RIGHT_STRING(RECEIVED_MESSAGE,LENGTH_STRING(RECEIVED_MESSAGE) - TEST_POINT2);
#IF_DEFINED PV_DIAGNOSTICS
			IF (DEBUG)
				CALL 'SEND DIAGNOSTIC MESSAGE' ("'TEST5, INCOMPLETE_PACKET_RECEIVED_PREVIOUSLY'",INCOMPLETE_PACKET_RECEIVED_PREVIOUSLY ,3);
#END_IF
			ON[LAST_MESSAGE_NOT_COMPLETE];
		}
		ELSE
		{
			IF (DEBUG)
				SEND_STRING 0,"'TEST6, NONE OF THE ABOVE TESTS SUCCEEDED!'";
		}
		
		TEST_POINT1 = TEST_POINT2;
	}

	IF (DEBUG)
		SEND_STRING 0,"'NUMBER_OF_COMPLETE_MESSAGES_RECEIVED = ',ITOA(NUMBER_OF_COMPLETE_MESSAGES_RECEIVED)";
	IF (!LAST_MESSAGE_NOT_COMPLETE)
		INCOMPLETE_PACKET_RECEIVED_PREVIOUSLY = '';
	ALL_CURRENT_PACKETS_RECOGNIZED = PARSE_ALL_PACKETS(PACKETS, NUMBER_OF_COMPLETE_MESSAGES_RECEIVED);
	A_PACKET_NOT_RECOGNIZED_SINCE_REBOOT = (!ALL_CURRENT_PACKETS_RECOGNIZED);
	IF (DEBUG)
		SEND_STRING 0,"'ALL_CURRENT_PACKETS_RECOGNIZED / A_PACKET_NOT_RECOGNIZED_SINCE_REBOOT = ',ITOA(ALL_CURRENT_PACKETS_RECOGNIZED),'/',ITOA(A_PACKET_NOT_RECOGNIZED_SINCE_REBOOT)";
	RECEIVED_MESSAGE = '';

	RETURN NUMBER_OF_COMPLETE_MESSAGES_RECEIVED;
}

DEFINE_CALL 'GB_CALCULATE TIME SINCE LAST OFFLINE' (INTEGER GB_DC_TIME_SINCE_LAST_OFFLINE)
LOCAL_VAR VOLATILE SINTEGER CURRENT_DAY
          VOLATILE SINTEGER CURRENT_HOUR
          SINTEGER CURRENT_MINUTE
          VOLATILE SINTEGER CURRENT_SECOND
          VOLATILE SINTEGER LAST_DAY
          VOLATILE SINTEGER LAST_HOUR
          VOLATILE SINTEGER LAST_MINUTE
          VOLATILE SINTEGER LAST_SECOND
          VOLATILE SINTEGER ABSOLUTE_CURRENT_SECOND
          VOLATILE SINTEGER ABSOLUTE_LAST_SECOND

{
  CURRENT_DAY    = DATE_TO_DAY(DATE)
  CURRENT_HOUR   = TIME_TO_HOUR(TIME)
  CURRENT_MINUTE = TIME_TO_MINUTE(TIME)
  CURRENT_SECOND = TIME_TO_SECOND(TIME)
  LAST_DAY    = DATE_TO_DAY(GB_LAST_OFFLINE_DATE)
  LAST_HOUR   = TIME_TO_HOUR(GB_LAST_OFFLINE_TIME)
  LAST_MINUTE = TIME_TO_MINUTE(GB_LAST_OFFLINE_TIME)
  LAST_SECOND = TIME_TO_SECOND(GB_LAST_OFFLINE_TIME)
  ABSOLUTE_CURRENT_SECOND = TYPE_CAST(TYPE_CAST(CURRENT_HOUR) * 3600) + TYPE_CAST(TYPE_CAST(CURRENT_MINUTE) * 60) + TYPE_CAST(CURRENT_SECOND)
  ABSOLUTE_LAST_SECOND    = TYPE_CAST(TYPE_CAST(LAST_HOUR) * 3600) + TYPE_CAST(TYPE_CAST(LAST_MINUTE) * 60) + TYPE_CAST(LAST_SECOND)
  IF (CURRENT_DAY = LAST_DAY)
    GB_DC_TIME_SINCE_LAST_OFFLINE    = TYPE_CAST(ABSOLUTE_CURRENT_SECOND - ABSOLUTE_LAST_SECOND)
  ELSE  
    GB_DC_TIME_SINCE_LAST_OFFLINE    = TYPE_CAST(ABSOLUTE_CURRENT_SECOND)
}      

DEFINE_CALL 'GB_CALCULATE TIME SINCE LAST SEND RECEIVE' (INTEGER GB_TIME_SINCE_LAST_SEND)

LOCAL_VAR VOLATILE SINTEGER CURRENT_DAY
          VOLATILE SINTEGER CURRENT_HOUR
          VOLATILE SINTEGER CURRENT_MINUTE
          VOLATILE SINTEGER CURRENT_SECOND
          VOLATILE SINTEGER LAST_DAY
          VOLATILE SINTEGER LAST_HOUR
          VOLATILE SINTEGER LAST_MINUTE
          VOLATILE SINTEGER LAST_SECOND
          VOLATILE SINTEGER ABSOLUTE_CURRENT_SECOND
          VOLATILE SINTEGER ABSOLUTE_LAST_SECOND

{
  CURRENT_DAY    = DATE_TO_DAY(DATE)
  CURRENT_HOUR   = TIME_TO_HOUR(TIME)
  CURRENT_MINUTE = TIME_TO_MINUTE(TIME)
  CURRENT_SECOND = TIME_TO_SECOND(TIME)
  LAST_DAY    = DATE_TO_DAY(GB_DATE_OF_LAST_SEND_RX)
  LAST_HOUR   = TIME_TO_HOUR(GB_TIME_OF_LAST_SEND_RX)
  LAST_MINUTE = TIME_TO_MINUTE(GB_TIME_OF_LAST_SEND_RX)
  LAST_SECOND = TIME_TO_SECOND(GB_TIME_OF_LAST_SEND_RX)
  ABSOLUTE_CURRENT_SECOND = TYPE_CAST(TYPE_CAST(CURRENT_HOUR) * 3600) + TYPE_CAST(TYPE_CAST(CURRENT_MINUTE) * 60) + TYPE_CAST(CURRENT_SECOND)
  ABSOLUTE_LAST_SECOND    = TYPE_CAST(TYPE_CAST(LAST_HOUR) * 3600) + TYPE_CAST(TYPE_CAST(LAST_MINUTE) * 60) + TYPE_CAST(LAST_SECOND)
  IF (CURRENT_DAY = LAST_DAY)
    GB_TIME_SINCE_LAST_SEND    = TYPE_CAST(ABSOLUTE_CURRENT_SECOND - ABSOLUTE_LAST_SECOND)
  ELSE  
    GB_TIME_SINCE_LAST_SEND    = TYPE_CAST(ABSOLUTE_CURRENT_SECOND)
}      

DEFINE_CALL 'GB_SEND FROM BUFFER'

LOCAL_VAR VOLATILE INTEGER GB_TIME_SINCE_LAST_SEND

{
	SELECT
  {
    ACTIVE ((GB_OUT_POINTER <> GB_IN_POINTER) AND
            (GB_FEEDBACK_FLAG[GB_OUT_POINTER] > 1) AND
            (!GB_DTR)) :
    {
      CALL 'GB_CALCULATE TIME SINCE LAST SEND RECEIVE' (GB_TIME_SINCE_LAST_SEND)
      IF (GB_TIME_SINCE_LAST_SEND >= 2)
      {
        OFF[GB_MAX_PERIOD]
#IF_DEFINED PV_DIAGNOSTICS
        IF (DEBUG)
          SEND_STRING 0,"'COMMS TO GBS DEVICE TIMED OUT!!',10,13"
				CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(FIND_NODE(GB_CODE_TO_SEND[GB_OUT_POINTER][11])),') COMMS TO GBS DEVICE TIMED OUT!!, FOR'",GB_CODE_TO_SEND[GB_OUT_POINTER],3,FIND_NODE(GB_CODE_TO_SEND[GB_OUT_POINTER][11]))
#END_IF
        GB_NUMBER_OF_COMMS_RETRIES++
				GB_MISSED_COMMS_COUNT++
				IF (GB_MISSED_COMMS_COUNT > 100)
					GB_MISSED_COMMS_COUNT = 1
				GB_MISSED_COMMS[GB_MISSED_COMMS_COUNT] = GB_CODE_TO_SEND[GB_OUT_POINTER]
				GB_MISSED_COMMS_OUT_POINTER[GB_MISSED_COMMS_COUNT] = GB_OUT_POINTER
      }    
    }  
    
    ACTIVE ((GB_OUT_POINTER <> GB_IN_POINTER) AND (GB_DTR)) :
    {
      CALL 'GB_CALCULATE TIME SINCE LAST SEND RECEIVE' (GB_TIME_SINCE_LAST_SEND)
    }
  }

  SELECT
  {
    ACTIVE ((GB_OUT_POINTER <> GB_IN_POINTER) AND
            (GB_DTR)) :
    {
      OFF[GB_WATCH_DOG]
      GB_STORE_GET_VALUE = 255
      OFF[GB_FINISHED]
      IF ((GB_FEEDBACK_FLAG[GB_OUT_POINTER] > 0) AND (!GB_MAX_PERIOD))
      {
#IF_DEFINED PV_DIAGNOSTICS
        IF (DEBUG)
					SEND_STRING 0,"'GB_FEEDBACK_FLAG[',ITOA(GB_OUT_POINTER),'] = ',ITOA(GB_FEEDBACK_FLAG[GB_OUT_POINTER])"
				CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(FIND_NODE(GB_CODE_TO_SEND[GB_OUT_POINTER][11])),') GB_FEEDBACK_FLAG[',ITOA(GB_OUT_POINTER),']'",ITOA(GB_FEEDBACK_FLAG[GB_OUT_POINTER]),2,FIND_NODE(GB_CODE_TO_SEND[GB_OUT_POINTER][11]))
#END_IF
        GB_FEEDBACK_FLAG[GB_OUT_POINTER]++
      }
        
      ON[GB_MAX_PERIOD]
      CALL 'GB_CHECK SEND WINDOW AND SEND'
    }
    
    ACTIVE ((GB_OUT_POINTER <> GB_IN_POINTER) AND
            (!GB_DTR) AND (GB_TIME_SINCE_LAST_SEND >= 10)) :
    {        
      IF (!GB_WATCH_DOG)
      {
        ON[GB_WATCH_DOG]
				ON[GB_FINISHED]
      }
    }
  }

  SELECT
  {
    ACTIVE ((!GB_MAX_PERIOD) AND (GB_FEEDBACK_FLAG[GB_OUT_POINTER] <= 4) AND
           (!GB_SPONT_DETECTED) AND (!GB_PROCESS_SPONT_FBACK) AND
           (!GB_PROCESSED_SPONT_FBACK)) :
    {
      ON[GB_DTR]
    }

    ACTIVE ((!GB_DTR) AND (GB_SPONT_DETECTED) AND (!GB_PROCESS_SPONT_FBACK) AND
           (!GB_PROCESSED_SPONT_FBACK)) :
    {
      OFF[GB_SPONT_DETECTED]
      ON[GB_PROCESS_SPONT_FBACK]
    }
  }

  IF (!GB_DTR)
  {
    IF (((GB_FEEDBACK_FLAG[GB_OUT_POINTER] > 2) OR
       (GB_FEEDBACK_FLAG[GB_OUT_POINTER] = 0)) AND
       (!GB_PROCESS_SPONT_FBACK) AND (!GB_PROCESSED_SPONT_FBACK))
    {
#IF_DEFINED PV_DIAGNOSTICS
      IF (DEBUG)
        SEND_STRING 0,"'GB_FEEDBACK_FLAG = ',ITOA(GB_FEEDBACK_FLAG[GB_OUT_POINTER])"
			CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(FIND_NODE(GB_CODE_TO_SEND[GB_OUT_POINTER][11])),') GB_FEEDBACK_FLAG[',ITOA(GB_OUT_POINTER),']'",ITOA(GB_FEEDBACK_FLAG[GB_OUT_POINTER]),2,FIND_NODE(GB_CODE_TO_SEND[GB_OUT_POINTER][11]))
#END_IF

      ON[GB_FINISHED]
      IF (GB_FEEDBACK_FLAG[GB_OUT_POINTER] > 2)
      {
        GB_NUMBER_OF_COMMS_FAILURES++
        GB_CIRCULAR_POINTER++
        IF (GB_CIRCULAR_POINTER > 5)
          GB_CIRCULAR_POINTER = 1
        GB_DATE_OF_COMMS_FAILURE[GB_CIRCULAR_POINTER] = DATE
        GB_TIME_OF_COMMS_FAILURE[GB_CIRCULAR_POINTER] = TIME
      }
    }
    
    IF (GB_FINISHED)
    {
#IF_DEFINED PV_DIAGNOSTICS
			IF (DEBUG)
			{
        SEND_STRING 0,"'GB_FINISHED!!'"
        SEND_STRING 0,' '
			}
#END_IF
        
      OFF[GB_MAX_PERIOD]
      IF (!GB_LINKED_STATE[GB_OUT_POINTER])
			{
        ON[GB_ITR]
				GB_SEND_COUNT++
			}
			
      IF ((!GB_SPONT_DETECTED) AND (!GB_PROCESS_SPONT_FBACK) AND
         (!GB_PROCESSED_SPONT_FBACK))
      {
        GB_FEEDBACK_FLAG[GB_OUT_POINTER] = 0
        GB_OUT_POINTER = GB_OUT_POINTER + 1
        IF (GB_OUT_POINTER > GB_CIRCULAR_BUFFER_SIZE)
          GB_OUT_POINTER = 1
        ON[GB_DTR]
      }
      ELSE
      {
        IF ((!GB_PROCESS_SPONT_FBACK) AND (GB_PROCESSED_SPONT_FBACK))
        {
          OFF[GB_PROCESSED_SPONT_FBACK]
          ON[GB_DTR]
        }
      }
    }
  }
}

DEFINE_CALL 'GB_BUFFER CODE' (CHAR GB_COMMAND[GB_BUFFER_SIZE], FEEDBACK_STATE, LINKED_TO_NEXT)

LOCAL_VAR VOLATILE INTEGER TEST_POINT1
					VOLATILE INTEGER TEST_POINT2
					VOLATILE INTEGER TEMP_NUMBER
					VOLATILE INTEGER TEMP_PORT
					VOLATILE INTEGER TEMP_SYSTEM
					VOLATILE INTEGER QUEUE_SIZE
					VOLATILE INTEGER QUEUE_COUNT
					VOLATILE INTEGER RECORD_POINTER
					VOLATILE INTEGER GB_OVERRUN
					VOLATILE INTEGER SAME_COMMAND

{
	OFF[GB_OVERRUN]
	GB_IN_POINTER = GB_IN_POINTER + 1
	IF (GB_IN_POINTER  > GB_CIRCULAR_BUFFER_SIZE)
		GB_IN_POINTER  = 1
	IF (GB_IN_POINTER = GB_OUT_POINTER)
	{
		ON[GB_OVERRUN]
		GB_BUFFER_OVERFLOW_COUNT++
#IF_DEFINED PV_DIAGNOSTICS
		IF (DEBUG)
		{
			SEND_STRING 0,'GB_IN_POINTER HAS EXCEEDED THE POSITION OF GB_OUT_POINTER'
			SEND_STRING 0,'THE LAST COMMAND WAS NOT BUFFERED'
			SEND_STRING 0,"'DC`_BUFFER_OVERFLOW_COUNT = ',ITOA(GB_BUFFER_OVERFLOW_COUNT)"
		}
#END_IF
	}

	IF (GB_IN_POINTER = 1)
		GB_IN_POINTER = GB_CIRCULAR_BUFFER_SIZE
	ELSE
		GB_IN_POINTER--
	IF (!GB_OVERRUN)
	{
		OFF[QUEUE_COUNT]
		RECORD_POINTER = GB_OUT_POINTER
		WHILE (RECORD_POINTER <> GB_IN_POINTER)
		{
			RECORD_POINTER++
			IF (RECORD_POINTER > GB_CIRCULAR_BUFFER_SIZE)
				RECORD_POINTER = 1
			QUEUE_COUNT++
		}
		
		GB_CODE_TO_SEND[GB_IN_POINTER] = GB_COMMAND
		GB_LINKED_STATE[GB_IN_POINTER] = LINKED_TO_NEXT
		GB_FEEDBACK_FLAG[GB_IN_POINTER] = FEEDBACK_STATE
#IF_DEFINED PV_DIAGNOSTICS
		IF (DEBUG)
		{
			SEND_STRING 0,"'IN COMM, IN BUFFER, GB_IN_POINTER/DEVICE = ',
											ITOA(GB_IN_POINTER),'/',
											ITOA(TX_COMMS_DEVICE.NUMBER),':',
											ITOA(TX_COMMS_DEVICE.PORT),':',
											ITOA(TX_COMMS_DEVICE.SYSTEM)"
			CALL 'SEND DIAGNOSTIC MESSAGE' ("'IN COMM, IN BUFFER, GB_CODE_TO_SEND[',ITOA(GB_IN_POINTER),']'",GB_CODE_TO_SEND[GB_IN_POINTER],3)
		}

		CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(FIND_NODE(GB_CODE_TO_SEND[GB_IN_POINTER][11])),') IN COMM, IN BUFFER, GB_CODE_TO_SEND[',ITOA(GB_IN_POINTER),']'",GB_CODE_TO_SEND[GB_IN_POINTER],3,FIND_NODE(GB_CODE_TO_SEND[GB_IN_POINTER][11]))
#END_IF
		GB_IN_POINTER = GB_IN_POINTER + 1
		IF (GB_IN_POINTER  > GB_CIRCULAR_BUFFER_SIZE)
			GB_IN_POINTER  = 1
		OFF[GB_ITR]
	}
}

DEFINE_FUNCTION INTEGER PARSE_ALL_PACKETS (CHAR RECEIVED_MESSAGE[32][255], INTEGER NUMBER_OF_COMPLETE_MESSAGES)

LOCAL_VAR VOLATILE INTEGER 	MESSAGE_PART_COUNT;
					VOLATILE INTEGER	A_MESSAGE_NOT_RECOGNISED;

{
	OFF[A_MESSAGE_NOT_RECOGNISED];
	IF (DEBUG)
		SEND_STRING 0,"'TEST Z, NUMBER_OF_COMPLETE_MESSAGES = ',ITOA(NUMBER_OF_COMPLETE_MESSAGES)";
	FOR (MESSAGE_PART_COUNT=1;MESSAGE_PART_COUNT<=NUMBER_OF_COMPLETE_MESSAGES;MESSAGE_PART_COUNT++)
	{
		IF (DEBUG)
			SEND_STRING 0,"'LENGTH_STRING(RECEIVED_MESSAGE[',ITOA(MESSAGE_PART_COUNT),'] = ',ITOA(LENGTH_STRING(RECEIVED_MESSAGE[MESSAGE_PART_COUNT]))";
		IF (LENGTH_STRING(RECEIVED_MESSAGE[MESSAGE_PART_COUNT]))
		{
			SELECT
			{
				ACTIVE (MID_STRING(RECEIVED_MESSAGE[MESSAGE_PART_COUNT],8,2) == "$00,$32") :	//SINGLE CHANNEL CONTROL
				{
					ON[GB_VALID_FEEDBACK];
		#IF_DEFINED PV_DIAGNOSTICS
					IF (DEBUG)
					{
						CALL 'SEND DIAGNOSTIC MESSAGE' ("'VALID MESSAGE RECEIVED FROM GBS DEVICE'",RECEIVED_MESSAGE[MESSAGE_PART_COUNT],3);
					}
					
					CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(FIND_NODE(RECEIVED_MESSAGE[MESSAGE_PART_COUNT][5])),') VALID MESSAGE RECEIVED FROM GBS DEVICE'",RECEIVED_MESSAGE[MESSAGE_PART_COUNT],3,FIND_NODE(RECEIVED_MESSAGE[MESSAGE_PART_COUNT][5]))
		#END_IF
					CALL 'SHOW AND PARSE AN SBUS MESSAGE' ('INTERPRETATION OF MESSAGE',RECEIVED_MESSAGE[MESSAGE_PART_COUNT]);
				}
		
				ACTIVE (MID_STRING(RECEIVED_MESSAGE[MESSAGE_PART_COUNT],8,2) == "$E0,$1C") :	//UNIVERSAL SWITCH CONTROL VIA RS485
				{
					ON[GB_VALID_FEEDBACK];
		#IF_DEFINED PV_DIAGNOSTICS
					IF (DEBUG)
					{
						CALL 'SEND DIAGNOSTIC MESSAGE' ("'VALID MESSAGE RECEIVED FROM GBS DEVICE'",RECEIVED_MESSAGE[MESSAGE_PART_COUNT],3);
					}
					
					CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(FIND_NODE(RECEIVED_MESSAGE[MESSAGE_PART_COUNT][5])),') VALID MESSAGE RECEIVED FROM GBS DEVICE'",RECEIVED_MESSAGE[MESSAGE_PART_COUNT],3,FIND_NODE(RECEIVED_MESSAGE[MESSAGE_PART_COUNT][5]))
		#END_IF
					CALL 'SHOW AND PARSE AN SBUS MESSAGE' ('INTERPRETATION OF MESSAGE',RECEIVED_MESSAGE[MESSAGE_PART_COUNT]);
				}
		
				ACTIVE (MID_STRING(RECEIVED_MESSAGE[MESSAGE_PART_COUNT],8,2) == "$E0,$17") :	//UNIVERSAL SWITCH BROADCAST VIA RS485
				{
					ON[GB_VALID_FEEDBACK];
		#IF_DEFINED PV_DIAGNOSTICS
					IF (DEBUG)
					{
						CALL 'SEND DIAGNOSTIC MESSAGE' ("'VALID MESSAGE RECEIVED FROM GBS DEVICE'",RECEIVED_MESSAGE[MESSAGE_PART_COUNT],3);
					}
					
					CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(FIND_NODE(RECEIVED_MESSAGE[MESSAGE_PART_COUNT][5])),') VALID MESSAGE RECEIVED FROM GBS DEVICE'",RECEIVED_MESSAGE[MESSAGE_PART_COUNT],3,FIND_NODE(RECEIVED_MESSAGE[MESSAGE_PART_COUNT][5]))
		#END_IF
					CALL 'SHOW AND PARSE AN SBUS MESSAGE' ('INTERPRETATION OF MESSAGE',RECEIVED_MESSAGE[MESSAGE_PART_COUNT]);
				}
		
				ACTIVE (MID_STRING(RECEIVED_MESSAGE[MESSAGE_PART_COUNT],8,2) == "$EF,$FF") :	//SCENE STATUS BROADCAST VIA RS485
				{
					ON[GB_VALID_FEEDBACK];
		#IF_DEFINED PV_DIAGNOSTICS
					IF (DEBUG)
					{
						CALL 'SEND DIAGNOSTIC MESSAGE' ('VALID SCENE STATUS BROADCAST MESSAGE RECEIVED FROM GBS DEVICE',RECEIVED_MESSAGE[MESSAGE_PART_COUNT],3);
					}
					
					CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(FIND_NODE(RECEIVED_MESSAGE[MESSAGE_PART_COUNT][5])),') VALID SCENE STATUS BROADCAST MESSAGE RECEIVED FROM GBS DEVICE'",RECEIVED_MESSAGE[MESSAGE_PART_COUNT],3,FIND_NODE(RECEIVED_MESSAGE[MESSAGE_PART_COUNT][5]))
		#END_IF
					CALL 'SHOW AND PARSE AN SBUS MESSAGE' ('INTERPRETATION OF MESSAGE',RECEIVED_MESSAGE[MESSAGE_PART_COUNT]);
				}
		
				ACTIVE (1) :
				{
		#IF_DEFINED PV_DIAGNOSTICS
					IF (DEBUG)
					{
						ON[GB_VALID_FEEDBACK];
						CALL 'SEND DIAGNOSTIC MESSAGE'  ('UNRECOGNIZED STRING RECEIVED ON GBS DEVICE',RECEIVED_MESSAGE[MESSAGE_PART_COUNT],3);
					}
					
					CALL 'SEND INDIVIDUAL DIAGNOSTIC MESSAGE' ("'(DEVICE ',ITOA(FIND_NODE(RECEIVED_MESSAGE[MESSAGE_PART_COUNT][5])),') UNRECOGNIZED STRING RECEIVED ON GBS DEVICE'",RECEIVED_MESSAGE[MESSAGE_PART_COUNT],3,FIND_NODE(RECEIVED_MESSAGE[MESSAGE_PART_COUNT][5]))
		#END_IF
					CALL 'SHOW AND PARSE AN SBUS MESSAGE' ('INTERPRETATION OF MESSAGE',RECEIVED_MESSAGE[MESSAGE_PART_COUNT]);
					ON[A_MESSAGE_NOT_RECOGNISED];
				}
			}
		}
	}
	
	RETURN A_MESSAGE_NOT_RECOGNISED;
}

(***********************************************************)
(*                STARTUP CODE GOES BELOW                  *)
(***********************************************************)
DEFINE_START

MODULE_VERSION = 3

WAIT 10
{
	IF ((!RX_COMMS_DEVICE.number) AND (RX_COMMS_DEVICE.port) AND (!TX_COMMS_DEVICE.number) AND (TX_COMMS_DEVICE.port) AND (LENGTH_STRING(GBS_TX_IP_ADDRESS)))
	{
		COMMS_MODE = IP;
	}
	ELSE IF ((TX_COMMS_DEVICE.number) AND (TX_COMMS_DEVICE.port))
	{
		COMMS_MODE = RS232;
	}

	IF (COMMS_MODE == IP)
	{
		IP_CLIENT_OPEN(TX_COMMS_DEVICE.port, GBS_TX_IP_ADDRESS, GBS_IP_PORT, 2)
		IP_MC_SERVER_OPEN(RX_COMMS_DEVICE.port, '192.168.255.255', GBS_IP_PORT)
	}
}

(***********************************************************)
(*                THE EVENTS GO BELOW                      *)
(***********************************************************)
DEFINE_EVENT

TIMELINE_EVENT[1]
{
	IF (GB_CODE_SEND_WINDOW)
	{
		OFF[GB_CODE_SEND_WINDOW]
	}
}

DATA_EVENT[vTX_COMMS_DEVICE_ARRAY]
{
	COMMAND:
  {
		LOCAL_VAR VOLATILE INTEGER vDEV_COUNT
		LOCAL_VAR VOLATILE INTEGER vDEV_FOUND

		IF (COMMS_MODE)
		{
			IF (DEBUG)
				SEND_STRING 0,"'REACHED TEST1, data.text = ',data.text"
			OFF[vDEV_COUNT]
			OFF[vDEV_FOUND]
			WHILE ((vDEV_COUNT < TOTAL_NODE_COUNT) AND (!vDEV_FOUND))
			{
				vDEV_COUNT++
				IF ((vTX_COMMS_DEVICE_ARRAY[vDEV_COUNT].number == data.device.number) AND (vTX_COMMS_DEVICE_ARRAY[vDEV_COUNT].port == data.device.port))
				{
					IF (vTX_COMMS_DEVICE_ARRAY[vDEV_COUNT].system)
					{
						IF (vTX_COMMS_DEVICE_ARRAY[vDEV_COUNT].system == data.device.system)
						{
							ON[vDEV_FOUND]
						}
					}
					ELSE
					{
						IF (data.device.system == SYSTEM_NUMBER)
						{
							ON[vDEV_FOUND]
						}
					}
				}
			}
			
			IF (vDEV_FOUND)
			{
				OFF[GB_VALID_FEEDBACK]
				GB_BUFFER = data.text
				GB_CONVERTED_COMMAND = ''
				IF (vTX_COMMS_DEVICE_ID_ARRAY[vDEV_COUNT])
				{
	#IF_DEFINED PV_DIAGNOSTICS
					IF (DEBUG)
					{
						SEND_STRING 0,"'IN COMM, A COMMAND EVENT RECEIVED ON DEVICE: ',ITOA(Data.Device.Number),':',ITOA(Data.Device.Port),':',ITOA(Data.Device.System),', WHICH REPRESENTS DEVICE_ID: ',ITOA(vTX_COMMS_DEVICE_ID_ARRAY[vDEV_COUNT])"
						SEND_STRING 0,"'COMMAND = ',data.text"
					}
	#END_IF
					CALL 'GB_PROCESS COMMAND' (vTX_COMMS_DEVICE_ID_ARRAY[vDEV_COUNT], data.text)
					IF ((GB_VALID_FEEDBACK) AND (LENGTH_STRING(GB_CONVERTED_COMMAND)))
					{
						CALL 'GB_BUFFER CODE' (GB_CONVERTED_COMMAND, 1, 0)
					}
				}
			}
		}
	}
}    

DATA_EVENT[RX_COMMS_DEVICE]
{
  STRING:
  {
		LOCAL_VAR VOLATILE INTEGER NUMBER_OF_PACKETS
		
		ON[GB_CODE_SEND_WINDOW]
		IF (TIMELINE_ACTIVE(1))
		{
			TIMELINE_KILL(1)
		}

		IF (!GB_DTR)
    {
      OFF[GB_VALID_FEEDBACK]
			GB_BUFFER = data.text
			IF (FIND_STRING(data.text,"$AA,$AA",1))
			{
				NUMBER_OF_PACKETS = BREAK_UP_AND_PROCESS_MESSAGES(data.text);
				IF (NUMBER_OF_PACKETS > MAX_NUMBER_OF_PACKETS_RECEIVED)
					MAX_NUMBER_OF_PACKETS_RECEIVED = NUMBER_OF_PACKETS;
				IF (DEBUG)
					SEND_STRING 0,"'FROM IP: NUMBER_OF_PACKETS RECEIVED / MAX_NUMBER_OF_PACKETS_RECEIVED = ',ITOA(NUMBER_OF_PACKETS),'/',ITOA(MAX_NUMBER_OF_PACKETS_RECEIVED)"
			}
			
			IF (GB_VALID_FEEDBACK)
				ON[GB_FINISHED]
    }
    ELSE
    {
      OFF[GB_VALID_FEEDBACK]
			GB_BUFFER = data.text
			IF (FIND_STRING(data.text,"$AA,$AA",1))
			{
				NUMBER_OF_PACKETS = BREAK_UP_AND_PROCESS_MESSAGES(data.text);
				IF (NUMBER_OF_PACKETS > MAX_NUMBER_OF_PACKETS_RECEIVED)
					MAX_NUMBER_OF_PACKETS_RECEIVED = NUMBER_OF_PACKETS;
				IF (DEBUG)
					SEND_STRING 0,"'FROM IP: NUMBER_OF_PACKETS RECEIVED / MAX_NUMBER_OF_PACKETS_RECEIVED = ',ITOA(NUMBER_OF_PACKETS),'/',ITOA(MAX_NUMBER_OF_PACKETS_RECEIVED)"
			}
    }  
  }

  ONLINE:
  {
		ON[GB_RX_ONLINE]
  }
}    

DATA_EVENT[TX_COMMS_DEVICE]
{
  STRING:
  {
		LOCAL_VAR VOLATILE INTEGER NUMBER_OF_PACKETS
		
		ON[GB_CODE_SEND_WINDOW]
		IF (TIMELINE_ACTIVE(1))
		{
			TIMELINE_KILL(1)
		}

		IF (!GB_DTR)
    {
      OFF[GB_VALID_FEEDBACK]
			GB_BUFFER = data.text
			IF (DEBUG)
				CALL 'SEND DIAGNOSTIC MESSAGE' ("'COMMS_DEVICE'",data.text,3)
			IF (FIND_STRING(data.text,"$AA,$AA",1))
			{
				NUMBER_OF_PACKETS = BREAK_UP_AND_PROCESS_MESSAGES(data.text);
				IF (NUMBER_OF_PACKETS > MAX_NUMBER_OF_PACKETS_RECEIVED)
					MAX_NUMBER_OF_PACKETS_RECEIVED = NUMBER_OF_PACKETS;
				IF (DEBUG)
					SEND_STRING 0,"'FROM RS485: NUMBER_OF_PACKETS RECEIVED / MAX_NUMBER_OF_PACKETS_RECEIVED = ',ITOA(NUMBER_OF_PACKETS),'/',ITOA(MAX_NUMBER_OF_PACKETS_RECEIVED)"
			}
			
			IF (GB_VALID_FEEDBACK)
				ON[GB_FINISHED]
    }
    ELSE
    {
      OFF[GB_VALID_FEEDBACK]
			GB_BUFFER = data.text
			IF (DEBUG)
				CALL 'SEND DIAGNOSTIC MESSAGE' ("'COMMS_DEVICE SPONT'",data.text,3)
			IF (FIND_STRING(data.text,"$AA,$AA",1))
			{
				NUMBER_OF_PACKETS = BREAK_UP_AND_PROCESS_MESSAGES(data.text);
				IF (NUMBER_OF_PACKETS > MAX_NUMBER_OF_PACKETS_RECEIVED)
					MAX_NUMBER_OF_PACKETS_RECEIVED = NUMBER_OF_PACKETS;
				IF (DEBUG)
					SEND_STRING 0,"'FROM RS485: NUMBER_OF_PACKETS RECEIVED / MAX_NUMBER_OF_PACKETS_RECEIVED = ',ITOA(NUMBER_OF_PACKETS),'/',ITOA(MAX_NUMBER_OF_PACKETS_RECEIVED)"
			}
    }  
  }

  ONLINE:
  {
		ON[GB_TX_ONLINE]
		OFF[GB_SPONT_DETECTED]
		OFF[GB_PROCESS_SPONT_FBACK]
		OFF[GB_PROCESSED_SPONT_FBACK]
		GB_DTR = 1
		GB_ITR = 1
		GB_IN_POINTER = 1
		GB_OUT_POINTER = 1
		GB_LAST_ONLINE_TIME = TIME
		GB_LAST_ONLINE_DATE = DATE
		WAIT 10
		{
			IF ((TX_COMMS_DEVICE.number) AND (TX_COMMS_DEVICE.port) AND (!RX_COMMS_DEVICE.port) AND (!LENGTH_STRING(GBS_TX_IP_ADDRESS)))
			{
				SEND_COMMAND TX_COMMS_DEVICE,'SET BAUD 9600,E,8,1 485 ENABLE'
				WAIT 10
				{
					SEND_COMMAND TX_COMMS_DEVICE,'GET BAUD'
				}
			}
		}
  }
}    

(***********************************************************)
(*            THE ACTUAL PROGRAM GOES BELOW                *)
(***********************************************************)
DEFINE_PROGRAM

IF (GB_TX_ONLINE)
{
	CALL 'GB_SEND FROM BUFFER'
	CALL 'GB_MANAGE CODE_SEND_WINDOW'
}

(***********************************************************)
(*                     END OF PROGRAM                      *)
(*        DO NOT PUT ANY CODE BELOW THIS COMMENT           *)
(***********************************************************)
