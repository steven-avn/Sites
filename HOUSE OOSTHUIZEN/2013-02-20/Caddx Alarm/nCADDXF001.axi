PROGRAM_NAME='nCADDXF001'

(***********************************************************)
(*          DEVICE NUMBER DEFINITIONS GO BELOW             *)
(***********************************************************)
DEFINE_DEVICE

(***********************************************************)
(*               CONSTANT DEFINITIONS GO BELOW             *)
(***********************************************************)
DEFINE_CONSTANT

(***********************************************************)
(*              DATA TYPE DEFINITIONS GO BELOW             *)
(***********************************************************)
DEFINE_TYPE

(***********************************************************)
(*               VARIABLE DEFINITIONS GO BELOW             *)
(***********************************************************)
DEFINE_VARIABLE  
INTEGER CA_OUTER_COUNT
INTEGER CA_GLOBAL_COUNT1
INTEGER CA_GLOBAL_COUNT2

(***********************************************************)
(*               LATCHING DEFINITIONS GO BELOW             *)
(***********************************************************)
DEFINE_LATCHING

(***********************************************************)
(*       MUTUALLY EXCLUSIVE DEFINITIONS GO BELOW           *)
(***********************************************************)
DEFINE_MUTUALLY_EXCLUSIVE

(***********************************************************)
(*        SUBROUTINE/FUNCTION DEFINITIONS GO BELOW         *)
(***********************************************************)
DEFINE_CALL 'CA_MANAGE CODE_SEND_WINDOW' (INTEGER CADDX)
{
#IF_DEFINED CA_CD1
  IF ((CADDX = 1) AND (CAI[1].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 1'
    {
      OFF[CAI[1].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD2
  IF ((CADDX = 2) AND (CAI[2].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 2'
    {
      OFF[CAI[2].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD3
  IF ((CADDX = 3) AND (CAI[3].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 3'
    {
      OFF[CAI[3].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD4
  IF ((CADDX = 4) AND (CAI[4].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 4'
    {
      OFF[CAI[4].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD5
  IF ((CADDX = 5) AND (CAI[5].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 5'
    {
      OFF[CAI[5].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD6
  IF ((CADDX = 6) AND (CAI[6].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 6'
    {
      OFF[CAI[6].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD7
  IF ((CADDX = 7) AND (CAI[7].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 7'
    {
      OFF[CAI[7].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD8
  IF ((CADDX = 8) AND (CAI[8].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 8'
    {
      OFF[CAI[8].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD9
  IF ((CADDX = 9) AND (CAI[9].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 9'
    {
      OFF[CAI[9].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD10
  IF ((CADDX = 10) AND (CAI[10].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 10'
    {
      OFF[CAI[10].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD11
  IF ((CADDX = 11) AND (CAI[11].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 11'
    {
      OFF[CAI[11].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD12
  IF ((CADDX = 12) AND (CAI[12].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 12'
    {
      OFF[CAI[12].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD13
  IF ((CADDX = 13) AND (CAI[13].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 13'
    {
      OFF[CAI[13].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD14
  IF ((CADDX = 14) AND (CAI[14].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 14'
    {
      OFF[CAI[14].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD15
  IF ((CADDX = 15) AND (CAI[15].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 15'
    {
      OFF[CAI[15].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD16
  IF ((CADDX = 16) AND (CAI[16].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 16'
    {
      OFF[CAI[16].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD17
  IF ((CADDX = 17) AND (CAI[17].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 17'
    {
      OFF[CAI[17].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD18
  IF ((CADDX = 18) AND (CAI[18].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 18'
    {
      OFF[CAI[18].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD19
  IF ((CADDX = 19) AND (CAI[19].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 19'
    {
      OFF[CAI[19].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD20
  IF ((CADDX = 20) AND (CAI[20].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 20'
    {
      OFF[CAI[20].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD21
  IF ((CADDX = 21) AND (CAI[21].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 21'
    {
      OFF[CAI[21].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD22
  IF ((CADDX = 22) AND (CAI[22].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 22'
    {
      OFF[CAI[22].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD23
  IF ((CADDX = 23) AND (CAI[23].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 23'
    {
      OFF[CAI[23].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD24
  IF ((CADDX = 24) AND (CAI[24].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 24'
    {
      OFF[CAI[24].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD25
  IF ((CADDX = 25) AND (CAI[25].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 25'
    {
      OFF[CAI[25].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD26
  IF ((CADDX = 26) AND (CAI[26].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 26'
    {
      OFF[CAI[26].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD27
  IF ((CADDX = 27) AND (CAI[27].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 27'
    {
      OFF[CAI[27].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD28
  IF ((CADDX = 28) AND (CAI[28].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 28'
    {
      OFF[CAI[28].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD29
  IF ((CADDX = 29) AND (CAI[29].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 29'
    {
      OFF[CAI[29].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD30
  IF ((CADDX = 30) AND (CAI[30].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 30'
    {
      OFF[CAI[30].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD31
  IF ((CADDX = 31) AND (CAI[31].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 31'
    {
      OFF[CAI[31].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD32
  IF ((CADDX = 32) AND (CAI[32].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 32'
    {
      OFF[CAI[32].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD33
  IF ((CADDX = 33) AND (CAI[33].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 33'
    {
      OFF[CAI[33].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD34
  IF ((CADDX = 34) AND (CAI[34].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 34'
    {
      OFF[CAI[34].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD35
  IF ((CADDX = 35) AND (CAI[35].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 35'
    {
      OFF[CAI[35].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD36
  IF ((CADDX = 36) AND (CAI[36].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 36'
    {
      OFF[CAI[36].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD37
  IF ((CADDX = 37) AND (CAI[37].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 37'
    {
      OFF[CAI[37].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD38
  IF ((CADDX = 38) AND (CAI[38].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 38'
    {
      OFF[CAI[38].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD39
  IF ((CADDX = 39) AND (CAI[39].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 39'
    {
      OFF[CAI[39].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD40
  IF ((CADDX = 40) AND (CAI[40].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 40'
    {
      OFF[CAI[40].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD41
  IF ((CADDX = 41) AND (CAI[41].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 41'
    {
      OFF[CAI[41].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD42
  IF ((CADDX = 42) AND (CAI[42].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 42'
    {
      OFF[CAI[42].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD43
  IF ((CADDX = 43) AND (CAI[43].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 43'
    {
      OFF[CAI[43].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD44
  IF ((CADDX = 44) AND (CAI[44].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 44'
    {
      OFF[CAI[44].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD45
  IF ((CADDX = 45) AND (CAI[45].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 45'
    {
      OFF[CAI[45].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD46
  IF ((CADDX = 46) AND (CAI[46].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 46'
    {
      OFF[CAI[46].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD47
  IF ((CADDX = 47) AND (CAI[47].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 47'
    {
      OFF[CAI[47].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD48
  IF ((CADDX = 48) AND (CAI[48].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 48'
    {
      OFF[CAI[48].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD49
  IF ((CADDX = 49) AND (CAI[49].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 49'
    {
      OFF[CAI[49].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
#IF_DEFINED CA_CD50
  IF ((CADDX = 50) AND (CAI[50].CA_CODE_SEND_WINDOW))
  {
    WAIT CA_INTER_COMMS_DELAY 'CA_SEND CODE WINDOW 50'
    {
      OFF[CAI[50].CA_CODE_SEND_WINDOW]
    }
  }
#END_IF
}


DEFINE_CALL 'CA_CANCEL WAIT' (INTEGER CADDX)
{
#IF_DEFINED CA_CD1
  IF (CADDX = 1)
  {
    CANCEL_WAIT 'CA_SEND CODE WINDOW 1'
  }  
#END_IF
#IF_DEFINED CA_CD2
  IF (CADDX = 2)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 2'
#END_IF
#IF_DEFINED CA_CD3
  IF (CADDX = 3)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 3'
#END_IF
#IF_DEFINED CA_CD4
  IF (CADDX = 4)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 4'
#END_IF
#IF_DEFINED CA_CD5
  IF (CADDX = 5)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 5'
#END_IF
#IF_DEFINED CA_CD6
  IF (CADDX = 6)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 6'
#END_IF
#IF_DEFINED CA_CD7
  IF (CADDX = 7)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 7'
#END_IF
#IF_DEFINED CA_CD8
  IF (CADDX = 8)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 8'
#END_IF
#IF_DEFINED CA_CD9
  IF (CADDX = 9)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 9'
#END_IF
#IF_DEFINED CA_CD10
  IF (CADDX = 10)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 10'
#END_IF
#IF_DEFINED CA_CD11
  IF (CADDX = 11)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 11'
#END_IF
#IF_DEFINED CA_CD12
  IF (CADDX = 12)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 12'
#END_IF
#IF_DEFINED CA_CD13
  IF (CADDX = 13)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 13'
#END_IF
#IF_DEFINED CA_CD14
  IF (CADDX = 14)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 14'
#END_IF
#IF_DEFINED CA_CD15
  IF (CADDX = 15)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 15'
#END_IF
#IF_DEFINED CA_CD16
  IF (CADDX = 16)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 16'
#END_IF
#IF_DEFINED CA_CD17
  IF (CADDX = 17)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 17'
#END_IF
#IF_DEFINED CA_CD18
  IF (CADDX = 18)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 18'
#END_IF
#IF_DEFINED CA_CD19
  IF (CADDX = 19)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 19'
#END_IF
#IF_DEFINED CA_CD20
  IF (CADDX = 20)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 20'
#END_IF
#IF_DEFINED CA_CD21
  IF (CADDX = 21)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 21'
#END_IF
#IF_DEFINED CA_CD22
  IF (CADDX = 22)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 22'
#END_IF
#IF_DEFINED CA_CD23
  IF (CADDX = 23)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 23'
#END_IF
#IF_DEFINED CA_CD24
  IF (CADDX = 24)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 24'
#END_IF
#IF_DEFINED CA_CD25
  IF (CADDX = 25)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 25'
#END_IF
#IF_DEFINED CA_CD26
  IF (CADDX = 26)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 26'
#END_IF
#IF_DEFINED CA_CD27
  IF (CADDX = 27)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 27'
#END_IF
#IF_DEFINED CA_CD28
  IF (CADDX = 28)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 28'
#END_IF
#IF_DEFINED CA_CD29
  IF (CADDX = 29)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 29'
#END_IF
#IF_DEFINED CA_CD30
  IF (CADDX = 30)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 30'
#END_IF
#IF_DEFINED CA_CD31
  IF (CADDX = 31)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 31'
#END_IF
#IF_DEFINED CA_CD32
  IF (CADDX = 32)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 32'
#END_IF
#IF_DEFINED CA_CD33
  IF (CADDX = 33)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 33'
#END_IF
#IF_DEFINED CA_CD34
  IF (CADDX = 34)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 34'
#END_IF
#IF_DEFINED CA_CD35
  IF (CADDX = 35)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 35'
#END_IF
#IF_DEFINED CA_CD36
  IF (CADDX = 36)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 36'
#END_IF
#IF_DEFINED CA_CD37
  IF (CADDX = 37)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 37'
#END_IF
#IF_DEFINED CA_CD38
  IF (CADDX = 38)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 38'
#END_IF
#IF_DEFINED CA_CD39
  IF (CADDX = 39)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 39'
#END_IF
#IF_DEFINED CA_CD40
  IF (CADDX = 40)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 40'
#END_IF
#IF_DEFINED CA_CD41
  IF (CADDX = 41)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 41'
#END_IF
#IF_DEFINED CA_CD42
  IF (CADDX = 42)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 42'
#END_IF
#IF_DEFINED CA_CD43
  IF (CADDX = 43)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 43'
#END_IF
#IF_DEFINED CA_CD44
  IF (CADDX = 44)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 44'
#END_IF
#IF_DEFINED CA_CD45
  IF (CADDX = 45)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 45'
#END_IF
#IF_DEFINED CA_CD46
  IF (CADDX = 46)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 46'
#END_IF
#IF_DEFINED CA_CD47
  IF (CADDX = 47)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 47'
#END_IF
#IF_DEFINED CA_CD48
  IF (CADDX = 48)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 48'
#END_IF
#IF_DEFINED CA_CD49
  IF (CADDX = 49)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 49'
#END_IF
#IF_DEFINED CA_CD50
  IF (CADDX = 50)
    CANCEL_WAIT 'CA_SEND CODE WINDOW 50'
#END_IF
}

DEFINE_CALL 'PROGRAM DATA REQUEST'(INTEGER CADDX,CHAR DEVICE_BUSS_ADDRESS[2])
{
	CALL 'CALCULATE CHECKSUM AND SEND TO BUFFER'(0,CADDX,5,'04','30',DEVICE_BUSS_ADDRESS,'00','00','','','','')
}

DEFINE_CALL 'STAY'(INTEGER CADDX,CHAR PARTITION_MASK[2])
{
	CALL 'SECONDARY KEYPAD FUNCTION'(CADDX,'00',PARTITION_MASK)
}

DEFINE_CALL 'CHIME'(INTEGER CADDX,CHAR PARTITION_MASK[2])
{
	CALL 'SECONDARY KEYPAD FUNCTION'(CADDX,'01',PARTITION_MASK)
}

DEFINE_CALL 'EXIT'(INTEGER CADDX,CHAR PARTITION_MASK[2])
{
	CALL 'SECONDARY KEYPAD FUNCTION'(CADDX,'02',PARTITION_MASK)
}

DEFINE_CALL 'BYPASS INTERIORS'(INTEGER CADDX,CHAR PARTITION_MASK[2])
{
	CALL 'SECONDARY KEYPAD FUNCTION'(CADDX,'03',PARTITION_MASK)
}

DEFINE_CALL 'FIRE PANIC'(INTEGER CADDX,CHAR PARTITION_MASK[2])
{
	CALL 'SECONDARY KEYPAD FUNCTION'(CADDX,'04',PARTITION_MASK)
}

DEFINE_CALL 'MEDICAL PANIC'(INTEGER CADDX,CHAR PARTITION_MASK[2])
{
	CALL 'SECONDARY KEYPAD FUNCTION'(CADDX,'05',PARTITION_MASK)
}

DEFINE_CALL 'POLICE PANIC'(INTEGER CADDX,CHAR PARTITION_MASK[2])
{
	CALL 'SECONDARY KEYPAD FUNCTION'(CADDX,'06',PARTITION_MASK)
}

DEFINE_CALL 'SMOKE DETECTOR RESET'(INTEGER CADDX,CHAR PARTITION_MASK[2])
{
	CALL 'SECONDARY KEYPAD FUNCTION'(CADDX,'07',PARTITION_MASK)
}

DEFINE_CALL 'AUTO CALLBACK DOWNLOAD'(INTEGER CADDX,CHAR PARTITION_MASK[2])
{
	CALL 'SECONDARY KEYPAD FUNCTION'(CADDX,'08',PARTITION_MASK)
}

DEFINE_CALL 'MANUAL PICKUP DOWNLOAD'(INTEGER CADDX,CHAR PARTITION_MASK[2])
{
	CALL 'SECONDARY KEYPAD FUNCTION'(CADDX,'09',PARTITION_MASK)
}

DEFINE_CALL 'ENABLE SILENT EXIT'(INTEGER CADDX,CHAR PARTITION_MASK[2])
{
	CALL 'SECONDARY KEYPAD FUNCTION'(CADDX,'0A',PARTITION_MASK)
}

DEFINE_CALL 'PERFORM TEST'(INTEGER CADDX,CHAR PARTITION_MASK[2])
{
	CALL 'SECONDARY KEYPAD FUNCTION'(CADDX,'0B',PARTITION_MASK)
}

DEFINE_CALL 'GROUP BYPASS'(INTEGER CADDX,CHAR PARTITION_MASK[2])
{
	CALL 'SECONDARY KEYPAD FUNCTION'(CADDX,'0C',PARTITION_MASK)
}

DEFINE_CALL 'AUXILIARY FUNCTION 1'(INTEGER CADDX,CHAR PARTITION_MASK[2])
{
	CALL 'SECONDARY KEYPAD FUNCTION'(CADDX,'0D',PARTITION_MASK)
}

DEFINE_CALL 'AUXILIARY FUNCTION 2'(INTEGER CADDX,CHAR PARTITION_MASK[2])
{
	CALL 'SECONDARY KEYPAD FUNCTION'(CADDX,'0E',PARTITION_MASK)
}

DEFINE_CALL 'START KEYPAD SOUNDER'(INTEGER CADDX,CHAR PARTITION_MASK[2])
{
	CALL 'SECONDARY KEYPAD FUNCTION'(CADDX,'0F',PARTITION_MASK)
}

DEFINE_CALL 'SECONDARY KEYPAD FUNCTION'(INTEGER CADDX,CHAR FUNCTION_PERFORMED[2],CHAR PARTITION_MASK[2])
{
	CALL 'CALCULATE CHECKSUM AND SEND TO BUFFER'(0,CADDX,4,'03','3E',FUNCTION_PERFORMED,PARTITION_MASK,'','','','','')
}

DEFINE_CALL 'STOP WALK TEST MODE WITH PIN'(INTEGER CADDX,CHAR PIN_DIGIT1_AND2[2],CHAR PIN_DIGIT3_AND4[2],CHAR PIN_DIGIT5_AND6[2],CHAR PARTITION_MASK[2])
{
	CALL 'PRIMARY KEYPAD FUNCTION WITH PIN'(CADDX,PIN_DIGIT1_AND2,PIN_DIGIT3_AND4,PIN_DIGIT5_AND6,'07',PARTITION_MASK)
}

DEFINE_CALL 'START WALK TEST MODE WITH PIN'(INTEGER CADDX,CHAR PIN_DIGIT1_AND2[2],CHAR PIN_DIGIT3_AND4[2],CHAR PIN_DIGIT5_AND6[2],CHAR PARTITION_MASK[2])
{
	CALL 'PRIMARY KEYPAD FUNCTION WITH PIN'(CADDX,PIN_DIGIT1_AND2,PIN_DIGIT3_AND4,PIN_DIGIT5_AND6,'06',PARTITION_MASK)
}

DEFINE_CALL 'INITIATE AUTO ARM WITH PIN'(INTEGER CADDX,CHAR PIN_DIGIT1_AND2[2],CHAR PIN_DIGIT3_AND4[2],CHAR PIN_DIGIT5_AND6[2],CHAR PARTITION_MASK[2])
{
	CALL 'PRIMARY KEYPAD FUNCTION WITH PIN'(CADDX,PIN_DIGIT1_AND2,PIN_DIGIT3_AND4,PIN_DIGIT5_AND6,'05',PARTITION_MASK)
}

DEFINE_CALL 'TURN OFF ANY SOUNDER OR ALARM WITH PIN'(INTEGER CADDX,CHAR PIN_DIGIT1_AND2[2],CHAR PIN_DIGIT3_AND4[2],CHAR PIN_DIGIT5_AND6[2],CHAR PARTITION_MASK[2])
{
	CALL 'PRIMARY KEYPAD FUNCTION WITH PIN'(CADDX,PIN_DIGIT1_AND2,PIN_DIGIT3_AND4,PIN_DIGIT5_AND6,'00',PARTITION_MASK)
}

DEFINE_CALL 'CANCEL WITH PIN'(INTEGER CADDX,CHAR PIN_DIGIT1_AND2[2],CHAR PIN_DIGIT3_AND4[2],CHAR PIN_DIGIT5_AND6[2],CHAR PARTITION_MASK[2])
{
	CALL 'PRIMARY KEYPAD FUNCTION WITH PIN'(CADDX,PIN_DIGIT1_AND2,PIN_DIGIT3_AND4,PIN_DIGIT5_AND6,'04',PARTITION_MASK)
}

DEFINE_CALL 'DISARM ALARM WITH PIN'(INTEGER CADDX,CHAR PIN_DIGIT1_AND2[2],CHAR PIN_DIGIT3_AND4[2],CHAR PIN_DIGIT5_AND6[2],CHAR PARTITION_MASK[2])
{
	CALL 'PRIMARY KEYPAD FUNCTION WITH PIN'(CADDX,PIN_DIGIT1_AND2,PIN_DIGIT3_AND4,PIN_DIGIT5_AND6,'01',PARTITION_MASK)
}

DEFINE_CALL 'ARM ALARM WITH PIN IN AWAY MODE'(INTEGER CADDX,CHAR PIN_DIGIT1_AND2[2],CHAR PIN_DIGIT3_AND4[2],CHAR PIN_DIGIT5_AND6[2],CHAR PARTITION_MASK[2])
{
	CALL 'PRIMARY KEYPAD FUNCTION WITH PIN'(CADDX,PIN_DIGIT1_AND2,PIN_DIGIT3_AND4,PIN_DIGIT5_AND6,'02',PARTITION_MASK)
}

DEFINE_CALL 'ARM ALARM WITH PIN IN STAY MODE'(INTEGER CADDX,CHAR PIN_DIGIT1_AND2[2],CHAR PIN_DIGIT3_AND4[2],CHAR PIN_DIGIT5_AND6[2],CHAR PARTITION_MASK[2])
{
	CALL 'PRIMARY KEYPAD FUNCTION WITH PIN'(CADDX,PIN_DIGIT1_AND2,PIN_DIGIT3_AND4,PIN_DIGIT5_AND6,'02',PARTITION_MASK)
}

DEFINE_CALL 'PRIMARY KEYPAD FUNCTION WITH PIN'(INTEGER CADDX,CHAR PIN_DIGIT1_AND2[2],CHAR PIN_DIGIT3_AND4[2],CHAR PIN_DIGIT5_AND6[2],CHAR FUNCTION_PERFORMED[2],CHAR PARTITION_MASK[2])
{
	CALL 'CALCULATE CHECKSUM AND SEND TO BUFFER'(0,CADDX,7, '06' , '3C' ,PIN_DIGIT1_AND2 ,PIN_DIGIT3_AND4 ,PIN_DIGIT5_AND6 ,FUNCTION_PERFORMED,PARTITION_MASK,'','')
}

DEFINE_CALL 'INTERFACE CONFIGURATION MESSAGE REQUEST'(INTEGER CADDX)
{
	CALL 'CALCULATE CHECKSUM AND SEND TO BUFFER'(1,CADDX,2,'01','21','','','','','','','')
}

DEFINE_CALL 'ZONE NAME REQUEST'(INTEGER CADDX,CHAR NUMBER_OF_ZONE[2]) // NB '00' = ZONE 1 AND '01' = ZONE 2 FOR NUMBER_OF_ZONE
{
	CALL 'CALCULATE CHECKSUM AND SEND TO BUFFER'(1,CADDX,3,'02','23',NUMBER_OF_ZONE,'','','','','','') 
}

DEFINE_CALL 'ARM ALARM WITHOUT PIN IN AWAY MODE'(INTEGER CADDX,CHAR PARTITION_MASK[2],CHAR NUMBER_OF_USER[2]) 
{
	CALL 'PRIMARY KEYPAD FUNCTION WITHOUT PIN'(CADDX,'02',PARTITION_MASK,NUMBER_OF_USER) 
}

DEFINE_CALL 'ARM ALARM WITHOUT PIN IN STAY MODE'(INTEGER CADDX,CHAR PARTITION_MASK[2],CHAR NUMBER_OF_USER[2]) 
{
	CALL 'PRIMARY KEYPAD FUNCTION WITHOUT PIN'(CADDX,'03',PARTITION_MASK,NUMBER_OF_USER) 
}

DEFINE_CALL 'DISARM ALARM WITHOUT PIN'(INTEGER CADDX,CHAR PARTITION_MASK[2],CHAR NUMBER_OF_USER[2]) 
{
	CALL 'PRIMARY KEYPAD FUNCTION WITHOUT PIN'(CADDX,'01',PARTITION_MASK,NUMBER_OF_USER) 
}

DEFINE_CALL 'TURN OFF ANY SOUNDER OR ALARM WITHOUT PIN'(INTEGER CADDX,CHAR PARTITION_MASK[2],CHAR NUMBER_OF_USER[2]) 
{
	CALL 'PRIMARY KEYPAD FUNCTION WITHOUT PIN'(CADDX,'00',PARTITION_MASK,NUMBER_OF_USER) 
}

DEFINE_CALL 'CANCEL WITHOUT PIN'(INTEGER CADDX,CHAR PARTITION_MASK[2],CHAR NUMBER_OF_USER[2]) 
{
	CALL 'PRIMARY KEYPAD FUNCTION WITHOUT PIN'(CADDX,'04',PARTITION_MASK,NUMBER_OF_USER) 
}

DEFINE_CALL 'INITIATE AUTO ARM WITHOUT PIN'(INTEGER CADDX,CHAR PARTITION_MASK[2],CHAR NUMBER_OF_USER[2]) 
{
	CALL 'PRIMARY KEYPAD FUNCTION WITHOUT PIN'(CADDX,'05',PARTITION_MASK,NUMBER_OF_USER) 
}

DEFINE_CALL 'START WALK TEST MODE WITHOUT PIN'(INTEGER CADDX,CHAR PARTITION_MASK[2],CHAR NUMBER_OF_USER[2]) 
{
	CALL 'PRIMARY KEYPAD FUNCTION WITHOUT PIN'(CADDX,'06',PARTITION_MASK,NUMBER_OF_USER) 
}

DEFINE_CALL 'STOP WALK TEST MODE WITHOUT PIN'(INTEGER CADDX,CHAR PARTITION_MASK[2],CHAR NUMBER_OF_USER[2]) 
{
	CALL 'PRIMARY KEYPAD FUNCTION WITHOUT PIN'(CADDX,'07',PARTITION_MASK,NUMBER_OF_USER) 
}

DEFINE_CALL 'PRIMARY KEYPAD FUNCTION WITHOUT PIN'(INTEGER CADDX,CHAR FUNCTION_PERFORMED[2],CHAR PARTITION_MASK[2],CHAR NUMBER_OF_USER[2])// NB PARTITION_MASK = BIT 0 = PERFORM ON PARTITION 1
{														    																																										//                          BIT 1 = PERFORM ON PARTITION 2
	CALL 'CALCULATE CHECKSUM AND SEND TO BUFFER'(0,CADDX,5, '04' , '3D' ,FUNCTION_PERFORMED,PARTITION_MASK,NUMBER_OF_USER,'','','','') //         BIT 2 = PERFORM ON PARTITION 3
}														     																																										//                          BIT 3 = PERFORM ON PARTITION 4	
																																																										//                          BIT 4 = PERFORM ON PARTITION 5
																																																									  //                          BIT 5 = PERFORM ON PARTITION 6	
																																																										//                          BIT 6 = PERFORM ON PARTITION 7
																																																										//                          BIT 7 = PERFORM ON PARTITION 8

DEFINE_CALL 'ZONE BYPASS TOGGLE'(INTEGER CADDX,CHAR NUMBER_OF_ZONE[2]) // NB '00' = ZONE 1 AND '01' = ZONE 2 FOR NUMBER_OF_ZONE
{
	CALL 'CALCULATE CHECKSUM AND SEND TO BUFFER'(0,CADDX,3,'02','3F',NUMBER_OF_ZONE,'','','','','','')
}

DEFINE_CALL 'USER INFO REQUEST WITHOUT PIN'(INTEGER CADDX,CHAR NUMBER_OF_USER[2])
{
	CALL 'CALCULATE CHECKSUM AND SEND TO BUFFER'(1,CADDX,3, '02' , '33' ,NUMBER_OF_USER,'','','','','','')
}

DEFINE_CALL 'ZONE STATUS REQUEST'(INTEGER CADDX,CHAR NUMBER_OF_ZONE[2])
{
 CALL 'CALCULATE CHECKSUM AND SEND TO BUFFER'(1,CADDX,3,'02','24',NUMBER_OF_ZONE,'','','','','','')
}

DEFINE_CALL 'PARTITION STATUS REQUEST'(INTEGER CADDX,CHAR PARTITION_NUMBER[2]) 
{
	CALL 'CALCULATE CHECKSUM AND SEND TO BUFFER'(1,CADDX,3, '02' , '26' ,PARTITION_NUMBER,'' ,'','','','','')// '00' = PARTITION1
}	

DEFINE_CALL 'PARTITIONS SNAPSHOT REQUEST'(INTEGER CADDX)
{
	CALL 'CALCULATE CHECKSUM AND SEND TO BUFFER'(1,CADDX,2, '01' , '27' ,'' ,'' ,'','','','','')
}

DEFINE_CALL 'SYSTEM STATUS REQUEST'(INTEGER CADDX)
{
	CALL 'CALCULATE CHECKSUM AND SEND TO BUFFER'(1,CADDX,2,'01','28','','','','','','','') 
}

DEFINE_CALL 'LOG EVENT REQUEST'(INTEGER CADDX,CHAR NUMBER_OF_EVENT[2])
{
  CALL 'CALCULATE CHECKSUM AND SEND TO BUFFER'(1,CADDX,3,'02','2A',NUMBER_OF_EVENT,'','','','','','')   
}

DEFINE_CALL 'ZONES SNAPSHOT REQUEST'(INTEGER CADDX,CHAR ZONE_NUMBER_OFFSET[2])
{
	CALL 'CALCULATE CHECKSUM AND SEND TO BUFFER'(1,CADDX,3,'02','25',ZONE_NUMBER_OFFSET,'','','','','','') // NB - ZONE NUMBER OFFSET . '00' = START AT ZONE 1
}

DEFINE_CALL 'SET USER CODE COMMAND WITHOUT PIN' (INTEGER CADDX,CHAR NUMBER_OF_USER[2],CHAR PIN_DIGIT1_AND2[2],CHAR PIN_DIGIT3_AND4[2],CHAR PIN_DIGIT5_AND6[2])
{
	CALL 'CALCULATE CHECKSUM AND SEND TO BUFFER'(1,CADDX,6,'05','35',NUMBER_OF_USER,PIN_DIGIT1_AND2,PIN_DIGIT3_AND4,PIN_DIGIT5_AND6,'','','')
}

DEFINE_CALL 'SET USER CODE COMMAND WITH PIN' (INTEGER CADDX,CHAR MASTER_PIN_DIGIT1_AND2[2],CHAR MASTER_PIN_DIGIT3_AND4[2],CHAR MASTER_PIN_DIGIT5_AND6[2],CHAR NUMBER_OF_USER[2],CHAR PIN_DIGIT1_AND2[2],CHAR PIN_DIGIT3_AND4[2],CHAR PIN_DIGIT5_AND6[2])
{
	CALL 'CALCULATE CHECKSUM AND SEND TO BUFFER'(1,CADDX,9,'08','34',MASTER_PIN_DIGIT1_AND2,MASTER_PIN_DIGIT3_AND4,MASTER_PIN_DIGIT5_AND6,NUMBER_OF_USER,PIN_DIGIT1_AND2,PIN_DIGIT3_AND4,PIN_DIGIT5_AND6)//NB!!! - THIS COMMAND IS NOT WORKING!!! DON'T KNOW WHY !!!
}

DEFINE_CALL 'SET CLOCK/CALENDAR COMMAND' (INTEGER CADDX)
{
	CALL 'CALCULATE CHECKSUM AND SEND TO BUFFER'(0,CADDX,8,'07','3B','06','05','13','0D','2D','06','')
}



DEFINE_CALL 'CALCULATE CHECKSUM AND SEND TO BUFFER' (INTEGER FEEDBACK_NEEDED,INTEGER CADDX,INTEGER BYTECOUNT,CHAR LENGTHBYTE[2],CHAR FIRSTMESSAGEBYTE[2],CHAR SECONDMESSAGEBYTE[2],CHAR THIRDMESSAGEBYTE[2],CHAR FOURTHMESSAGEBYTE[2],CHAR FIFTHMESSAGEBYTE[2],CHAR SIXTHMESSAGEBYTE[2],CHAR SEVENTHMESSAGEBYTE[2],CHAR EIGHTHMESSAGEBYTE[2])

LOCAL_VAR INTEGER i
SINTEGER SUM1
SINTEGER SUM2
LOCAL_VAR INTEGER BYTEARRAY[9]



{

    BYTEARRAY[1] = HEXTOI(LENGTHBYTE)
    BYTEARRAY[2] = HEXTOI(FIRSTMESSAGEBYTE)
    BYTEARRAY[3] = HEXTOI(SECONDMESSAGEBYTE)
    BYTEARRAY[4] = HEXTOI(THIRDMESSAGEBYTE)
    BYTEARRAY[5] = HEXTOI(FOURTHMESSAGEBYTE)  
    BYTEARRAY[6] = HEXTOI(FIFTHMESSAGEBYTE)
    BYTEARRAY[7] = HEXTOI(SIXTHMESSAGEBYTE)
    BYTEARRAY[8] = HEXTOI(SEVENTHMESSAGEBYTE)
    BYTEARRAY[9] = HEXTOI(EIGHTHMESSAGEBYTE)
    


    SUM1 = 0
    SUM2 = 0
    
    FOR(i = 1 ; i <= BYTECOUNT ; i++)
    {
    IF((255 - SUM1) < TYPE_CAST((BYTEARRAY[i])))
	{
	    SUM1 = SUM1 + 1
	}
	SUM1 = SUM1 + TYPE_CAST(BYTEARRAY[i])
	IF(SUM1 = 255)
	    {
		SUM1 = 0
	    }
	    ELSE IF((255 - SUM2) < (SUM1))
		{
		    SUM2 = SUM2 + 1
		}
		SUM2 = SUM2 + SUM1
		IF(SUM2 =255)
		    {
			SUM2 = 0
		    }
				WHILE(SUM1 > 255)
			    {
				SUM1 = SUM1 - TYPE_CAST(256)
			    }
			    WHILE(SUM2 > 255)
				{
				    SUM2 = SUM2 - TYPE_CAST(256)
				}				
                }
//				WHILE(SUM1 > 255)
//			    {
//				SUM1 = SUM1 - 256
//			    }
//			    WHILE(SUM2 > 255)
//				{
//				    SUM2 = SUM2 - 256
//				}			    
CALL 'CA_BUFFER CODE' (CADDX,"$0A,LENGTHBYTE,FIRSTMESSAGEBYTE,SECONDMESSAGEBYTE,THIRDMESSAGEBYTE,FOURTHMESSAGEBYTE,FIFTHMESSAGEBYTE,SIXTHMESSAGEBYTE,SEVENTHMESSAGEBYTE,EIGHTHMESSAGEBYTE,ITOHEX(SUM1),ITOHEX(SUM2),$0D",FEEDBACK_NEEDED,0)
		    
    
}

DEFINE_CALL 'STORE INFO'(INTEGER CADDX,CHAR STRING_RECEIVED[100],INTEGER MESSAGE_TYPE)

LOCAL_VAR INTEGER             CURRENT_PARTITION
LOCAL_VAR INTEGER             CURRENT_ZONE_1
LOCAL_VAR INTEGER             CURRENT_ZONE_2
LOCAL_VAR INTEGER             CURRENT_EVENT
LOCAL_VAR INTEGER             CURRENT_USER
LOCAL_VAR INTEGER             FLAG_TEST

{

IF(MESSAGE_TYPE = 5)
{
IF ((LEFT_STRING(STRING_RECEIVED,5)) == "$0A,'0A85'")
    {
	REMOVE_STRING(STRING_RECEIVED, "$0A,'0A85'" ,1)
    }
    ELSE IF ((LEFT_STRING(STRING_RECEIVED,5)) == "$0A,'0A05'")
	{
	    REMOVE_STRING(STRING_RECEIVED, "$0A,'0A05'" ,1)
	}
ZONES_SNAPSHOT_INFO[CADDX].ZONE_OFFSET = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_OFFSET_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_1_AND_2_STATUS_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_1_AND_2_STATUS_BYTE = ',ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_1_AND_2_STATUS_BYTE"
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_1_FAULTED       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_1_AND_2_STATUS_BYTE & $01
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_1_BYPASS        = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_1_AND_2_STATUS_BYTE & $02
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_1_TROUBLE       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_1_AND_2_STATUS_BYTE & $04
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_1_ALARM_MEMORY  = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_1_AND_2_STATUS_BYTE & $08
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_2_FAULTED       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_1_AND_2_STATUS_BYTE & $10
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_2_BYPASS        = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_1_AND_2_STATUS_BYTE & $20
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_2_TROUBLE       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_1_AND_2_STATUS_BYTE & $40
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_2_ALARM_MEMORY  = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_1_AND_2_STATUS_BYTE & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_3_AND_4_STATUS_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_3_AND_4_STATUS_BYTE = ',ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_3_AND_4_STATUS_BYTE"
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_3_FAULTED       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_3_AND_4_STATUS_BYTE & $01
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_3_BYPASS        = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_3_AND_4_STATUS_BYTE & $02
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_3_TROUBLE       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_3_AND_4_STATUS_BYTE & $04
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_3_ALARM_MEMORY  = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_3_AND_4_STATUS_BYTE & $08
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_4_FAULTED       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_3_AND_4_STATUS_BYTE & $10
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_4_BYPASS        = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_3_AND_4_STATUS_BYTE & $20
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_4_TROUBLE       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_3_AND_4_STATUS_BYTE & $40
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_4_ALARM_MEMORY  = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_3_AND_4_STATUS_BYTE & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_5_AND_6_STATUS_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_5_AND_6_STATUS_BYTE = ',ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_5_AND_6_STATUS_BYTE"
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_5_FAULTED       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_5_AND_6_STATUS_BYTE & $01
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_5_BYPASS        = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_5_AND_6_STATUS_BYTE & $02
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_5_TROUBLE       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_5_AND_6_STATUS_BYTE & $04
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_5_ALARM_MEMORY  = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_5_AND_6_STATUS_BYTE & $08
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_6_FAULTED       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_5_AND_6_STATUS_BYTE & $10
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_6_BYPASS        = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_5_AND_6_STATUS_BYTE & $20
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_6_TROUBLE       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_5_AND_6_STATUS_BYTE & $40
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_6_ALARM_MEMORY  = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_5_AND_6_STATUS_BYTE & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_7_AND_8_STATUS_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_7_AND_8_STATUS_BYTE = ',ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_7_AND_8_STATUS_BYTE"
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_7_FAULTED       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_7_AND_8_STATUS_BYTE & $01
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_7_BYPASS        = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_7_AND_8_STATUS_BYTE & $02
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_7_TROUBLE       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_7_AND_8_STATUS_BYTE & $04
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_7_ALARM_MEMORY  = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_7_AND_8_STATUS_BYTE & $08
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_8_FAULTED       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_7_AND_8_STATUS_BYTE & $10
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_8_BYPASS        = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_7_AND_8_STATUS_BYTE & $20
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_8_TROUBLE       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_7_AND_8_STATUS_BYTE & $40
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_8_ALARM_MEMORY  = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_7_AND_8_STATUS_BYTE & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_9_AND_10_STATUS_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_9_AND_10_STATUS_BYTE = ',ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_9_AND_10_STATUS_BYTE"
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_9_FAULTED       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_9_AND_10_STATUS_BYTE & $01
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_9_BYPASS        = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_9_AND_10_STATUS_BYTE & $02
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_9_TROUBLE       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_9_AND_10_STATUS_BYTE & $04
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_9_ALARM_MEMORY  = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_9_AND_10_STATUS_BYTE & $08
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_10_FAULTED       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_9_AND_10_STATUS_BYTE & $10
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_10_BYPASS        = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_9_AND_10_STATUS_BYTE & $20
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_10_TROUBLE       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_9_AND_10_STATUS_BYTE & $40
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_10_ALARM_MEMORY  = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_9_AND_10_STATUS_BYTE & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_11_AND_12_STATUS_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_11_AND_12_STATUS_BYTE = ',ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_11_AND_12_STATUS_BYTE"
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_11_FAULTED       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_11_AND_12_STATUS_BYTE & $01
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_11_BYPASS        = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_11_AND_12_STATUS_BYTE & $02
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_11_TROUBLE       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_11_AND_12_STATUS_BYTE & $04
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_11_ALARM_MEMORY  = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_11_AND_12_STATUS_BYTE & $08
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_12_FAULTED       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_11_AND_12_STATUS_BYTE & $10
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_12_BYPASS        = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_11_AND_12_STATUS_BYTE & $20
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_12_TROUBLE       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_11_AND_12_STATUS_BYTE & $40
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_12_ALARM_MEMORY  = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_11_AND_12_STATUS_BYTE & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_13_AND_14_STATUS_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_13_AND_14_STATUS_BYTE = ',ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_13_AND_14_STATUS_BYTE"
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_13_FAULTED       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_13_AND_14_STATUS_BYTE & $01
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_13_BYPASS        = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_13_AND_14_STATUS_BYTE & $02
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_13_TROUBLE       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_13_AND_14_STATUS_BYTE & $04
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_13_ALARM_MEMORY  = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_13_AND_14_STATUS_BYTE & $08
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_14_FAULTED       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_13_AND_14_STATUS_BYTE & $10
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_14_BYPASS        = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_13_AND_14_STATUS_BYTE & $20
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_14_TROUBLE       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_13_AND_14_STATUS_BYTE & $40
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_14_ALARM_MEMORY  = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_13_AND_14_STATUS_BYTE & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_15_AND_16_STATUS_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_15_AND_16_STATUS_BYTE = ',ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_15_AND_16_STATUS_BYTE"
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_15_FAULTED       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_15_AND_16_STATUS_BYTE & $01
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_15_BYPASS        = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_15_AND_16_STATUS_BYTE & $02
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_15_TROUBLE       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_15_AND_16_STATUS_BYTE & $04
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_15_ALARM_MEMORY  = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_15_AND_16_STATUS_BYTE & $08
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_16_FAULTED       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_15_AND_16_STATUS_BYTE & $10
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_16_BYPASS        = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_15_AND_16_STATUS_BYTE & $20
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_16_TROUBLE       = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_15_AND_16_STATUS_BYTE & $40
		    ZONES_SNAPSHOT_INFO[CADDX].ZONE_16_ALARM_MEMORY  = ZONES_SNAPSHOT_INFO_BYTES[CADDX].ZONE_15_AND_16_STATUS_BYTE & $80		    
}

IF(MESSAGE_TYPE = 4)
{
	IF ((LEFT_STRING(STRING_RECEIVED,5)) = "$0A,'0884'")
  {
		REMOVE_STRING(STRING_RECEIVED, "$0A,'0884'" ,1)
	}
	ELSE IF ((LEFT_STRING(STRING_RECEIVED,5)) = "$0A,'0804'")
	{
		REMOVE_STRING(STRING_RECEIVED, "$0A,'0804'" ,1)
	}
	
	CURRENT_ZONE_1 = HEXTOI(LEFT_STRING(STRING_RECEIVED,2)) + 1
	//SEND_STRING 0, "'THE ZONE WAS [',ITOA(CURRENT_ZONE_1),']'";
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].ZONE_NUMBER = HEXTOI(LEFT_STRING(STRING_RECEIVED,2)) + 1
	REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
	ZONE_STATUS_INFO_BYTES[CADDX].PARTITION_MASK_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
	IF (CAI[CADDX].CA_DEBUG)
		SEND_STRING 0,"'PARTITION_MASK_BYTE =',ZONE_STATUS_INFO_BYTES[CADDX].PARTITION_MASK_BYTE"
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].PARTITION_1_ENABLE = ZONE_STATUS_INFO_BYTES[CADDX].PARTITION_MASK_BYTE & $01
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].PARTITION_2_ENABLE = ZONE_STATUS_INFO_BYTES[CADDX].PARTITION_MASK_BYTE & $02
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].PARTITION_3_ENABLE = ZONE_STATUS_INFO_BYTES[CADDX].PARTITION_MASK_BYTE & $04
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].PARTITION_4_ENABLE = ZONE_STATUS_INFO_BYTES[CADDX].PARTITION_MASK_BYTE & $08
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].PARTITION_5_ENABLE = ZONE_STATUS_INFO_BYTES[CADDX].PARTITION_MASK_BYTE & $10
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].PARTITION_6_ENABLE = ZONE_STATUS_INFO_BYTES[CADDX].PARTITION_MASK_BYTE & $20
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].PARTITION_7_ENABLE = ZONE_STATUS_INFO_BYTES[CADDX].PARTITION_MASK_BYTE & $40
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].PARTITION_8_ENABLE = ZONE_STATUS_INFO_BYTES[CADDX].PARTITION_MASK_BYTE & $80
		REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
		IF (CAI[CADDX].CA_DEBUG)
			SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
	ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS1_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
	IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_TYPE_FLAGS1_BYTE =',ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS1_BYTE"
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].FIRE               = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS1_BYTE & $01
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1]._24_HOUR           = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS1_BYTE & $02
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].KEY_SWITCH         = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS1_BYTE & $04
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].FOLLOWER           = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS1_BYTE & $08
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].ENTRY_EXIT_DELAY_1 = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS1_BYTE & $10
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].ENTRY_EXIT_DELAY_2 = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS1_BYTE & $20
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].INTERIOR           = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS1_BYTE & $40
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].LOCAL_ONLY         = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS1_BYTE & $80
	REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
	IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
	ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS2_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
	IF (CAI[CADDX].CA_DEBUG)
		SEND_STRING 0,"'ZONE_TYPE_FLAGS2_BYTE =',ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS2_BYTE"
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].KEYPAD_SOUNDER     = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS2_BYTE & $01
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].YELPING_SIREN      = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS2_BYTE & $02
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].STEADY_SIREN       = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS2_BYTE & $04
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].CHIME              = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS2_BYTE & $08
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].BYPASSABLE         = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS2_BYTE & $10
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].GROUP_BYPASSABLE   = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS2_BYTE & $20
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].FORCE_ARMABLE      = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS2_BYTE & $40
	ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].ENTRY_GUARD        = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS2_BYTE & $80
	REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
	IF (CAI[CADDX].CA_DEBUG)
		SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
				ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS3_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
				IF (CAI[CADDX].CA_DEBUG)
					SEND_STRING 0,"'ZONE_TYPE_FLAGS3_BYTE =',ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS3_BYTE"
                    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].FAST_LOOP_RESPONSE     = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS3_BYTE & $01
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].DOUBLE_EOL_TAMPER      = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS3_BYTE & $02
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].TROUBLE1               = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS3_BYTE & $04
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].CROSS_ZONE             = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS3_BYTE & $08
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].DIALER_DELAY           = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS3_BYTE & $10
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].SWINGER_SHUTDOWN       = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS3_BYTE & $20
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].RESTORABLE             = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS3_BYTE & $40
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].LISTEN_IN              = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_TYPE_FLAGS3_BYTE & $80
				REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
				IF (CAI[CADDX].CA_DEBUG)
					SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
				ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS1_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
				IF (CAI[CADDX].CA_DEBUG)
					SEND_STRING 0,"'ZONE_CONDITION_FLAGS1_BYTE =',ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS1_BYTE"
				ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].FAULTED                = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS1_BYTE & $01;
				[vROOMLOGIC_MOTION_SENSOR,CURRENT_ZONE_1 + 100] = ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].FAULTED
				IF(ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].FAULTED)
				{
					ON[VCA1,CURRENT_ZONE_1];
					SEND_STRING 0, "'ZONE: [',ITOA(CURRENT_ZONE_1),'] STATE CHANGED TO ON'"
				}
				ELSE
				{
					OFF[VCA1,CURRENT_ZONE_1];
					SEND_STRING 0, "'ZONE: [',ITOA(CURRENT_ZONE_1),'] STATE CHANGED TO OFF'"
				}
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].TAMPERED               = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS1_BYTE & $02;
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].TROUBLE2               = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS1_BYTE & $04;
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].BYPASSED               = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS1_BYTE & $08;
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].INHIBITED_FORCE_ARMED  = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS1_BYTE & $10;
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].LOW_BATTERY            = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS1_BYTE & $20;
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].LOSS_OF_SUPERVISION    = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS1_BYTE & $40;
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].RESERVED1              = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS1_BYTE & $80;
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS2_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_CONDITION_FLAGS2_BYTE =',ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS2_BYTE"
                    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].ALARM_MEMORY           = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS2_BYTE & $01
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].BYPASS_MEMORY          = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS2_BYTE & $02
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].RESERVED2              = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS2_BYTE & $04
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].RESERVED3              = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS2_BYTE & $08
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].RESERVED4              = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS2_BYTE & $10
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].RESERVED5              = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS2_BYTE & $20
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].RESERVED6              = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS2_BYTE & $40
		    ZONE_STATUS_INFO_ARRAY[CADDX][CURRENT_ZONE_1].RESERVED7              = ZONE_STATUS_INFO_BYTES[CADDX].ZONE_CONDITION_FLAGS2_BYTE & $80    

}



IF(MESSAGE_TYPE = 12)
{
REMOVE_STRING(STRING_RECEIVED, "$0A,'0712'",1)
USER_INFO_ARRAY[CADDX][HEXTOI(LEFT_STRING(STRING_RECEIVED,2))].USER_NUMBER = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
CURRENT_USER = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
USER_INFO_BYTES[CADDX].PIN_DIGITS_1_AND_2_BYTE = LEFT_STRING(STRING_RECEIVED,2)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'PIN_DIGITS_1_AND_2_BYTE =',USER_INFO_BYTES[CADDX].PIN_DIGITS_1_AND_2_BYTE"
                    USER_INFO_ARRAY[CADDX][CURRENT_USER].PIN_DIGIT1 = HEXTOI(RIGHT_STRING(USER_INFO_BYTES[CADDX].PIN_DIGITS_1_AND_2_BYTE,1))
		    USER_INFO_ARRAY[CADDX][CURRENT_USER].PIN_DIGIT2 = HEXTOI(LEFT_STRING(USER_INFO_BYTES[CADDX].PIN_DIGITS_1_AND_2_BYTE,1))
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
USER_INFO_BYTES[CADDX].PIN_DIGITS_3_AND_4_BYTE = LEFT_STRING(STRING_RECEIVED,2)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'PIN_DIGITS_3_AND_4_BYTE =',USER_INFO_BYTES[CADDX].PIN_DIGITS_3_AND_4_BYTE"
                    USER_INFO_ARRAY[CADDX][CURRENT_USER].PIN_DIGIT3 = HEXTOI(RIGHT_STRING(USER_INFO_BYTES[CADDX].PIN_DIGITS_3_AND_4_BYTE,1))
		    USER_INFO_ARRAY[CADDX][CURRENT_USER].PIN_DIGIT4 = HEXTOI(LEFT_STRING(USER_INFO_BYTES[CADDX].PIN_DIGITS_3_AND_4_BYTE,1))
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
USER_INFO_BYTES[CADDX].PIN_DIGITS_5_AND_6_BYTE = LEFT_STRING(STRING_RECEIVED,2)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'PIN_DIGITS_5_AND_6_BYTE =',USER_INFO_BYTES[CADDX].PIN_DIGITS_5_AND_6_BYTE"
                    USER_INFO_ARRAY[CADDX][CURRENT_USER].PIN_DIGIT5 = HEXTOI(RIGHT_STRING(USER_INFO_BYTES[CADDX].PIN_DIGITS_5_AND_6_BYTE,1))
		    USER_INFO_ARRAY[CADDX][CURRENT_USER].PIN_DIGIT6 = HEXTOI(LEFT_STRING(USER_INFO_BYTES[CADDX].PIN_DIGITS_5_AND_6_BYTE,1))
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"   

FLAG_TEST = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))

IF (FLAG_TEST & $80 > 0)
{
USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_2_BYTE = FLAG_TEST
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'AUTHORITY_FLAGS_2_BYTE =',ITOHEX(USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_2_BYTE)"
                    USER_INFO_ARRAY[CADDX][CURRENT_USER].OUTPUT_1_ENABLE                 = USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_2_BYTE & $01
		    USER_INFO_ARRAY[CADDX][CURRENT_USER].OUTPUT_2_ENABLE                 = USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_2_BYTE & $02
                    USER_INFO_ARRAY[CADDX][CURRENT_USER].OUTPUT_3_ENABLE                 = USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_2_BYTE & $04
		    USER_INFO_ARRAY[CADDX][CURRENT_USER].OUTPUT_4_ENABLE                 = USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_2_BYTE & $08	
                    USER_INFO_ARRAY[CADDX][CURRENT_USER].ARM_OR_DISARM_2                 = USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_2_BYTE & $10
		    USER_INFO_ARRAY[CADDX][CURRENT_USER].BYPASS_ENABLE_2                 = USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_2_BYTE & $20
                    USER_INFO_ARRAY[CADDX][CURRENT_USER].OPEN_OR_CLOSE_REPORT_ENABLE_2   = USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_2_BYTE & $40
		    USER_INFO_ARRAY[CADDX][CURRENT_USER].MUST_BE_A_ONE                   = USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_2_BYTE & $80		    		    
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"  
}
ELSE IF (FLAG_TEST & $80 = 0)
{
USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_1_BYTE = FLAG_TEST
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'AUTHORITY_FLAGS_1_BYTE =',ITOHEX(USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_1_BYTE)"
                    USER_INFO_ARRAY[CADDX][CURRENT_USER].RESERVED1                      = USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_1_BYTE & $01
		    USER_INFO_ARRAY[CADDX][CURRENT_USER].ARM_ONLY                       = USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_1_BYTE & $02
                    USER_INFO_ARRAY[CADDX][CURRENT_USER].ARM_ONLY_DURING_CLOSE_WINDOW   = USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_1_BYTE & $04
		    USER_INFO_ARRAY[CADDX][CURRENT_USER].MASTER_OR_PROGRAM              = USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_1_BYTE & $08	
                    USER_INFO_ARRAY[CADDX][CURRENT_USER].ARM_OR_DISARM                  = USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_1_BYTE & $10
		    USER_INFO_ARRAY[CADDX][CURRENT_USER].BYPASS_ENABLE                  = USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_1_BYTE & $20
                    USER_INFO_ARRAY[CADDX][CURRENT_USER].OPEN_OR_CLOSE_REPORT_ENABLE    = USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_1_BYTE & $40
		    USER_INFO_ARRAY[CADDX][CURRENT_USER].MUST_BE_A_ZERO                 = USER_INFO_BYTES[CADDX].AUTHORITY_FLAGS_1_BYTE & $80		    		    
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"  
}

USER_INFO_BYTES[CADDX].AUTHORIZED_PARTITIONS_MASK_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'AUTHORIZED_PARTITIONS_MASK_BYTE =',USER_INFO_BYTES[CADDX].AUTHORIZED_PARTITIONS_MASK_BYTE"
                    USER_INFO_ARRAY[CADDX][CURRENT_USER].AUTHORISED_FOR_PARTITION1        = USER_INFO_BYTES[CADDX].AUTHORIZED_PARTITIONS_MASK_BYTE & $01
		    USER_INFO_ARRAY[CADDX][CURRENT_USER].AUTHORISED_FOR_PARTITION2        = USER_INFO_BYTES[CADDX].AUTHORIZED_PARTITIONS_MASK_BYTE & $02
                    USER_INFO_ARRAY[CADDX][CURRENT_USER].AUTHORISED_FOR_PARTITION3        = USER_INFO_BYTES[CADDX].AUTHORIZED_PARTITIONS_MASK_BYTE & $04
		    USER_INFO_ARRAY[CADDX][CURRENT_USER].AUTHORISED_FOR_PARTITION4        = USER_INFO_BYTES[CADDX].AUTHORIZED_PARTITIONS_MASK_BYTE & $08	
                    USER_INFO_ARRAY[CADDX][CURRENT_USER].AUTHORISED_FOR_PARTITION5        = USER_INFO_BYTES[CADDX].AUTHORIZED_PARTITIONS_MASK_BYTE & $10
		    USER_INFO_ARRAY[CADDX][CURRENT_USER].AUTHORISED_FOR_PARTITION6        = USER_INFO_BYTES[CADDX].AUTHORIZED_PARTITIONS_MASK_BYTE & $20
                    USER_INFO_ARRAY[CADDX][CURRENT_USER].AUTHORISED_FOR_PARTITION7        = USER_INFO_BYTES[CADDX].AUTHORIZED_PARTITIONS_MASK_BYTE & $40
		    USER_INFO_ARRAY[CADDX][CURRENT_USER].AUTHORISED_FOR_PARTITION8        = USER_INFO_BYTES[CADDX].AUTHORIZED_PARTITIONS_MASK_BYTE & $80		    		    
   

}


IF(MESSAGE_TYPE = 6)
{
IF ((LEFT_STRING(STRING_RECEIVED,5)) = "$0A,'0986'")
    {
	REMOVE_STRING(STRING_RECEIVED, "$0A,'0986'",1)
    }
    ELSE IF ((LEFT_STRING(STRING_RECEIVED,5)) = "$0A,'0906'")
	{
	    REMOVE_STRING(STRING_RECEIVED, "$0A,'0906'" ,1)
	}
PARTITION_STATUS_ARRAY[CADDX][HEXTOI(LEFT_STRING(STRING_RECEIVED,2)) + 1].PARTITION_NUMBER= HEXTOI(LEFT_STRING(STRING_RECEIVED,2)) + 1
CURRENT_PARTITION = HEXTOI(LEFT_STRING(STRING_RECEIVED,2)) + 1
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS1_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'PARTITION_CONDITION_FLAGS1_BYTE = ',PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS1_BYTE"
                    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].BYPASS_CODE_REQUIRED = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS1_BYTE & $01
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].FIRE_TROUBLE         = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS1_BYTE & $02
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].FIRE                 = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS1_BYTE & $04
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].PULSING_BUZZER       = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS1_BYTE & $08
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].TLM_FAULT_MEMORY     = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS1_BYTE & $10
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].RESERVED1            = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS1_BYTE & $20
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].ARMED                = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS1_BYTE & $40
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].INSTANT              = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS1_BYTE & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS2_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'PARTITION_CONDITION_FLAGS2_BYTE = ',PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS2_BYTE"
                    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].PREVIOUS_ALARM            = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS2_BYTE & $01
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].SIREN_ON                  = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS2_BYTE & $02
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].STEADY_SIREN_ON           = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS2_BYTE & $04
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].ALARM_MEMORY              = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS2_BYTE & $08
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].TAMPER                    = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS2_BYTE & $10
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].CANCEL_COMMAND_ENTERED    = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS2_BYTE & $20
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].CODE_ENTERED              = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS2_BYTE & $40
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].CANCEL_PENDING            = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS2_BYTE & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS3_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'PARTITION_CONDITION_FLAGS3_BYTE = ',PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS3_BYTE"    
									  PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].RESERVED2                 = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS3_BYTE & $01
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].SILENT_EXIT_ENABLED       = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS3_BYTE & $02
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].ENTRYGAURD_STAYMODE       = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS3_BYTE & $04
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].CHIME_MODE_ON             = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS3_BYTE & $08
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].ENTRY                     = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS3_BYTE & $10
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].DELAY_EXPIRATION_WARNING  = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS3_BYTE & $20
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].EXIT1                     = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS3_BYTE & $40
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].EXIT2                     = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS3_BYTE & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS4_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'PARTITION_CONDITION_FLAGS4_BYTE = ',PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS4_BYTE"    
                    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].LED_EXTINGUISH              = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS4_BYTE & $01
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].CROSS_TIMING                = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS4_BYTE & $02
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].RECENT_CLOSING_BEING_TIMED  = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS4_BYTE & $04
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].RESERVED3                   = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS4_BYTE & $08
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].EXIT_ERROR_TRIGGERED        = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS4_BYTE & $10
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].AUTO_HOME_INHIBITED         = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS4_BYTE & $20
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].SENSOR_LOW_BATTERY          = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS4_BYTE & $40
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].SENSOR_LOST_SUPERVISION     = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS4_BYTE & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
PARTITION_STATUS_BYTES[CADDX].LAST_USER_NUMBER_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'LAST_USER_NUMBER_BYTE = ',PARTITION_STATUS_BYTES[CADDX].LAST_USER_NUMBER_BYTE" 
    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].LAST_USER_NUMBER              = PARTITION_STATUS_BYTES[CADDX].LAST_USER_NUMBER_BYTE
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"    
PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS5_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'PARTITION_CONDITION_FLAGS5_BYTE = ',PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS5_BYTE"    
                    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].ZONE_BYPASSED                    = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS5_BYTE & $01
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].FORCE_ARM_TRIGGERED_BY_AUTO_ARM  = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS5_BYTE & $02
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].READY_TO_ARM                     = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS5_BYTE & $04
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].READY_TO_FORCE_ARM               = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS5_BYTE & $08
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].VALID_PIN_ACCEPTED               = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS5_BYTE & $10
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].CHIME_ON_SOUNDING                = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS5_BYTE & $20
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].ERROR_BEEP_TRIPLE_BEEP           = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS5_BYTE & $40
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].TONE_ON_ACTIVATION_TONE          = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS5_BYTE & $80    
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS6_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'PARTITION_CONDITION_FLAGS6_BYTE = ',PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS6_BYTE"    
                    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].ENTRY1                              = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS6_BYTE & $01
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].OPEN_PERIOD                         = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS6_BYTE & $02
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].ALARM_SENT_USING_PHONE_NUMBER1      = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS6_BYTE & $04
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].ALARM_SENT_USING_PHONE_NUMBER2      = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS6_BYTE & $08
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].ALARM_SENT_USING_PHONE_NUMBER3      = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS6_BYTE & $10
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].CANCEL_REPORT_IS_IN_THE_STACK       = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS6_BYTE & $20
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].KEYSWITCH_ARMED                     = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS6_BYTE & $40
		    PARTITION_STATUS_ARRAY[CADDX][CURRENT_PARTITION].DELAY_TRIP_IN_PROGRESS_COMMON_ZONE  = PARTITION_STATUS_BYTES[CADDX].PARTITION_CONDITION_FLAGS6_BYTE & $80   
}

IF(MESSAGE_TYPE = 7)
{
IF ((LEFT_STRING(STRING_RECEIVED,5)) = "$0A,'0987'")
    {
	REMOVE_STRING(STRING_RECEIVED, "$0A,'0987'",1)
    }
    ELSE IF ((LEFT_STRING(STRING_RECEIVED,5)) = "$0A,'0907'")
	{
	    REMOVE_STRING(STRING_RECEIVED, "$0A,'0907'",1)
	}
PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION1_CONDITION_FLAGS_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'PARTITION1_CONDITION_FLAGS_BYTE = ',PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION1_CONDITION_FLAGS_BYTE"
                    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION1_VALID_PARTITION      = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION1_CONDITION_FLAGS_BYTE & $01
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION1_READY                = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION1_CONDITION_FLAGS_BYTE & $02
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION1_ARMED                = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION1_CONDITION_FLAGS_BYTE & $04
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION1_STAY_MODE            = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION1_CONDITION_FLAGS_BYTE & $08
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION1_CHIME_MODE           = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION1_CONDITION_FLAGS_BYTE & $10
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION1_ANY_ENTRY_DELAY      = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION1_CONDITION_FLAGS_BYTE & $20
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION1_ANY_EXIT_DELAY       = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION1_CONDITION_FLAGS_BYTE & $40
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION1_PREVIOUS_ALARM       = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION1_CONDITION_FLAGS_BYTE & $80   
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION2_CONDITION_FLAGS_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'PARTITION2_CONDITION_FLAGS_BYTE = ',PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION2_CONDITION_FLAGS_BYTE"
                    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION2_VALID_PARTITION      = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION2_CONDITION_FLAGS_BYTE & $01
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION2_READY                = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION2_CONDITION_FLAGS_BYTE & $02
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION2_ARMED                = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION2_CONDITION_FLAGS_BYTE & $04
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION2_STAY_MODE            = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION2_CONDITION_FLAGS_BYTE & $08
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION2_CHIME_MODE           = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION2_CONDITION_FLAGS_BYTE & $10
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION2_ANY_ENTRY_DELAY      = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION2_CONDITION_FLAGS_BYTE & $20
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION2_ANY_EXIT_DELAY       = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION2_CONDITION_FLAGS_BYTE & $40
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION2_PREVIOUS_ALARM       = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION2_CONDITION_FLAGS_BYTE & $80     		    
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION3_CONDITION_FLAGS_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'PARTITION3_CONDITION_FLAGS_BYTE = ',PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION3_CONDITION_FLAGS_BYTE"
                    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION3_VALID_PARTITION      = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION3_CONDITION_FLAGS_BYTE & $01
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION3_READY                = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION3_CONDITION_FLAGS_BYTE & $02
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION3_ARMED                = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION3_CONDITION_FLAGS_BYTE & $04
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION3_STAY_MODE            = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION3_CONDITION_FLAGS_BYTE & $08
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION3_CHIME_MODE           = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION3_CONDITION_FLAGS_BYTE & $10
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION3_ANY_ENTRY_DELAY      = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION3_CONDITION_FLAGS_BYTE & $20
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION3_ANY_EXIT_DELAY       = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION3_CONDITION_FLAGS_BYTE & $40
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION3_PREVIOUS_ALARM       = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION3_CONDITION_FLAGS_BYTE & $80 
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION4_CONDITION_FLAGS_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'PARTITION4_CONDITION_FLAGS_BYTE = ',PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION4_CONDITION_FLAGS_BYTE"
                    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION4_VALID_PARTITION      = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION4_CONDITION_FLAGS_BYTE & $01
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION4_READY                = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION4_CONDITION_FLAGS_BYTE & $02
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION4_ARMED                = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION4_CONDITION_FLAGS_BYTE & $04
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION4_STAY_MODE            = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION4_CONDITION_FLAGS_BYTE & $08
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION4_CHIME_MODE           = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION4_CONDITION_FLAGS_BYTE & $10
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION4_ANY_ENTRY_DELAY      = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION4_CONDITION_FLAGS_BYTE & $20
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION4_ANY_EXIT_DELAY       = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION4_CONDITION_FLAGS_BYTE & $40
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION4_PREVIOUS_ALARM       = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION4_CONDITION_FLAGS_BYTE & $80 		    
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION5_CONDITION_FLAGS_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'PARTITION5_CONDITION_FLAGS_BYTE = ',PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION5_CONDITION_FLAGS_BYTE"
                    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION5_VALID_PARTITION      = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION5_CONDITION_FLAGS_BYTE & $01
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION5_READY                = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION5_CONDITION_FLAGS_BYTE & $02
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION5_ARMED                = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION5_CONDITION_FLAGS_BYTE & $04
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION5_STAY_MODE            = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION5_CONDITION_FLAGS_BYTE & $08
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION5_CHIME_MODE           = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION5_CONDITION_FLAGS_BYTE & $10
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION5_ANY_ENTRY_DELAY      = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION5_CONDITION_FLAGS_BYTE & $20
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION5_ANY_EXIT_DELAY       = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION5_CONDITION_FLAGS_BYTE & $40
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION5_PREVIOUS_ALARM       = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION5_CONDITION_FLAGS_BYTE & $80 
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION6_CONDITION_FLAGS_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'PARTITION6_CONDITION_FLAGS_BYTE = ',PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION6_CONDITION_FLAGS_BYTE"
                    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION6_VALID_PARTITION      = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION6_CONDITION_FLAGS_BYTE & $01
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION6_READY                = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION6_CONDITION_FLAGS_BYTE & $02
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION6_ARMED                = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION6_CONDITION_FLAGS_BYTE & $04
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION6_STAY_MODE            = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION6_CONDITION_FLAGS_BYTE & $08
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION6_CHIME_MODE           = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION6_CONDITION_FLAGS_BYTE & $10
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION6_ANY_ENTRY_DELAY      = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION6_CONDITION_FLAGS_BYTE & $20
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION6_ANY_EXIT_DELAY       = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION6_CONDITION_FLAGS_BYTE & $40
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION6_PREVIOUS_ALARM       = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION6_CONDITION_FLAGS_BYTE & $80 
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION7_CONDITION_FLAGS_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'PARTITION7_CONDITION_FLAGS_BYTE = ',PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION7_CONDITION_FLAGS_BYTE"
                    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION7_VALID_PARTITION      = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION7_CONDITION_FLAGS_BYTE & $01
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION7_READY                = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION7_CONDITION_FLAGS_BYTE & $02
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION7_ARMED                = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION7_CONDITION_FLAGS_BYTE & $04
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION7_STAY_MODE            = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION7_CONDITION_FLAGS_BYTE & $08
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION7_CHIME_MODE           = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION7_CONDITION_FLAGS_BYTE & $10
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION7_ANY_ENTRY_DELAY      = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION7_CONDITION_FLAGS_BYTE & $20
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION7_ANY_EXIT_DELAY       = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION7_CONDITION_FLAGS_BYTE & $40
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION7_PREVIOUS_ALARM       = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION7_CONDITION_FLAGS_BYTE & $80 	
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION8_CONDITION_FLAGS_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'PARTITION8_CONDITION_FLAGS_BYTE = ',PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION8_CONDITION_FLAGS_BYTE"
                    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION8_VALID_PARTITION      = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION8_CONDITION_FLAGS_BYTE & $01
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION8_READY                = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION8_CONDITION_FLAGS_BYTE & $02
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION8_ARMED                = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION8_CONDITION_FLAGS_BYTE & $04
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION8_STAY_MODE            = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION8_CONDITION_FLAGS_BYTE & $08
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION8_CHIME_MODE           = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION8_CONDITION_FLAGS_BYTE & $10
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION8_ANY_ENTRY_DELAY      = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION8_CONDITION_FLAGS_BYTE & $20
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION8_ANY_EXIT_DELAY       = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION8_CONDITION_FLAGS_BYTE & $40
		    PARTITIONS_SNAPSHOT_INFO[CADDX].PARTITION8_PREVIOUS_ALARM       = PARTITIONS_SNAPSHOT_BYTES[CADDX].PARTITION8_CONDITION_FLAGS_BYTE & $80 		    

}


IF(MESSAGE_TYPE = 3)
{
REMOVE_STRING(STRING_RECEIVED, "$0A,'1203'",1)
ZONE_NAME_BYTES[CADDX].ZONE_NUMBER_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
CURRENT_ZONE_2 = HEXTOI(LEFT_STRING(STRING_RECEIVED,2)) + 1
ZONE_NAME_INFO_ARRAY[CADDX][CURRENT_ZONE_2].ZONE_NUMBER = HEXTOI(LEFT_STRING(STRING_RECEIVED,2)) + 1
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_1_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_NAME_CHARACTER_1_BYTE= ',ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_1_BYTE"
	ZONE_NAME_INFO_ARRAY[CADDX][CURRENT_ZONE_2].ZONE_NAME_CHARACTER_1 = TYPE_CAST(ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_1_BYTE)
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_2_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_NAME_CHARACTER_2_BYTE= ',ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_2_BYTE"
	ZONE_NAME_INFO_ARRAY[CADDX][CURRENT_ZONE_2].ZONE_NAME_CHARACTER_2 = TYPE_CAST(ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_2_BYTE)
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"    
ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_3_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_NAME_CHARACTER_3_BYTE= ',ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_3_BYTE"
	ZONE_NAME_INFO_ARRAY[CADDX][CURRENT_ZONE_2].ZONE_NAME_CHARACTER_3 = TYPE_CAST(ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_3_BYTE)
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"    
ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_4_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_NAME_CHARACTER_4_BYTE= ',ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_4_BYTE"
	ZONE_NAME_INFO_ARRAY[CADDX][CURRENT_ZONE_2].ZONE_NAME_CHARACTER_4 = TYPE_CAST(ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_4_BYTE)
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
    ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_5_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_NAME_CHARACTER_5_BYTE= ',ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_5_BYTE"
	ZONE_NAME_INFO_ARRAY[CADDX][CURRENT_ZONE_2].ZONE_NAME_CHARACTER_5 = TYPE_CAST(ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_5_BYTE)
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"       
    ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_6_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_NAME_CHARACTER_6_BYTE= ',ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_6_BYTE"
	ZONE_NAME_INFO_ARRAY[CADDX][CURRENT_ZONE_2].ZONE_NAME_CHARACTER_6 = TYPE_CAST(ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_6_BYTE)
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED" 
    ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_7_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_NAME_CHARACTER_7_BYTE= ',ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_7_BYTE"
	ZONE_NAME_INFO_ARRAY[CADDX][CURRENT_ZONE_2].ZONE_NAME_CHARACTER_7 = TYPE_CAST(ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_7_BYTE)
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"     
    ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_8_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_NAME_CHARACTER_8_BYTE= ',ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_8_BYTE"
	ZONE_NAME_INFO_ARRAY[CADDX][CURRENT_ZONE_2].ZONE_NAME_CHARACTER_8 = TYPE_CAST(ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_8_BYTE)
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"    
    ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_9_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_NAME_CHARACTER_9_BYTE= ',ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_9_BYTE"
	ZONE_NAME_INFO_ARRAY[CADDX][CURRENT_ZONE_2].ZONE_NAME_CHARACTER_9 = TYPE_CAST(ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_9_BYTE)
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"   
    ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_10_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_NAME_CHARACTER_10_BYTE= ',ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_10_BYTE"
	ZONE_NAME_INFO_ARRAY[CADDX][CURRENT_ZONE_2].ZONE_NAME_CHARACTER_10 = TYPE_CAST(ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_10_BYTE)
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"       
    ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_11_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_NAME_CHARACTER_11_BYTE= ',ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_11_BYTE"
	ZONE_NAME_INFO_ARRAY[CADDX][CURRENT_ZONE_2].ZONE_NAME_CHARACTER_11 = TYPE_CAST(ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_11_BYTE)
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"     
    ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_12_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_NAME_CHARACTER_12_BYTE= ',ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_12_BYTE"
	ZONE_NAME_INFO_ARRAY[CADDX][CURRENT_ZONE_2].ZONE_NAME_CHARACTER_12 = TYPE_CAST(ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_12_BYTE)
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"     
    ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_13_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_NAME_CHARACTER_13_BYTE= ',ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_13_BYTE"
	ZONE_NAME_INFO_ARRAY[CADDX][CURRENT_ZONE_2].ZONE_NAME_CHARACTER_13 = TYPE_CAST(ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_13_BYTE)
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"      
    ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_14_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_NAME_CHARACTER_14_BYTE= ',ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_14_BYTE"
	ZONE_NAME_INFO_ARRAY[CADDX][CURRENT_ZONE_2].ZONE_NAME_CHARACTER_14 = TYPE_CAST(ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_14_BYTE)
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"      
    ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_15_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_NAME_CHARACTER_15_BYTE= ',ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_15_BYTE"
	ZONE_NAME_INFO_ARRAY[CADDX][CURRENT_ZONE_2].ZONE_NAME_CHARACTER_15 = TYPE_CAST(ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_15_BYTE)
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"     
    ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_16_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_NAME_CHARACTER_16_BYTE= ',ZONE_NAME_BYTES.ZONE_NAME_CHARACTER_16_BYTE"
	ZONE_NAME_INFO_ARRAY[CADDX][CURRENT_ZONE_2].ZONE_NAME_CHARACTER_16 = TYPE_CAST(ZONE_NAME_BYTES[CADDX].ZONE_NAME_CHARACTER_16_BYTE)
        
}


IF(MESSAGE_TYPE = 1)
{
IF ((LEFT_STRING(STRING_RECEIVED,5)) = "$0A,'0B81'")
    {
	REMOVE_STRING(STRING_RECEIVED, "$0A,'0B81'",1)
    }
    ELSE IF ((LEFT_STRING(STRING_RECEIVED,5)) = "$0A,'0B01'")
	{
	    REMOVE_STRING(STRING_RECEIVED, "$0A,'0B01'",1)
	}
INTERFACE_CONFIGURATION_BYTES[CADDX].FIRMWARE_VERSION_BYTE_1= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'FIRMWARE_VERSION_BYTE_1 = ',INTERFACE_CONFIGURATION_BYTES[CADDX].FIRMWARE_VERSION_BYTE_1"
	INTERFACE_CONFIGURATION_INFO[CADDX].FIRMWARE_VERSION_CHARACTER_1 = TYPE_CAST(INTERFACE_CONFIGURATION_BYTES[CADDX].FIRMWARE_VERSION_BYTE_1)
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
INTERFACE_CONFIGURATION_BYTES[CADDX].FIRMWARE_VERSION_BYTE_2= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'FIRMWARE_VERSION_BYTE_2 = ',INTERFACE_CONFIGURATION_BYTES[CADDX].FIRMWARE_VERSION_BYTE_2"
	INTERFACE_CONFIGURATION_INFO[CADDX].FIRMWARE_VERSION_CHARACTER_2 = TYPE_CAST(INTERFACE_CONFIGURATION_BYTES[CADDX].FIRMWARE_VERSION_BYTE_2)
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"  
INTERFACE_CONFIGURATION_BYTES[CADDX].FIRMWARE_VERSION_BYTE_3= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'FIRMWARE_VERSION_BYTE_3 = ',INTERFACE_CONFIGURATION_BYTES[CADDX].FIRMWARE_VERSION_BYTE_3"
	INTERFACE_CONFIGURATION_INFO[CADDX].FIRMWARE_VERSION_CHARACTER_3 = TYPE_CAST(INTERFACE_CONFIGURATION_BYTES[CADDX].FIRMWARE_VERSION_BYTE_3)
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"  
INTERFACE_CONFIGURATION_BYTES[CADDX].FIRMWARE_VERSION_BYTE_4= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'FIRMWARE_VERSION_BYTE_4 = ',INTERFACE_CONFIGURATION_BYTES[CADDX].FIRMWARE_VERSION_BYTE_4"
	INTERFACE_CONFIGURATION_INFO[CADDX].FIRMWARE_VERSION_CHARACTER_4 = TYPE_CAST(INTERFACE_CONFIGURATION_BYTES[CADDX].FIRMWARE_VERSION_BYTE_4)
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"    
    INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_1_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'SUPPORTED_TRANSITION_MESSAGE_FLAGS_1_BYTE = ',INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_1_BYTE"
	INTERFACE_CONFIGURATION_INFO[CADDX].RESERVED1                            = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_1_BYTE & $01
	INTERFACE_CONFIGURATION_INFO[CADDX].INTERFACE_CONFIGURATION_MESSAGE_FLAG = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_1_BYTE & $02
	INTERFACE_CONFIGURATION_INFO[CADDX].RESERVED2                            = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_1_BYTE & $04
	INTERFACE_CONFIGURATION_INFO[CADDX].RESERVED3                            = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_1_BYTE & $08
	INTERFACE_CONFIGURATION_INFO[CADDX].ZONE_STATUS_MESSAGE_FLAG             = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_1_BYTE & $10
	INTERFACE_CONFIGURATION_INFO[CADDX].ZONES_SNAPSHOT_MESSAGE_FLAG          = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_1_BYTE & $20
	INTERFACE_CONFIGURATION_INFO[CADDX].PARTITION_STATUS_MESSAGE_FLAG        = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_1_BYTE & $40
	INTERFACE_CONFIGURATION_INFO[CADDX].PARTITIONS_SNAPSHOT_MESSAGE_FLAG     = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_1_BYTE & $80	
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"     
    INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_2_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'SUPPORTED_TRANSITION_MESSAGE_FLAGS_2_BYTE = ',INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_2_BYTE"
	INTERFACE_CONFIGURATION_INFO[CADDX].SYSTEM_STATUS_MESSAGE_FLAG      = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_2_BYTE & $01
	INTERFACE_CONFIGURATION_INFO[CADDX].X_10_MESSAGE_RECEIVED_FLAG      = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_2_BYTE & $02
	INTERFACE_CONFIGURATION_INFO[CADDX].LOG_EVENT_MESSAGE_FLAG          = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_2_BYTE & $04
	INTERFACE_CONFIGURATION_INFO[CADDX].RESERVED4                       = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_2_BYTE & $08
	INTERFACE_CONFIGURATION_INFO[CADDX].RESERVED5                       = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_2_BYTE & $10
	INTERFACE_CONFIGURATION_INFO[CADDX].RESERVED6                       = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_2_BYTE & $20
	INTERFACE_CONFIGURATION_INFO[CADDX].RESERVED7                       = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_2_BYTE & $40
	INTERFACE_CONFIGURATION_INFO[CADDX].RESERVED8                       = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_TRANSITION_MESSAGE_FLAGS_2_BYTE & $80	
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"     
    INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_1_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'SUPPORTED_REQUEST_OR_COMMAND_FLAGS_1_BYTE = ',INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_1_BYTE"
	INTERFACE_CONFIGURATION_INFO[CADDX].RESERVED9                             = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_1_BYTE & $01
	INTERFACE_CONFIGURATION_INFO[CADDX].INTERFACE_CONFIGURATION_REQUEST_FLAG  = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_1_BYTE & $02
	INTERFACE_CONFIGURATION_INFO[CADDX].RESERVED10                            = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_1_BYTE & $04
	INTERFACE_CONFIGURATION_INFO[CADDX].ZONE_NAME_REQUEST_FLAG                = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_1_BYTE & $08
	INTERFACE_CONFIGURATION_INFO[CADDX].ZONE_STATUS_REQUEST_FLAG              = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_1_BYTE & $10
	INTERFACE_CONFIGURATION_INFO[CADDX].ZONES_SNAPSHOT_REQUEST_FLAG           = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_1_BYTE & $20
	INTERFACE_CONFIGURATION_INFO[CADDX].PARTITION_STATUS_REQUEST_FLAG         = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_1_BYTE & $40
	INTERFACE_CONFIGURATION_INFO[CADDX].PARTITIONS_SNAPSHOT_REQUEST_FLAG      = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_1_BYTE & $80	
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"    
INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_2_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'SUPPORTED_REQUEST_OR_COMMAND_FLAGS_2_BYTE = ',INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_2_BYTE"
	INTERFACE_CONFIGURATION_INFO[CADDX].SYSTEM_STATUS_REQUEST_FLAG = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_2_BYTE & $01
	INTERFACE_CONFIGURATION_INFO[CADDX].SEND_X_10_MESSAGE_FLAG     = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_2_BYTE & $02
	INTERFACE_CONFIGURATION_INFO[CADDX].LOG_EVENT_REQUEST_FLAG     = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_2_BYTE & $04
	INTERFACE_CONFIGURATION_INFO[CADDX].RESERVED11                 = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_2_BYTE & $08
	INTERFACE_CONFIGURATION_INFO[CADDX].RESERVED12                 = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_2_BYTE & $10
	INTERFACE_CONFIGURATION_INFO[CADDX].RESERVED13                 = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_2_BYTE & $20
	INTERFACE_CONFIGURATION_INFO[CADDX].RESERVED14                 = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_2_BYTE & $40
	INTERFACE_CONFIGURATION_INFO[CADDX].RESERVED15                 = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_2_BYTE & $80	
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"    
INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_3_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'SUPPORTED_REQUEST_OR_COMMAND_FLAGS_3_BYTE = ',INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_3_BYTE"
	INTERFACE_CONFIGURATION_INFO[CADDX].PROGRAM_DATA_REQUEST_FLAG                       = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_3_BYTE & $01
	INTERFACE_CONFIGURATION_INFO[CADDX].PROGRAM_DATA_COMMAND_FLAG                       = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_3_BYTE & $02
	INTERFACE_CONFIGURATION_INFO[CADDX].USER_INFORMATION_REQUEST_WITH_PIN_FLAG          = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_3_BYTE & $04
	INTERFACE_CONFIGURATION_INFO[CADDX].USER_INFORMATION_REQUEST_WITHOUT_PIN_FLAG       = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_3_BYTE & $08
	INTERFACE_CONFIGURATION_INFO[CADDX].SET_USER_CODE_COMMAND_WITH_PIN_FLAG             = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_3_BYTE & $10
	INTERFACE_CONFIGURATION_INFO[CADDX].SET_USER_CODE_COMMAND_WITHOUT_PIN_FLAG          = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_3_BYTE & $20
	INTERFACE_CONFIGURATION_INFO[CADDX].SET_USER_AUTHORIZATION_COMMAND_WITH_PIN_FLAG    = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_3_BYTE & $40
	INTERFACE_CONFIGURATION_INFO[CADDX].SET_USER_AUTHORIZATION_COMMAND_WITHOUT_PIN_FLAG = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_3_BYTE & $80	
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"    
INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_4_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'SUPPORTED_REQUEST_OR_COMMAND_FLAGS_4_BYTE = ',INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_4_BYTE"
	INTERFACE_CONFIGURATION_INFO[CADDX].RESERVED16                                = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_4_BYTE & $01
	INTERFACE_CONFIGURATION_INFO[CADDX].RESERVED17                                = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_4_BYTE & $02
	INTERFACE_CONFIGURATION_INFO[CADDX].STORE_COMMUNICATION_EVENT_COMMAND_FLAG    = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_4_BYTE & $04
	INTERFACE_CONFIGURATION_INFO[CADDX].SET_CLOCK_OR_CALENDAR_COMMAND_FLAG        = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_4_BYTE & $08
	INTERFACE_CONFIGURATION_INFO[CADDX].PRIMARY_KEYPAD_FUNCTION_WITH_PIN_FLAG     = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_4_BYTE & $10
	INTERFACE_CONFIGURATION_INFO[CADDX].PRIMARY_KEYPAD_FUNCTION_WITHOUT_PIN_FLAG  = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_4_BYTE & $20
	INTERFACE_CONFIGURATION_INFO[CADDX].SECONDARY_KEYPAD_FUNCTION_FLAG            = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_4_BYTE & $40
	INTERFACE_CONFIGURATION_INFO[CADDX].ZONE_BYPASS_TOGGLE_FLAG                   = INTERFACE_CONFIGURATION_BYTES[CADDX].SUPPORTED_REQUEST_OR_COMMAND_FLAGS_4_BYTE & $80	
    
}


IF(MESSAGE_TYPE = 10)
{
IF ((LEFT_STRING(STRING_RECEIVED,5)) = "$0A,'0A8A'")
    {
	REMOVE_STRING(STRING_RECEIVED, "$0A,'0A8A'",1)
    }
    ELSE IF ((LEFT_STRING(STRING_RECEIVED,5)) = "$0A,'0A0A'")
	{
	    REMOVE_STRING(STRING_RECEIVED, "$0A,'0A0A'",1)
	}
LOG_EVENT_BYTES[CADDX].EVENT_NUMBER_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
CURRENT_EVENT = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'EVENT_NUMBER_BYTE= ',LOG_EVENT_BYTES[CADDX].EVENT_NUMBER_BYTE"
	LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_NUMBER = LOG_EVENT_BYTES[CADDX].EVENT_NUMBER_BYTE
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
    LOG_EVENT_BYTES[CADDX].TOTAL_LOG_SIZE_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'TOTAL_LOG_SIZE_BYTE = ',LOG_EVENT_BYTES[CADDX].TOTAL_LOG_SIZE_BYTE"
	LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].TOTAL_LOG_SIZE = LOG_EVENT_BYTES[CADDX].TOTAL_LOG_SIZE_BYTE
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"    
    LOG_EVENT_BYTES[CADDX].EVENT_TYPE_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'EVENT_TYPE_BYTE = ',LOG_EVENT_BYTES[CADDX].EVENT_TYPE_BYTE"
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"     
LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE = ',LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE"  
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"  
LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'PARTITION_NUMBER_BYTE = ',LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE"    
    
    //IF(LOG_EVENT_BYTES[CADDX].EVENT_TYPE_BYTE & $80 <> 0)
    //{
    
    
    SWITCH(LOG_EVENT_BYTES[CADDX].EVENT_TYPE_BYTE & $7F)
    {
    CASE $00 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Alarm'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].ZONE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }
    CASE $01 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Alarm Restore'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].ZONE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1 
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }  
    CASE $02:
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Bypass'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].ZONE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }    
    CASE $03:
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Bypass Restore'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].ZONE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }  
    CASE $04 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Tamper'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].ZONE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }  
    CASE $05 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Tamper Restore'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].ZONE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    } 
    CASE $06 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Trouble'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].ZONE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }    
    CASE $07 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Trouble Restore'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].ZONE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }
    CASE $08 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'TX Low Battery'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].ZONE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }
    CASE $09 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'TX Low Battery Restore'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].ZONE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }
    CASE $0A :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Zone Lost'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].ZONE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }
    CASE $0B :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Zone Lost Restore'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].ZONE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }
    CASE $0C :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Start of Cross Time'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].ZONE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }
    CASE $0D :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'No Event Reported'
    }
    CASE $0E :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'No Event Reported'
    }
    CASE $0F :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'No Event Reported'
    }
    CASE $10 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'No Event Reported'
    }
    CASE $11 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Special Expansion event'
    }
    CASE $12 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Duress'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }
    CASE $13 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Manual fire'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }
    CASE $14 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Auxiliary 2 panic'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }
    CASE $15 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'No event reported'
    }
    CASE $16 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Panic'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }
    CASE $17 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Keypad Tamper'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }
    CASE $18 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Control Box Tamper'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].DEVICE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE
    }
    CASE $19 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Control Box Tamper Restore'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].DEVICE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE
    }
    CASE $1A :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'AC Fail'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].DEVICE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE
    }
    CASE $1B :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'AC Fail Restore'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].DEVICE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE
    }
    CASE $1C :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Low Battery'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].DEVICE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE
    }
    CASE $1D :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Low Battery Restore'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].DEVICE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE
    }    
    CASE $1E :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Over-current'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].DEVICE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE
    }
    CASE $1F :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Over-current Restore'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].DEVICE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE
    }
    CASE $20 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Siren Tamper'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].DEVICE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE
    }    
    CASE $21 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Siren Tamper Restore'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].DEVICE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE
    }
    CASE $22 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Telephone Fault'
    }
    CASE $23 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Telephone Fault Restore'
    }
    CASE $24 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Expander Trouble'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].DEVICE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE
    }
    CASE $25 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Expander Trouble Restore'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].DEVICE_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE
    }
    CASE $26 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Fail to Communicate'
    }
    CASE $27 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Log Full'
    }
    CASE $28 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Opening'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].USER_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }
    CASE $29 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Closing'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].USER_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }
    CASE $2A :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Exit Error'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].USER_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }
    CASE $2B :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Recent Closing'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].USER_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }
    CASE $2C :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Auto-Test'
    }
    CASE $2D :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Start Program'
    }
    CASE $2E :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'End Program'
    }
    CASE $2F :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Start Download'
    }
    CASE $30 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'End Download'
    }
    CASE $31 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Cancel'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].USER_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }
    CASE $33 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Ground Fault'
    }  
    CASE $34 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Ground Fault Restore'
    } 
    CASE $35 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Manual Test'
    } 
    CASE $36 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Closed with Zones Bypassed'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].USER_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    } 
    CASE $37 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Start of listen in'
    } 
    CASE $38 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Technician on site'
    } 
    CASE $39 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Technician Left'
    } 
    CASE $3A :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Control Power Up'
    } 
    CASE $77 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'No Event Reported'
    } 
    CASE $78 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'First to Open'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].USER_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    } 
    CASE $79 :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Last to close'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].USER_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    } 
    CASE $7A :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'PIN Entered with Bit 7 Set'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].USER_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    } 
    CASE $7B :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Begin Walk-Test'
    }  
    CASE $7C :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'End Walk-Test'
    }   
    CASE $7D :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Re-exit'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].PARTITION_NUMBER = LOG_EVENT_BYTES[CADDX].PARTITION_NUMBER_BYTE + 1
    }
    CASE $7E :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Output Trip'
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].USER_NUMBER = LOG_EVENT_BYTES[CADDX].ZONE_OR_USER_OR_DEVICE_NUMBER_BYTE + 1
    }
    CASE $7F :
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'Data Lost'
    }    
    DEFAULT : 
    {
    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'CADDX did not give a valid event number'
    }
    }
    
//    }
//    ELSE IF (LOG_EVENT_BYTES[CADDX].EVENT_TYPE_BYTE & $80 = 0)
 //   {
  //  IF (CAI[CADDX].CA_DEBUG)
//	SEND_STRING 0,"'EVENT_NUMBER ',CURRENT_EVENT,' IS A NON-REPORTING EVENT'"
//	    LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].EVENT_TYPE = 'No Event Report'
 //   }
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"  
LOG_EVENT_BYTES[CADDX].MONTH_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'MONTH_BYTE = ',LOG_EVENT_BYTES[CADDX].MONTH_BYTE"   
LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].MONTH_INFO = LOG_EVENT_BYTES[CADDX].MONTH_BYTE   
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"  
LOG_EVENT_BYTES[CADDX].DAY_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'DAY_BYTE = ',LOG_EVENT_BYTES[CADDX].DAY_BYTE"   
LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].DAY_INFO = LOG_EVENT_BYTES[CADDX].DAY_BYTE
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"  
LOG_EVENT_BYTES[CADDX].HOUR_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'HOUR_BYTE = ',LOG_EVENT_BYTES[CADDX].HOUR_BYTE"   
LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].HOUR_INFO = LOG_EVENT_BYTES[CADDX].HOUR_BYTE
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"  
LOG_EVENT_BYTES[CADDX].MINUTE_BYTE= HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'MINUTE_BYTE = ',LOG_EVENT_BYTES[CADDX].MINUTE_BYTE"   
LOG_EVENT_INFO_ARRAY[CADDX][CURRENT_EVENT].MINUTE_INFO = LOG_EVENT_BYTES[CADDX].MINUTE_BYTE

}


IF(MESSAGE_TYPE = 8)
{
IF ((LEFT_STRING(STRING_RECEIVED,5)) = "$0A,'0C88'")
    {
	REMOVE_STRING(STRING_RECEIVED, "$0A,'0C88'",1)
    }
    ELSE IF ((LEFT_STRING(STRING_RECEIVED,5)) = "$0A,'0C08'")
	{
	    REMOVE_STRING(STRING_RECEIVED, "$0A,'0C08'",1)
	}
SYSTEM_STATUS_BYTES[CADDX].PANEL_ID_NUMBER_BYTE = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
SYSTEM_STATUS_INFO[CADDX].PANEL_ID_NUMBER = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
SYSTEM_STATUS_BYTES[CADDX].BYTE_3 = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'BYTE_3 = ',SYSTEM_STATUS_BYTES[CADDX].BYTE_3"
		    SYSTEM_STATUS_INFO[CADDX].LINE_SEIZURE               = SYSTEM_STATUS_BYTES[CADDX].BYTE_3 & $01
		    SYSTEM_STATUS_INFO[CADDX].OFF_HOOK                   = SYSTEM_STATUS_BYTES[CADDX].BYTE_3 & $02
		    SYSTEM_STATUS_INFO[CADDX].INITIAL_HANDSHAKE_RECEIVED = SYSTEM_STATUS_BYTES[CADDX].BYTE_3 & $04
		    SYSTEM_STATUS_INFO[CADDX].DOWNLOAD_IN_PROGRESS       = SYSTEM_STATUS_BYTES[CADDX].BYTE_3 & $08
		    SYSTEM_STATUS_INFO[CADDX].DIALER_DELAY_IN_PROGRESS   = SYSTEM_STATUS_BYTES[CADDX].BYTE_3 & $10
		    SYSTEM_STATUS_INFO[CADDX].USING_BACKUP_PHONE         = SYSTEM_STATUS_BYTES[CADDX].BYTE_3 & $20
		    SYSTEM_STATUS_INFO[CADDX].LISTEN_IN_ACTIVE           = SYSTEM_STATUS_BYTES[CADDX].BYTE_3 & $40
		    SYSTEM_STATUS_INFO[CADDX].TWO_WAY_LOCKOUT            = SYSTEM_STATUS_BYTES[CADDX].BYTE_3 & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
SYSTEM_STATUS_BYTES[CADDX].BYTE_4 = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'BYTE_4 = ',SYSTEM_STATUS_BYTES[CADDX].BYTE_4"
		    SYSTEM_STATUS_INFO[CADDX].GROUND_FAULT               = SYSTEM_STATUS_BYTES[CADDX].BYTE_4 & $01
		    SYSTEM_STATUS_INFO[CADDX].PHONE_FAULT                = SYSTEM_STATUS_BYTES[CADDX].BYTE_4 & $02
		    SYSTEM_STATUS_INFO[CADDX].FAIL_TO_COMMUNICATE        = SYSTEM_STATUS_BYTES[CADDX].BYTE_4 & $04
		    SYSTEM_STATUS_INFO[CADDX].FUSE_FAULT                 = SYSTEM_STATUS_BYTES[CADDX].BYTE_4 & $08
		    SYSTEM_STATUS_INFO[CADDX].BOX_TAMPER                 = SYSTEM_STATUS_BYTES[CADDX].BYTE_4 & $10
		    SYSTEM_STATUS_INFO[CADDX].SIREN_TAMPER_OR_TROUBLE    = SYSTEM_STATUS_BYTES[CADDX].BYTE_4 & $20
		    SYSTEM_STATUS_INFO[CADDX].LOW_BATTERY                = SYSTEM_STATUS_BYTES[CADDX].BYTE_4 & $40
		    SYSTEM_STATUS_INFO[CADDX].AC_FAIL                    = SYSTEM_STATUS_BYTES[CADDX].BYTE_4 & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
SYSTEM_STATUS_BYTES[CADDX].BYTE_5 = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))	
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'BYTE_5 = ',SYSTEM_STATUS_BYTES[CADDX].BYTE_5"
		    SYSTEM_STATUS_INFO[CADDX].EXPANDER_BOX_TAMPER                       = SYSTEM_STATUS_BYTES[CADDX].BYTE_5 & $01
		    SYSTEM_STATUS_INFO[CADDX].EXPANDER_AC_FAILURE                       = SYSTEM_STATUS_BYTES[CADDX].BYTE_5 & $02
		    SYSTEM_STATUS_INFO[CADDX].EXPANDER_LOW_BATTERY                      = SYSTEM_STATUS_BYTES[CADDX].BYTE_5 & $04
		    SYSTEM_STATUS_INFO[CADDX].EXPANDER_LOSS_OF_SUPERVISION              = SYSTEM_STATUS_BYTES[CADDX].BYTE_5 & $08
		    SYSTEM_STATUS_INFO[CADDX].EXPANDER_AUXILIARY_OUTPUT_OVER_CURRENT    = SYSTEM_STATUS_BYTES[CADDX].BYTE_5 & $10
		    SYSTEM_STATUS_INFO[CADDX].AUXILIARY_COMMUNICATION_CHANNEL_FAILURE   = SYSTEM_STATUS_BYTES[CADDX].BYTE_5 & $20
		    SYSTEM_STATUS_INFO[CADDX].EXPANDER_BELL_FAULT                       = SYSTEM_STATUS_BYTES[CADDX].BYTE_5 & $40
		    SYSTEM_STATUS_INFO[CADDX].RESERVED1                                 = SYSTEM_STATUS_BYTES[CADDX].BYTE_5 & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
SYSTEM_STATUS_BYTES[CADDX].BYTE_6 = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'BYTE_6 = ',SYSTEM_STATUS_BYTES[CADDX].BYTE_6"
		    SYSTEM_STATUS_INFO[CADDX].SIX_DIGIT_PIN_ENABLED                 = SYSTEM_STATUS_BYTES[CADDX].BYTE_6 & $01
		    SYSTEM_STATUS_INFO[CADDX].PROGRAMMING_TOKEN_IN_USE              = SYSTEM_STATUS_BYTES[CADDX].BYTE_6 & $02
		    SYSTEM_STATUS_INFO[CADDX].PIN_REQUIRED_FOR_LOCAL_DOWNLOAD       = SYSTEM_STATUS_BYTES[CADDX].BYTE_6 & $04
		    SYSTEM_STATUS_INFO[CADDX].GLOBAL_PULSING_BUZZER                 = SYSTEM_STATUS_BYTES[CADDX].BYTE_6 & $08
		    SYSTEM_STATUS_INFO[CADDX].GLOBAL_SIREN_ON                       = SYSTEM_STATUS_BYTES[CADDX].BYTE_6 & $10
		    SYSTEM_STATUS_INFO[CADDX].GLOBAL_STEADY_SIREN                   = SYSTEM_STATUS_BYTES[CADDX].BYTE_6 & $20
		    SYSTEM_STATUS_INFO[CADDX].BUS_DEVICE_HAS_LINE_SEIZED            = SYSTEM_STATUS_BYTES[CADDX].BYTE_6 & $40
		    SYSTEM_STATUS_INFO[CADDX].BUS_DEVICE_HAS_REQUESTED_SNIFF_MODE   = SYSTEM_STATUS_BYTES[CADDX].BYTE_6 & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
SYSTEM_STATUS_BYTES[CADDX].BYTE_7 = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'BYTE_7 = ',SYSTEM_STATUS_BYTES[CADDX].BYTE_7"
		    SYSTEM_STATUS_INFO[CADDX].DYNAMIC_BATTERY_TEST                 = SYSTEM_STATUS_BYTES[CADDX].BYTE_7 & $01
		    SYSTEM_STATUS_INFO[CADDX].AC_POWER_ON                          = SYSTEM_STATUS_BYTES[CADDX].BYTE_7 & $02
		    SYSTEM_STATUS_INFO[CADDX].LOW_BATTERY_MEMORY                   = SYSTEM_STATUS_BYTES[CADDX].BYTE_7 & $04
		    SYSTEM_STATUS_INFO[CADDX].GROUND_FAULT_MEMORY                  = SYSTEM_STATUS_BYTES[CADDX].BYTE_7 & $08
		    SYSTEM_STATUS_INFO[CADDX].FIRE_ALARM_VERIFICATION_BEING_TIMED  = SYSTEM_STATUS_BYTES[CADDX].BYTE_7 & $10
		    SYSTEM_STATUS_INFO[CADDX].SMOKE_POWER_RESET                    = SYSTEM_STATUS_BYTES[CADDX].BYTE_7 & $20
		    SYSTEM_STATUS_INFO[CADDX].FIFTY_HZ_LINE_POWER_DETECTED         = SYSTEM_STATUS_BYTES[CADDX].BYTE_7 & $40
		    SYSTEM_STATUS_INFO[CADDX].TIMING_A_HIGH_VOLTAGE_BATTERY_CHARGE = SYSTEM_STATUS_BYTES[CADDX].BYTE_7 & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
SYSTEM_STATUS_BYTES[CADDX].BYTE_8 = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'BYTE_8 = ',SYSTEM_STATUS_BYTES[CADDX].BYTE_8"
		    SYSTEM_STATUS_INFO[CADDX].COMMUNICATION_SINCE_LAST_AUTOTEST    = SYSTEM_STATUS_BYTES[CADDX].BYTE_8 & $01
		    SYSTEM_STATUS_INFO[CADDX].POWER_UP_DELAY_IN_PROGRESS           = SYSTEM_STATUS_BYTES[CADDX].BYTE_8 & $02
		    SYSTEM_STATUS_INFO[CADDX].WALK_TEST_MODE                       = SYSTEM_STATUS_BYTES[CADDX].BYTE_8 & $04
		    SYSTEM_STATUS_INFO[CADDX].LOSS_OF_SYSTEM_TIME                  = SYSTEM_STATUS_BYTES[CADDX].BYTE_8 & $08
		    SYSTEM_STATUS_INFO[CADDX].ENROLL_REQUESTED                     = SYSTEM_STATUS_BYTES[CADDX].BYTE_8 & $10
		    SYSTEM_STATUS_INFO[CADDX].TEST_FIXTURE_MODE                    = SYSTEM_STATUS_BYTES[CADDX].BYTE_8 & $20
		    SYSTEM_STATUS_INFO[CADDX].CONTROL_SHUTDOWN_MODE                = SYSTEM_STATUS_BYTES[CADDX].BYTE_8 & $40
		    SYSTEM_STATUS_INFO[CADDX].TIMING_A_CANCEL_WINDOW               = SYSTEM_STATUS_BYTES[CADDX].BYTE_8 & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
SYSTEM_STATUS_BYTES[CADDX].BYTE_9 = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'BYTE_9 = ',SYSTEM_STATUS_BYTES[CADDX].BYTE_9"
		    SYSTEM_STATUS_INFO[CADDX].RESERVED2              = SYSTEM_STATUS_BYTES[CADDX].BYTE_9 & $01
		    SYSTEM_STATUS_INFO[CADDX].RESERVED3              = SYSTEM_STATUS_BYTES[CADDX].BYTE_9 & $02
		    SYSTEM_STATUS_INFO[CADDX].RESERVED4              = SYSTEM_STATUS_BYTES[CADDX].BYTE_9 & $04
		    SYSTEM_STATUS_INFO[CADDX].RESERVED5              = SYSTEM_STATUS_BYTES[CADDX].BYTE_9 & $08
		    SYSTEM_STATUS_INFO[CADDX].RESERVED6              = SYSTEM_STATUS_BYTES[CADDX].BYTE_9 & $10
		    SYSTEM_STATUS_INFO[CADDX].RESERVED7              = SYSTEM_STATUS_BYTES[CADDX].BYTE_9 & $20
		    SYSTEM_STATUS_INFO[CADDX].RESERVED8              = SYSTEM_STATUS_BYTES[CADDX].BYTE_9 & $40
		    SYSTEM_STATUS_INFO[CADDX].CALL_BACK_IN_PROGRESS  = SYSTEM_STATUS_BYTES[CADDX].BYTE_9 & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
SYSTEM_STATUS_BYTES[CADDX].BYTE_10 = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'BYTE_10 = ',SYSTEM_STATUS_BYTES[CADDX].BYTE_10"
		    SYSTEM_STATUS_INFO[CADDX].PHONE_LINE_FAULTED                = SYSTEM_STATUS_BYTES[CADDX].BYTE_10 & $01
		    SYSTEM_STATUS_INFO[CADDX].VOLTAGE_PRESENT_INTERRUPT_ACTIVE  = SYSTEM_STATUS_BYTES[CADDX].BYTE_10 & $02
		    SYSTEM_STATUS_INFO[CADDX].HOUSE_PHONE_OFF_HOOK              = SYSTEM_STATUS_BYTES[CADDX].BYTE_10 & $04
		    SYSTEM_STATUS_INFO[CADDX].PHONE_LINE_MONITOR_ENABLED        = SYSTEM_STATUS_BYTES[CADDX].BYTE_10 & $08
		    SYSTEM_STATUS_INFO[CADDX].SNIFFING                          = SYSTEM_STATUS_BYTES[CADDX].BYTE_10 & $10
		    SYSTEM_STATUS_INFO[CADDX].LAST_READ_WAS_OFF_HOOK            = SYSTEM_STATUS_BYTES[CADDX].BYTE_10 & $20
		    SYSTEM_STATUS_INFO[CADDX].LISTEN_IN_REQUESTED               = SYSTEM_STATUS_BYTES[CADDX].BYTE_10 & $40
		    SYSTEM_STATUS_INFO[CADDX].LISTEN_IN_TRIGGER                 = SYSTEM_STATUS_BYTES[CADDX].BYTE_10 & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
SYSTEM_STATUS_BYTES[CADDX].BYTE_11 = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))	
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'BYTE_11 = ',SYSTEM_STATUS_BYTES[CADDX].BYTE_11"
		    SYSTEM_STATUS_INFO[CADDX].VALID_PARTITION_1             = SYSTEM_STATUS_BYTES[CADDX].BYTE_11 & $01
		    SYSTEM_STATUS_INFO[CADDX].VALID_PARTITION_2             = SYSTEM_STATUS_BYTES[CADDX].BYTE_11 & $02
		    SYSTEM_STATUS_INFO[CADDX].VALID_PARTITION_3             = SYSTEM_STATUS_BYTES[CADDX].BYTE_11 & $04
		    SYSTEM_STATUS_INFO[CADDX].VALID_PARTITION_4             = SYSTEM_STATUS_BYTES[CADDX].BYTE_11 & $08
		    SYSTEM_STATUS_INFO[CADDX].VALID_PARTITION_5             = SYSTEM_STATUS_BYTES[CADDX].BYTE_11 & $10
		    SYSTEM_STATUS_INFO[CADDX].VALID_PARTITION_6             = SYSTEM_STATUS_BYTES[CADDX].BYTE_11 & $20
		    SYSTEM_STATUS_INFO[CADDX].VALID_PARTITION_7             = SYSTEM_STATUS_BYTES[CADDX].BYTE_11 & $40
		    SYSTEM_STATUS_INFO[CADDX].VALID_PARTITION_8             = SYSTEM_STATUS_BYTES[CADDX].BYTE_11 & $80
REMOVE_STRING(STRING_RECEIVED,(LEFT_STRING(STRING_RECEIVED,2)),1)
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CADDX PACKET NOW EQUALS =',STRING_RECEIVED"
SYSTEM_STATUS_BYTES[CADDX].BYTE_12 = HEXTOI(LEFT_STRING(STRING_RECEIVED,2))	
IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'BYTE_12 = ',SYSTEM_STATUS_BYTES[CADDX].BYTE_12"
		    SYSTEM_STATUS_INFO[CADDX].COMMUNICATOR_STACK_POINTER    = SYSTEM_STATUS_BYTES[CADDX].BYTE_12


}


}


DEFINE_CALL 'CA_SEND CODE TO CADDX' (INTEGER CADDX)

{
  CLEAR_BUFFER CAI[CADDX].CA_BUFFER
  IF (CAI[CADDX].CA_DTR)
  {
    CAI[CADDX].CA_DATE_OF_LAST_SEND_RX = DATE
    CAI[CADDX].CA_TIME_OF_LAST_SEND_RX = TIME
    CALL 'CA_CANCEL WAIT' (CADDX)
    ON[CAI[CADDX].CA_CODE_SEND_WINDOW]
    IF (RIGHT_STRING(CAI[CADDX].CA_CODE_TO_SEND[CAI[CADDX].CA_OUT_POINTER],1) = "13")
      SEND_STRING CAD[CADDX],CAI[CADDX].CA_CODE_TO_SEND[CAI[CADDX].CA_OUT_POINTER]
    ELSE
      SEND_COMMAND CAD[CADDX],CAI[CADDX].CA_CODE_TO_SEND[CAI[CADDX].CA_OUT_POINTER]
    OFF[CAI[CADDX].CA_DTR]
    OFF[CAI[CADDX].CA_FINISHED]
    IF (CAI[CADDX].CA_DEBUG)
    {
      SEND_STRING 0,"'IN SEND, CADDX/CA_OUT_POINTER/DEVICE/CODE = ',
                      ITOA(CADDX),'/',
                      ITOA(CAI[CADDX].CA_OUT_POINTER),'/',
                      ITOA(CAD[CADDX].NUMBER),':',
                      ITOA(CAD[CADDX].PORT),':',
                      ITOA(CAD[CADDX].SYSTEM),'/',
                      CAI[CADDX].CA_CODE_TO_SEND[CAI[CADDX].CA_OUT_POINTER],'/'"
    }                  
(*
    SEND_STRING 0,"'TEST SEND, CAI[',ITOA(CADDX),'].CAI[CADDX].CA_DATE_OF_LAST_SEND_RX = ',CAI[CADDX].CA_DATE_OF_LAST_SEND_RX"
    SEND_STRING 0,"'TEST SEND, CAI[',ITOA(CADDX),'].CAI[CADDX].CA_TIME_OF_LAST_SEND_RX = ',CAI[CADDX].CA_TIME_OF_LAST_SEND_RX"
    SEND_STRING 0,"'TEST SEND, CAI[',ITOA(CADDX),'].CA_DTR = ',ITOA(CAI[CADDX].CA_DTR)"
    SEND_STRING 0,"'TEST SEND, CAI[',ITOA(CADDX),'].CA_DTR = ',ITOA(CAI[CADDX].CA_DTR)"
    SEND_STRING 0,"'TEST SEND, CAI[',ITOA(CADDX),'].CA_ITR = ',ITOA(CAI[CADDX].CA_ITR)"
    SEND_STRING 0,"'TEST SEND, CAI[',ITOA(CADDX),'].CA_IN_POINTER = ',ITOA(CAI[CADDX].CA_IN_POINTER)"
    SEND_STRING 0,"'TEST SEND, CAI[',ITOA(CADDX),'].CA_OUT_POINTER = ',ITOA(CAI[CADDX].CA_OUT_POINTER)"
*)    
  }
}

DEFINE_CALL 'CA_CHECK SEND WINDOW AND SEND' (INTEGER CADDX)
{
#IF_DEFINED CA_CD1
  IF ((CADDX = 1) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD2
  IF ((CADDX = 2) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD3
  IF ((CADDX = 3) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD4
  IF ((CADDX = 4) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD5
  IF ((CADDX = 5) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD6
  IF ((CADDX = 6) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD7
  IF ((CADDX = 7) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD8
  IF ((CADDX = 8) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD9
  IF ((CADDX = 9) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD10
  IF ((CADDX = 10) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD11
  IF ((CADDX = 11) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD12
  IF ((CADDX = 12) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD13
  IF ((CADDX = 13) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD14
  IF ((CADDX = 14) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD15
  IF ((CADDX = 15) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD16
  IF ((CADDX = 16) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD17
  IF ((CADDX = 17) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD18
  IF ((CADDX = 18) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD19
  IF ((CADDX = 19) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD20
  IF ((CADDX = 20) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD21
  IF ((CADDX = 21) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD22
  IF ((CADDX = 22) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD23
  IF ((CADDX = 23) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD24
  IF ((CADDX = 24) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD25
  IF ((CADDX = 25) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD26
  IF ((CADDX = 26) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD27
  IF ((CADDX = 27) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD28
  IF ((CADDX = 28) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD29
  IF ((CADDX = 29) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD30
  IF ((CADDX = 30) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD31
  IF ((CADDX = 31) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD32
  IF ((CADDX = 32) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD33
  IF ((CADDX = 33) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD34
  IF ((CADDX = 34) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD35
  IF ((CADDX = 35) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD36
  IF ((CADDX = 36) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD37
  IF ((CADDX = 37) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD38
  IF ((CADDX = 38) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD39
  IF ((CADDX = 39) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD40
  IF ((CADDX = 40) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD41
  IF ((CADDX = 41) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD42
  IF ((CADDX = 42) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD43
  IF ((CADDX = 43) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD44
  IF ((CADDX = 44) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD45
  IF ((CADDX = 45) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD46
  IF ((CADDX = 46) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD47
  IF ((CADDX = 47) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD48
  IF ((CADDX = 48) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD49
  IF ((CADDX = 49) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
#IF_DEFINED CA_CD50
  IF ((CADDX = 50) AND (!CAI[CADDX].CA_CODE_SEND_WINDOW))
    CALL 'CA_SEND CODE TO CADDX' (CADDX)
#END_IF    
}

DEFINE_CALL 'CA_PROCESS FEEDBACK' (INTEGER CADDX,CHAR COMPLETE_PACKET[150])

LOCAL_VAR INTEGER TEST_POINT1
          INTEGER TEST_POINT2
          INTEGER TEST_POINT3
          INTEGER TEST_POINT4
          INTEGER TEST_POINT5
          INTEGER PASS_COUNT
          INTEGER ZONE_COUNT
          INTEGER MAX_ZONE_COUNT
	  CHAR MESSAGE_TYPE[3]
          CHAR COPY_OF_COMPLETE_PACKET[150]

{

  CALL 'CA_CANCEL WAIT' (CADDX)
  ON[CAI[CADDX].CA_CODE_SEND_WINDOW]
  SELECT
  {
    ACTIVE ((FIND_STRING(COMPLETE_PACKET,"$0A",1)) AND (FIND_STRING(COMPLETE_PACKET,"$0D",1))) :
    {
		IF(MID_STRING(COMPLETE_PACKET,4,1) = '8')
			{
				    SEND_STRING CAD[CADDX],"$0A,'011D1E1F',$0D"
			            IF (CAI[CADDX].CA_DEBUG)
										SEND_STRING 0,"'IMMEDIATE ACKNOWLEDGEMENT SENT TO CADDX'" 				    
				    
			}
      COPY_OF_COMPLETE_PACKET = COMPLETE_PACKET
		        IF (FIND_STRING(COMPLETE_PACKET , "$0A,'0B81'", 1))
			{                                             
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,'MESSAGE TYPE 01h STRING FOUND'
				MESSAGE_TYPE = '81h'
			    CALL 'STORE INFO'(CADDX,COMPLETE_PACKET,1)
			}
		        ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'0B01'", 1))
			{   
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,'MESSAGE TYPE 01h STRING FOUND'
				MESSAGE_TYPE = '01h'
			    CALL 'STORE INFO'(CADDX,COMPLETE_PACKET,1)
			}
			ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'0986'", 1))
			{
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,'MESSAGE TYPE 06h STRING FOUND'
				MESSAGE_TYPE = '86h'				
			    CALL 'STORE INFO'(CADDX,COMPLETE_PACKET,6)
			    
			}
			ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'0906'", 1))
			{
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,'MESSAGE TYPE 06h STRING FOUND'
				MESSAGE_TYPE = '06h'
			    CALL 'STORE INFO'(CADDX,COMPLETE_PACKET,6)
			    
			}
			ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'0987'", 1))
			{
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,'MESSAGE TYPE 07h STRING FOUND'
				MESSAGE_TYPE = '87h'
			    CALL 'STORE INFO'(CADDX,COMPLETE_PACKET,7)
			    
			}
			ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'0907'", 1))
			{
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,'MESSAGE TYPE 07h STRING FOUND'
				MESSAGE_TYPE = '07h'
			    CALL 'STORE INFO'(CADDX,COMPLETE_PACKET,7)
			    
			}			
			ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'0884'", 1))
			{
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,'MESSAGE TYPE 04h STRING FOUND'
				MESSAGE_TYPE = '84h'
			    CALL 'STORE INFO'(CADDX,COMPLETE_PACKET,4)
			    
			}
			ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'0804'", 1))
			{
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,'MESSAGE TYPE 04h STRING FOUND'
				MESSAGE_TYPE = '04h'
			    CALL 'STORE INFO'(CADDX,COMPLETE_PACKET,4)
			    
			}			
			ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'0A85'", 1))
			{
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,'MESSAGE TYPE 05h STRING FOUND'
				MESSAGE_TYPE = '85h'
			    CALL 'STORE INFO'(CADDX,COMPLETE_PACKET,5)
			    
			}
			ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'0A05'", 1))
			{
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,'MESSAGE TYPE 05h STRING FOUND'
				MESSAGE_TYPE = '05h'
			    CALL 'STORE INFO'(CADDX,COMPLETE_PACKET,5)
			    
			}			
			ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'0C88'", 1))
			{
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,'MESSAGE TYPE 08h STRING FOUND'
				MESSAGE_TYPE = '88h'
			    CALL 'STORE INFO'(CADDX,COMPLETE_PACKET,8)
			    
			}
			ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'0C08'", 1))
			{
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,'MESSAGE TYPE 08h STRING FOUND'
				MESSAGE_TYPE = '08h'
			    CALL 'STORE INFO'(CADDX,COMPLETE_PACKET,8)
			    
			}			
			ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'0712'", 1))
			{
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,'MESSAGE TYPE 12h STRING FOUND'
				MESSAGE_TYPE = '12h'
			        CALL 'STORE INFO'(CADDX,COMPLETE_PACKET,12)
			    
			}
			ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'0A8A'", 1))
			{
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,'MESSAGE TYPE 0Ah STRING FOUND'
				MESSAGE_TYPE = '8Ah'
			        CALL 'STORE INFO'(CADDX,COMPLETE_PACKET,10)
			    
			}
			ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'0A0A'", 1))
			{
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,'MESSAGE TYPE 0Ah STRING FOUND'
				MESSAGE_TYPE = '0Ah'				
			        CALL 'STORE INFO'(CADDX,COMPLETE_PACKET,10)
			    
			}
			ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'1203'", 1))
			(*NB!!!- MUST STIL TEST WHETHER MESSAGE LENGTH BYTE CHANGES IF ZONE NAME IS CHANGED!!!*)
			{
			    IF (CAI[CADDX].CA_DEBUG)                                
				SEND_STRING 0,'MESSAGE TYPE 03h STRING FOUND'
				MESSAGE_TYPE = '03h'				
			        CALL 'STORE INFO'(CADDX,COMPLETE_PACKET,3)
			    
			}
			ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'0489'", 1))
			{
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,'MESSAGE TYPE 09h STRING FOUND'
				MESSAGE_TYPE = '89h'				
			    
			}
			ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'011D'", 1))
			{
			    IF (CAI[CADDX].CA_DEBUG)                                
				SEND_STRING 0,'MESSAGE TYPE 1Dh STRING FOUND'			
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,"'POSITIVE ACKNOWLEDGEMENT MESSAGE WAS RECEIVED FROM CADDX ',CADDX"
				MESSAGE_TYPE = '1Dh'				
			    
			}		
			ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'011C'", 1))
			{
			    IF (CAI[CADDX].CA_DEBUG)                                
				SEND_STRING 0,'MESSAGE TYPE 1Ch STRING FOUND'			
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,"'COMMAND/REQUEST FAILED MESSAGE WAS RECEIVED FROM CADDX ',CADDX"
				MESSAGE_TYPE = '1Ch'				
			    
			}			
			ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'011E'", 1))
			{
			    IF (CAI[CADDX].CA_DEBUG)                                
				SEND_STRING 0,'MESSAGE TYPE 1Eh STRING FOUND'			
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,"'NEGATIVE ACKNOWLEDGEMENT MESSAGE WAS RECEIVED FROM CADDX ',CADDX"
				MESSAGE_TYPE = '1Eh'				
			    
			}			
			ELSE IF (FIND_STRING(COMPLETE_PACKET , "$0A,'011F'", 1))
			{
			    IF (CAI[CADDX].CA_DEBUG)                                
				SEND_STRING 0,'MESSAGE TYPE 1Fh STRING FOUND'			
			    IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,"'MESSAGE REJECTED MESSAGE WAS RECEIVED FROM CADDX ',CADDX"
				MESSAGE_TYPE = '1Fh'				
			    
			}			
			ELSE
			{
			SEND_STRING 0,"'VALID, UNRECOGNISED PACKET RECEIVED: ',COMPLETE_PACKET"
							MESSAGE_TYPE = ''
			}
			
			SELECT
			{
				ACTIVE ((!CAI[CADDX].CA_DTR) AND (LEFT_STRING(CAI[CADDX].CA_CODE_TO_SEND[CAI[CADDX].CA_OUT_POINTER],5) =  "$0A,'0834'") AND (MESSAGE_TYPE = '12h')) :
				{
				    IF (CAI[CADDX].CA_DEBUG)				
				        SEND_STRING 0,"'VALID ANSWER COMMUNICATION WAS RECEIVED FROM CADDX ',CADDX,' FOR SET USER CODE COMMAND WITH PIN REQUEST'"
					ON[CAI[CADDX].CA_VALID_FEEDBACK] 
				}			
				ACTIVE ((!CAI[CADDX].CA_DTR) AND (LEFT_STRING(CAI[CADDX].CA_CODE_TO_SEND[CAI[CADDX].CA_OUT_POINTER],5) =  "$0A,'0535'") AND (MESSAGE_TYPE = '12h')) :
				{
				    IF (CAI[CADDX].CA_DEBUG)				
				        SEND_STRING 0,"'VALID ANSWER COMMUNICATION WAS RECEIVED FROM CADDX ',CADDX,' FOR SET USER CODE COMMAND WITHOUT PIN REQUEST'"
					ON[CAI[CADDX].CA_VALID_FEEDBACK] 
				}			
				ACTIVE ((!CAI[CADDX].CA_DTR) AND (LEFT_STRING(CAI[CADDX].CA_CODE_TO_SEND[CAI[CADDX].CA_OUT_POINTER],5) =  "$0A,'0225'") AND (MESSAGE_TYPE = '05h')) :
				{
				    IF (CAI[CADDX].CA_DEBUG)				
				        SEND_STRING 0,"'VALID ANSWER COMMUNICATION WAS RECEIVED FROM CADDX ',CADDX,' FOR ZONES SNAPSHOT REQUEST'"
					ON[CAI[CADDX].CA_VALID_FEEDBACK] 
				}				
				ACTIVE ((!CAI[CADDX].CA_DTR) AND (LEFT_STRING(CAI[CADDX].CA_CODE_TO_SEND[CAI[CADDX].CA_OUT_POINTER],5) =  "$0A,'0127'") AND (MESSAGE_TYPE = '07h')) :
				{
				    IF (CAI[CADDX].CA_DEBUG)				
				        SEND_STRING 0,"'VALID ANSWER COMMUNICATION WAS RECEIVED FROM CADDX ',CADDX,' FOR PARTITIONS SNAPSHOT REQUEST'"
					ON[CAI[CADDX].CA_VALID_FEEDBACK] 
				}			
				ACTIVE ((!CAI[CADDX].CA_DTR) AND (LEFT_STRING(CAI[CADDX].CA_CODE_TO_SEND[CAI[CADDX].CA_OUT_POINTER],5) =  "$0A,'0233'") AND (MESSAGE_TYPE = '12h')) :
				{
				    IF (CAI[CADDX].CA_DEBUG)				
				        SEND_STRING 0,"'VALID ANSWER COMMUNICATION WAS RECEIVED FROM CADDX ',CADDX,' FOR USER INFO REQUEST'"
					ON[CAI[CADDX].CA_VALID_FEEDBACK] 
				}
				ACTIVE ((!CAI[CADDX].CA_DTR) AND (LEFT_STRING(CAI[CADDX].CA_CODE_TO_SEND[CAI[CADDX].CA_OUT_POINTER],5) =  "$0A,'0224'") AND (MESSAGE_TYPE = '04h')) :
				{
				    IF (CAI[CADDX].CA_DEBUG)				
				        SEND_STRING 0,"'VALID ANSWER COMMUNICATION WAS RECEIVED FROM CADDX ',CADDX,' FOR ZONE STATUS REQUEST'"
					ON[CAI[CADDX].CA_VALID_FEEDBACK] 
				}		
				ACTIVE ((!CAI[CADDX].CA_DTR) AND (LEFT_STRING(CAI[CADDX].CA_CODE_TO_SEND[CAI[CADDX].CA_OUT_POINTER],5) =  "$0A,'0223'") AND (MESSAGE_TYPE = '03h')) :
				{
				    IF (CAI[CADDX].CA_DEBUG)				
				        SEND_STRING 0,"'VALID ANSWER COMMUNICATION WAS RECEIVED FROM CADDX ',CADDX,' FOR ZONE NAME REQUEST'"
					ON[CAI[CADDX].CA_VALID_FEEDBACK] 
				}
				ACTIVE ((!CAI[CADDX].CA_DTR) AND (LEFT_STRING(CAI[CADDX].CA_CODE_TO_SEND[CAI[CADDX].CA_OUT_POINTER],5) =  "$0A,'0121'") AND (MESSAGE_TYPE = '01h')) :
				{
				    IF (CAI[CADDX].CA_DEBUG)				
				        SEND_STRING 0,"'VALID ANSWER COMMUNICATION WAS RECEIVED FROM CADDX ',CADDX,' FOR INTERFACE CONFIGURATION MESSAGE REQUEST'"
					ON[CAI[CADDX].CA_VALID_FEEDBACK] 
				}	
				ACTIVE ((!CAI[CADDX].CA_DTR) AND (LEFT_STRING(CAI[CADDX].CA_CODE_TO_SEND[CAI[CADDX].CA_OUT_POINTER],5) =  "$0A,'0226'") AND (MESSAGE_TYPE = '06h')) :
				{
				    IF (CAI[CADDX].CA_DEBUG)				
				        SEND_STRING 0,"'VALID ANSWER COMMUNICATION WAS RECEIVED FROM CADDX ',CADDX,' FOR PARTITION STATUS REQUEST'"
					ON[CAI[CADDX].CA_VALID_FEEDBACK] 
				}					
				ACTIVE ((!CAI[CADDX].CA_DTR) AND (LEFT_STRING(CAI[CADDX].CA_CODE_TO_SEND[CAI[CADDX].CA_OUT_POINTER],5) =  "$0A,'0128'") AND (MESSAGE_TYPE = '08h')) :
				{
				    IF (CAI[CADDX].CA_DEBUG)				
				        SEND_STRING 0,"'VALID ANSWER COMMUNICATION WAS RECEIVED FROM CADDX ',CADDX,' FOR SYSTEM STATUS REQUEST'"
					ON[CAI[CADDX].CA_VALID_FEEDBACK] 
				}	
				ACTIVE ((!CAI[CADDX].CA_DTR) AND (LEFT_STRING(CAI[CADDX].CA_CODE_TO_SEND[CAI[CADDX].CA_OUT_POINTER],5) =  "$0A,'022A'") AND (MESSAGE_TYPE = '0Ah')) :
				{
				    IF (CAI[CADDX].CA_DEBUG)				
				        SEND_STRING 0,"'VALID ANSWER COMMUNICATION WAS RECEIVED FROM CADDX ',CADDX,' FOR LOG EVENT REQUEST'"
					ON[CAI[CADDX].CA_VALID_FEEDBACK] 
				}				
			}
    }
	 ACTIVE (1):
	 {
      IF (CAI[CADDX].CA_DEBUG)
        SEND_STRING 0,"'FEEDBACK WITHOUT START OR STOP BYTES SENT FROM CADDX ',ITOA(CADDX),' = ',COMPLETE_PACKET"
        COPY_OF_COMPLETE_PACKET = COMPLETE_PACKET
      
	 } 
	}  
}

DEFINE_CALL 'CA_CALCULATE TIME SINCE LAST OFFLINE' (INTEGER CADDX,INTEGER TICA_SINCE_LAST_OFFLINE)
LOCAL_VAR SINTEGER CURRENT_DAY
          SINTEGER CURRENT_HOUR
          SINTEGER CURRENT_MINUTE
          SINTEGER CURRENT_SECOND
          SINTEGER LAST_DAY
          SINTEGER LAST_HOUR
          SINTEGER LAST_MINUTE
          SINTEGER LAST_SECOND
          SINTEGER ABSOLUTE_CURRENT_SECOND
          SINTEGER ABSOLUTE_LAST_SECOND

{
  CURRENT_DAY    = DATE_TO_DAY(DATE)
  CURRENT_HOUR   = TIME_TO_HOUR(TIME)
  CURRENT_MINUTE = TIME_TO_MINUTE(TIME)
  CURRENT_SECOND = TIME_TO_SECOND(TIME)
  LAST_DAY    = DATE_TO_DAY(CAI[CADDX].CA_LAST_OFFLINE_DATE)
  LAST_HOUR   = TIME_TO_HOUR(CAI[CADDX].CA_LAST_OFFLINE_TIME)
  LAST_MINUTE = TIME_TO_MINUTE(CAI[CADDX].CA_LAST_OFFLINE_TIME)
  LAST_SECOND = TIME_TO_SECOND(CAI[CADDX].CA_LAST_OFFLINE_TIME)
  ABSOLUTE_CURRENT_SECOND = TYPE_CAST(TYPE_CAST(CURRENT_HOUR) * 3600 + TYPE_CAST(CURRENT_MINUTE) * 60 + TYPE_CAST(CURRENT_SECOND))
  ABSOLUTE_LAST_SECOND    = TYPE_CAST(TYPE_CAST(LAST_HOUR)    * 3600 + TYPE_CAST(LAST_MINUTE)    * 60 + TYPE_CAST(LAST_SECOND))
  IF (CURRENT_DAY = LAST_DAY)
    TICA_SINCE_LAST_OFFLINE    = TYPE_CAST(ABSOLUTE_CURRENT_SECOND - ABSOLUTE_LAST_SECOND)
  ELSE  
    TICA_SINCE_LAST_OFFLINE    = TYPE_CAST(ABSOLUTE_CURRENT_SECOND)
(*  
  IF (CAI[CADDX].CA_DEBUG)
  {
    SEND_STRING 0,"'LAST DAY/HOUR/MINUTE/SECOND = ',ITOA(LAST_DAY),'/',ITOA(LAST_HOUR),'/',ITOA(LAST_MINUTE),'/',ITOA(LAST_SECOND),10,13"
    SEND_STRING 0,"'CURRENT DAY/HOUR/MINUTE/SECOND = ',ITOA(CURRENT_DAY),'/',ITOA(CURRENT_HOUR),'/',ITOA(CURRENT_MINUTE),'/',ITOA(CURRENT_SECOND),10,13"
    SEND_STRING 0,"'ABSOLUTE_LAST_SECOND/ABSOLUTE_CURRENT_SECOND = ',ITOA(ABSOLUTE_LAST_SECOND),'/',ITOA(ABSOLUTE_CURRENT_SECOND),10,13"
    SEND_STRING 0,"'TICA_SINCE_LAST_SEND = ',ITOA(TICA_SINCE_LAST_SEND),10,13"
  }
*)  
}      

DEFINE_CALL 'CA_CALCULATE TIME SINCE LAST SEND RECEIVE' (INTEGER CADDX,INTEGER TICA_SINCE_LAST_SEND)

LOCAL_VAR SINTEGER CURRENT_DAY
          SINTEGER CURRENT_HOUR
          SINTEGER CURRENT_MINUTE
          SINTEGER CURRENT_SECOND
          SINTEGER LAST_DAY
          SINTEGER LAST_HOUR
          SINTEGER LAST_MINUTE
          SINTEGER LAST_SECOND
          SINTEGER ABSOLUTE_CURRENT_SECOND
          SINTEGER ABSOLUTE_LAST_SECOND

{
  CURRENT_DAY    = DATE_TO_DAY(DATE)
  CURRENT_HOUR   = TIME_TO_HOUR(TIME)
  CURRENT_MINUTE = TIME_TO_MINUTE(TIME)
  CURRENT_SECOND = TIME_TO_SECOND(TIME)
  LAST_DAY    = DATE_TO_DAY(CAI[CADDX].CA_DATE_OF_LAST_SEND_RX)
  LAST_HOUR   = TIME_TO_HOUR(CAI[CADDX].CA_TIME_OF_LAST_SEND_RX)
  LAST_MINUTE = TIME_TO_MINUTE(CAI[CADDX].CA_TIME_OF_LAST_SEND_RX)
  LAST_SECOND = TIME_TO_SECOND(CAI[CADDX].CA_TIME_OF_LAST_SEND_RX)
  ABSOLUTE_CURRENT_SECOND = TYPE_CAST(TYPE_CAST(CURRENT_HOUR) * 3600 + TYPE_CAST(CURRENT_MINUTE) * 60 + TYPE_CAST(CURRENT_SECOND))
  ABSOLUTE_LAST_SECOND    = TYPE_CAST(TYPE_CAST(LAST_HOUR)    * 3600 + TYPE_CAST(LAST_MINUTE)    * 60 + TYPE_CAST(LAST_SECOND))
  IF (CURRENT_DAY = LAST_DAY)
    TICA_SINCE_LAST_SEND    = TYPE_CAST(ABSOLUTE_CURRENT_SECOND - ABSOLUTE_LAST_SECOND)
  ELSE  
    TICA_SINCE_LAST_SEND    = TYPE_CAST(ABSOLUTE_CURRENT_SECOND)
(*  
  IF (CAI[CADDX].CA_DEBUG)
  {
    SEND_STRING 0,"'LAST DAY/HOUR/MINUTE/SECOND = ',ITOA(LAST_DAY),'/',ITOA(LAST_HOUR),'/',ITOA(LAST_MINUTE),'/',ITOA(LAST_SECOND),10,13"
    SEND_STRING 0,"'CURRENT DAY/HOUR/MINUTE/SECOND = ',ITOA(CURRENT_DAY),'/',ITOA(CURRENT_HOUR),'/',ITOA(CURRENT_MINUTE),'/',ITOA(CURRENT_SECOND),10,13"
    SEND_STRING 0,"'ABSOLUTE_LAST_SECOND/ABSOLUTE_CURRENT_SECOND = ',ITOA(ABSOLUTE_LAST_SECOND),'/',ITOA(ABSOLUTE_CURRENT_SECOND),10,13"
    SEND_STRING 0,"'TICA_SINCE_LAST_SEND = ',ITOA(TICA_SINCE_LAST_SEND),10,13"
  }
*)  
}      

DEFINE_CALL 'CA_SEND FROM BUFFER' (INTEGER CADDX)

LOCAL_VAR TICA_SINCE_LAST_SEND

{
  SELECT
  {
    ACTIVE ((CAI[CADDX].CA_OUT_POINTER <> CAI[CADDX].CA_IN_POINTER) AND
            (CAI[CADDX].CA_FEEDBACK_FLAG[CAI[CADDX].CA_OUT_POINTER] > 1) AND
            (!CAI[CADDX].CA_DTR)) :
    {
      CALL 'CA_CALCULATE TIME SINCE LAST SEND RECEIVE' (CADDX,TICA_SINCE_LAST_SEND)
(*      
      IF (CAI[CADDX].CA_DEBUG)
        SEND_STRING 0,"'CA_FEEDBACK_FLAG/DTR/TIME SINCE = ',ITOA(CAI[CADDX].CA_FEEDBACK_FLAG[CAI[CADDX].CA_OUT_POINTER]),'/',ITOA(CAI[CADDX].CA_DTR),'/',ITOA(TICA_SINCE_LAST_SEND),10,13"
*)        
      IF (TICA_SINCE_LAST_SEND >= 4)
      {
        OFF[CAI[CADDX].CA_MAX_PERIOD]
        IF (CAI[CADDX].CA_DEBUG)
          SEND_STRING 0,"'COMMS TO CADDX ',ITOA(CADDX),' TIMED OUT!!',10,13"
        CADI[CADDX].CA_NUMBER_OF_COMMS_RETRIES++
      }    
    }  
    
    ACTIVE ((CAI[CADDX].CA_OUT_POINTER <> CAI[CADDX].CA_IN_POINTER) AND (CAI[CADDX].CA_DTR)) :
    {
      CALL 'CA_CALCULATE TIME SINCE LAST SEND RECEIVE' (CADDX,TICA_SINCE_LAST_SEND)
(*      
      IF (CAI[CADDX].CA_DEBUG)
        SEND_STRING 0,"'CA_FEEDBACK_FLAG/DTR/TIME SINCE = ',ITOA(CAI[CADDX].CA_FEEDBACK_FLAG[CAI[CADDX].CA_OUT_POINTER]),'/',ITOA(CAI[CADDX].CA_DTR),'/',ITOA(TICA_SINCE_LAST_SEND),10,13"
*)        
    }
  }

  SELECT
  {
    ACTIVE ((CAI[CADDX].CA_OUT_POINTER <> CAI[CADDX].CA_IN_POINTER) AND
            (CAI[CADDX].CA_DTR)) :
    {
      OFF[CAI[CADDX].CA_WATCH_DOG]
      CAI[CADDX].CA_STORE_GET_VALUE = 255
      OFF[CAI[CADDX].CA_FINISHED]
      IF ((CAI[CADDX].CA_FEEDBACK_FLAG[CAI[CADDX].CA_OUT_POINTER] > 0) AND (!CAI[CADDX].CA_MAX_PERIOD))
      {
//        SEND_STRING 0,"'TEST, CAI[',ITOA(CADDX),'].CA_FEEDBACK_FLAG[',ITOA(CAI[CADDX].CA_OUT_POINTER),'] = ',ITOA(CAI[CADDX].CA_FEEDBACK_FLAG[CAI[CADDX].CA_OUT_POINTER])"
        CAI[CADDX].CA_FEEDBACK_FLAG[CAI[CADDX].CA_OUT_POINTER] = CAI[CADDX].CA_FEEDBACK_FLAG[CAI[CADDX].CA_OUT_POINTER] + 1
      }
        
      ON[CAI[CADDX].CA_MAX_PERIOD]
      CALL 'CA_CHECK SEND WINDOW AND SEND' (CADDX)
    }
    
    ACTIVE ((CAI[CADDX].CA_OUT_POINTER <> CAI[CADDX].CA_IN_POINTER) AND
            (!CAI[CADDX].CA_DTR) AND (TICA_SINCE_LAST_SEND >= 10)) :
    {        
      IF (!CAI[CADDX].CA_WATCH_DOG)
      {
        ON[CAI[CADDX].CA_WATCH_DOG]
      }
    }
  }

  SELECT
  {
    ACTIVE ((!CAI[CADDX].CA_MAX_PERIOD) AND (CAI[CADDX].CA_FEEDBACK_FLAG[CAI[CADDX].CA_OUT_POINTER] <= 4) AND
           (!CAI[CADDX].CA_SPONT_DETECTED) AND (!CAI[CADDX].CA_PROCESS_SPONT_FBACK) AND
           (!CAI[CADDX].CA_PROCESSED_SPONT_FBACK)) :
    {
      ON[CAI[CADDX].CA_DTR]
    }

    ACTIVE ((!CAI[CADDX].CA_DTR) AND (CAI[CADDX].CA_SPONT_DETECTED) AND (!CAI[CADDX].CA_PROCESS_SPONT_FBACK) AND
           (!CAI[CADDX].CA_PROCESSED_SPONT_FBACK)) :
    {
      OFF[CAI[CADDX].CA_SPONT_DETECTED]
      ON[CAI[CADDX].CA_PROCESS_SPONT_FBACK]
    }
  }

  IF (!CAI[CADDX].CA_DTR)
  {
    IF (((CAI[CADDX].CA_FEEDBACK_FLAG[CAI[CADDX].CA_OUT_POINTER] > 4) OR
       (CAI[CADDX].CA_FEEDBACK_FLAG[CAI[CADDX].CA_OUT_POINTER] = 0)) AND
       (!CAI[CADDX].CA_PROCESS_SPONT_FBACK) AND (!CAI[CADDX].CA_PROCESSED_SPONT_FBACK))
    {
      IF (CAI[CADDX].CA_DEBUG)
      {
        SEND_STRING 0,"'CA_FEEDBACK_FLAG[',ITOA(CADDX),'] = ',ITOA(CAI[CADDX].CA_FEEDBACK_FLAG[CAI[CADDX].CA_OUT_POINTER])"
      }

      ON[CAI[CADDX].CA_FINISHED]
      IF (CAI[CADDX].CA_FEEDBACK_FLAG[CAI[CADDX].CA_OUT_POINTER] > 4)
      {
        CADI[CADDX].CA_NUMBER_OF_COMMS_FAILURES++
        CADI[CADDX].CA_CIRCULAR_POINTER++
        IF (CADI[CADDX].CA_CIRCULAR_POINTER > 5)
          CADI[CADDX].CA_CIRCULAR_POINTER = 1
        CADI[CADDX].CA_DATE_OF_COMMS_FAILURE[CADI[CADDX].CA_CIRCULAR_POINTER] = DATE
        CADI[CADDX].CA_TICA_OF_COMMS_FAILURE[CADI[CADDX].CA_CIRCULAR_POINTER] = TIME
      }
    }
    
    IF (CAI[CADDX].CA_FINISHED)
    {
      IF (CAI[CADDX].CA_DEBUG)
      {
        SEND_STRING 0,"'CA_FINISHED[',ITOA(CADDX),']!!'"
        SEND_STRING 0,' '
      }
        
      OFF[CAI[CADDX].CA_MAX_PERIOD]
      IF (!CAI[CADDX].CA_LINKED_STATE[CAI[CADDX].CA_OUT_POINTER])
        ON[CAI[CADDX].CA_ITR]
      IF ((!CAI[CADDX].CA_SPONT_DETECTED) AND (!CAI[CADDX].CA_PROCESS_SPONT_FBACK) AND
         (!CAI[CADDX].CA_PROCESSED_SPONT_FBACK))
      {
        CAI[CADDX].CA_FEEDBACK_FLAG[CAI[CADDX].CA_OUT_POINTER] = 0
        CAI[CADDX].CA_OUT_POINTER = CAI[CADDX].CA_OUT_POINTER + 1
        IF (CAI[CADDX].CA_OUT_POINTER > CA_CIRCULAR_BUFFER_SIZE)
          CAI[CADDX].CA_OUT_POINTER = 1
(*
        SEND_STRING 0,"'TEST SEND FROM, CAI[',ITOA(CADDX),'].CAI[CADDX].CA_DATE_OF_LAST_SEND_RX = ',CAI[CADDX].CA_DATE_OF_LAST_SEND_RX"
        SEND_STRING 0,"'TEST SEND FROM, CAI[',ITOA(CADDX),'].CAI[CADDX].CA_TIME_OF_LAST_SEND_RX = ',CAI[CADDX].CA_TIME_OF_LAST_SEND_RX"
        SEND_STRING 0,"'TEST SEND FROM, CAI[',ITOA(CADDX),'].CA_DTR = ',ITOA(CAI[CADDX].CA_DTR)"
        SEND_STRING 0,"'TEST SEND FROM, CAI[',ITOA(CADDX),'].CA_ITR = ',ITOA(CAI[CADDX].CA_ITR)"
        SEND_STRING 0,"'TEST SEND FROM, CAI[',ITOA(CADDX),'].CA_IN_POINTER = ',ITOA(CAI[CADDX].CA_IN_POINTER)"
        SEND_STRING 0,"'TEST SEND FROM, CAI[',ITOA(CADDX),'].CA_OUT_POINTER = ',ITOA(CAI[CADDX].CA_OUT_POINTER)"
*)
        ON[CAI[CADDX].CA_DTR]
      }
      ELSE
      {
        IF ((!CAI[CADDX].CA_PROCESS_SPONT_FBACK) AND (CAI[CADDX].CA_PROCESSED_SPONT_FBACK))
        {
          OFF[CAI[CADDX].CA_PROCESSED_SPONT_FBACK]
          ON[CAI[CADDX].CA_DTR]
        }
      }
    }
  }
}

DEFINE_CALL 'CA_BUFFER CODE' (INTEGER CADDX,CHAR CA_COMMAND[CA_BUFFER_SIZE],FEEDBACK_STATE,LINKED_TO_NEXT)
{
  CAI[CADDX].CA_CODE_TO_SEND[CAI[CADDX].CA_IN_POINTER] = CA_COMMAND
  
  IF (CAI[CADDX].CA_DEBUG)
  {
    SEND_STRING 0,"'IN BUFFER, CADDX/CA_IN_POINTER/CA_CODE_TO_SEND = ',
                    ITOA(CADDX),'/',
                    ITOA(CAI[CADDX].CA_IN_POINTER),'/',
                    CAI[CADDX].CA_CODE_TO_SEND[CAI[CADDX].CA_IN_POINTER],10,13"
(*    
    SEND_STRING 0,"'IN BUFFER, CADDX/OUT_POINTER/DTR/ITR = ',
                    ITOA(CADDX),'/',ITOA(CAI[CADDX].CA_OUT_POINTER),'/',
                    ITOA(CAI[CADDX].CA_DTR),'/',ITOA(CAI[CADDX].CA_ITR),10,13"
*)                    
  }
                    
  CAI[CADDX].CA_LINKED_STATE[CAI[CADDX].CA_IN_POINTER] = LINKED_TO_NEXT
  CAI[CADDX].CA_FEEDBACK_FLAG[CAI[CADDX].CA_IN_POINTER] = FEEDBACK_STATE
  IF (CAI[CADDX].CA_DEBUG)
    SEND_STRING 0,"'CAI[',ITOA(CADDX),'].CA_FEEDBACK_FLAG[',ITOA(CAI[CADDX].CA_IN_POINTER),'] = ',ITOA(CAI[CADDX].CA_FEEDBACK_FLAG[CAI[CADDX].CA_IN_POINTER])"
  CAI[CADDX].CA_IN_POINTER = CAI[CADDX].CA_IN_POINTER + 1
  IF (CAI[CADDX].CA_IN_POINTER  > CA_CIRCULAR_BUFFER_SIZE)
    CAI[CADDX].CA_IN_POINTER  = 1
  OFF[CAI[CADDX].CA_ITR]
(*
  SEND_STRING 0,"'TEST BUFFER, CAI[',ITOA(CADDX),'].CAI[CADDX].CA_DATE_OF_LAST_SEND_RX = ',CAI[CADDX].CA_DATE_OF_LAST_SEND_RX"
  SEND_STRING 0,"'TEST BUFFER, CAI[',ITOA(CADDX),'].CAI[CADDX].CA_TIME_OF_LAST_SEND_RX = ',CAI[CADDX].CA_TIME_OF_LAST_SEND_RX"
  SEND_STRING 0,"'TEST BUFFER, CAI[',ITOA(CADDX),'].CA_DTR = ',ITOA(CAI[CADDX].CA_DTR)"
  SEND_STRING 0,"'TEST BUFFER, CAI[',ITOA(CADDX),'].CA_ITR = ',ITOA(CAI[CADDX].CA_ITR)"
  SEND_STRING 0,"'TEST BUFFER, CAI[',ITOA(CADDX),'].CA_IN_POINTER = ',ITOA(CAI[CADDX].CA_IN_POINTER)"
  SEND_STRING 0,"'TEST BUFFER, CAI[',ITOA(CADDX),'].CA_OUT_POINTER = ',ITOA(CAI[CADDX].CA_OUT_POINTER)"
*)
}


DEFINE_CALL 'CA_PROCESS STRING'(INTEGER CADDX,CHAR CADDX_STRING[150])

LOCAL_VAR INTEGER LENGTH_OF_CADDX_STRING
LOCAL_VAR INTEGER STARTING_POSITION_OF_PACKET
LOCAL_VAR INTEGER ENDING_POSITION_OF_PACKET
{
      CAI[CADDX].CA_DATE_OF_LAST_SEND_RX = DATE
      CAI[CADDX].CA_TIME_OF_LAST_SEND_RX = TIME	
			LENGTH_OF_CADDX_STRING = LENGTH_STRING(CADDX_STRING)
			IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,"'LENGTH OF CADDX STRING = ',LENGTH_OF_CADDX_STRING"
				STARTING_POSITION_OF_PACKET = FIND_STRING(CADDX_STRING,"$0A",1)
			IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,"'STARTING_POSITION_OF_PACKET = ',STARTING_POSITION_OF_PACKET"		
				ENDING_POSITION_OF_PACKET = FIND_STRING(CADDX_STRING,"$0D",1)
			IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,"'ENDING_POSITION_OF_PACKET = ',ENDING_POSITION_OF_PACKET"	
					IF((LENGTH_OF_CADDX_STRING <> ENDING_POSITION_OF_PACKET) AND (ENDING_POSITION_OF_PACKET <> 0) AND (STARTING_POSITION_OF_PACKET <> 0))
					{
					IF (CAI[CADDX].CA_DEBUG)
						SEND_STRING 0,"'MULTIPLE PACKETS RECEIVED FROM CADDX'"					
					CALL 'PROCESS MULTIPLE PACKETS'(CADDX,CADDX_STRING,LENGTH_OF_CADDX_STRING,ENDING_POSITION_OF_PACKET,STARTING_POSITION_OF_PACKET)
					}
					ELSE
					{
						IF((ENDING_POSITION_OF_PACKET <> 0) AND (STARTING_POSITION_OF_PACKET = 0)) 
							{
								CALL 'SPLIT PACKETS'(CADDX,CADDX_STRING)
						  }
							ELSE IF((ENDING_POSITION_OF_PACKET = 0) AND (STARTING_POSITION_OF_PACKET <> 0))
								{
								CALL 'SPLIT PACKETS'(CADDX,CADDX_STRING)
								}							
								ELSE
									{
											CALL 'CA_PROCESS FEEDBACK'(CADDX,LEFT_STRING(CADDX_STRING,ENDING_POSITION_OF_PACKET))
											IF (CAI[CADDX].CA_DEBUG)
												SEND_STRING 0,"'SENDING ',LEFT_STRING(CADDX_STRING,ENDING_POSITION_OF_PACKET),' TO CA_PROCESS FEEDBACK'"											
											
									}
					}
}

DEFINE_CALL 'PROCESS MULTIPLE PACKETS'(INTEGER CADDX,CHAR CADDX_MULTIPLE_PACKETS[150],INTEGER LENGTH_OF_MULTIPLE_PACKETS,INTEGER ENDING_POSITION_OF_FIRST_PACKET,INTEGER STARTING_POSITION_OF_FIRST_PACKET)
LOCAL_VAR INTEGER STILL_PACKETS_LEFT
LOCAL_VAR	INTEGER STARTING_POSITION_OF_NEXT_PACKET
LOCAL_VAR	INTEGER ENDING_POSITION_OF_NEXT_PACKET
LOCAL_VAR CHAR    FIRST_PACKET[100]
LOCAL_VAR CHAR    SPLIT_FIRST_PACKET[100]
{
			STILL_PACKETS_LEFT = 1
			IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,"'STARTING_POSITION_OF_FIRST_PACKET = ',STARTING_POSITION_OF_FIRST_PACKET"		
			IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,"'ENDING_POSITION_OF_FIRST_PACKET = ',ENDING_POSITION_OF_FIRST_PACKET"				
			IF(STARTING_POSITION_OF_FIRST_PACKET > ENDING_POSITION_OF_FIRST_PACKET)
			{

						SPLIT_FIRST_PACKET = LEFT_STRING(CADDX_MULTIPLE_PACKETS,ENDING_POSITION_OF_FIRST_PACKET)
									CALL 'SPLIT PACKETS'(CADDX,SPLIT_FIRST_PACKET)
												REMOVE_STRING(CADDX_MULTIPLE_PACKETS,SPLIT_FIRST_PACKET,1)
			}
			ELSE
			{
			FIRST_PACKET = LEFT_STRING(CADDX_MULTIPLE_PACKETS,ENDING_POSITION_OF_FIRST_PACKET)
			IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,"'FIRST PACKET OF MULTIPLE PACKET STRING = ',FIRST_PACKET"
			CALL 'CA_PROCESS FEEDBACK'(CADDX,FIRST_PACKET)
			IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,"'MULTIPLE PACKET STRING NOW EQUALS BEFORE REMOVE_STRING = ',CADDX_MULTIPLE_PACKETS" 
			REMOVE_STRING(CADDX_MULTIPLE_PACKETS,FIRST_PACKET,1)
			}

			IF (CAI[CADDX].CA_DEBUG)
				SEND_STRING 0,"'MULTIPLE PACKET STRING NOW EQUALS = ',CADDX_MULTIPLE_PACKETS"
				WHILE(STILL_PACKETS_LEFT = 1)
				{
				STARTING_POSITION_OF_NEXT_PACKET = FIND_STRING(CADDX_MULTIPLE_PACKETS,"$0A",1)
				IF (CAI[CADDX].CA_DEBUG)
					SEND_STRING 0,"'STARTING POSITION OF NEXT PACKET = ',STARTING_POSITION_OF_NEXT_PACKET"	
				ENDING_POSITION_OF_NEXT_PACKET = FIND_STRING(CADDX_MULTIPLE_PACKETS,"$0D",1)
				IF (CAI[CADDX].CA_DEBUG)
					SEND_STRING 0,"'ENDING POSITION OF NEXT PACKET = ',ENDING_POSITION_OF_NEXT_PACKET"	
					IF((STARTING_POSITION_OF_NEXT_PACKET <> 0) AND (ENDING_POSITION_OF_NEXT_PACKET <> 0))
					{					
						IF((LENGTH_OF_MULTIPLE_PACKETS - STARTING_POSITION_OF_NEXT_PACKET) <> ENDING_POSITION_OF_NEXT_PACKET)
						{
						IF (CAI[CADDX].CA_DEBUG)
							SEND_STRING 0,"'NEXT PACKET = ',LEFT_STRING(CADDX_MULTIPLE_PACKETS,ENDING_POSITION_OF_NEXT_PACKET)"						
						CALL 'CA_PROCESS FEEDBACK'(CADDX,LEFT_STRING(CADDX_MULTIPLE_PACKETS,ENDING_POSITION_OF_NEXT_PACKET))
						REMOVE_STRING(CADDX_MULTIPLE_PACKETS,LEFT_STRING(CADDX_MULTIPLE_PACKETS,ENDING_POSITION_OF_NEXT_PACKET),1)						
						STILL_PACKETS_LEFT = 1
						}
						ELSE
						{
						IF (CAI[CADDX].CA_DEBUG)
							SEND_STRING 0,"'NEXT PACKET = ',LEFT_STRING(CADDX_MULTIPLE_PACKETS,ENDING_POSITION_OF_NEXT_PACKET)"						
						CALL 'CA_PROCESS FEEDBACK'(CADDX,LEFT_STRING(CADDX_MULTIPLE_PACKETS,ENDING_POSITION_OF_NEXT_PACKET))
						STILL_PACKETS_LEFT = 0
						}
					}
					ELSE
					{
					STILL_PACKETS_LEFT = 0
							IF((ENDING_POSITION_OF_NEXT_PACKET = 0) AND (STARTING_POSITION_OF_NEXT_PACKET <> 0))
								{
									CALL 'SPLIT PACKETS'(CADDX,CADDX_MULTIPLE_PACKETS)
								}

					}
				}
}


DEFINE_CALL 'SPLIT PACKETS'(INTEGER CADDX,CHAR SPLIT_PACKET[100])
LOCAL_VAR INTEGER EVEN_TEST
LOCAL_VAR CHAR    JOINED_SPLIT_PACKETS[150]
{
	SEND_STRING 0,"'SPLIT PACKET RECEIVED = ',SPLIT_PACKET"
	SPLIT_PACKET_COUNT++
	SPLIT_PACKETS_ARRAY[SPLIT_PACKET_COUNT].SPLIT_PACKET_RECEIVED = SPLIT_PACKET
	EVEN_TEST = (SPLIT_PACKET_COUNT / 2)
	EVEN_TEST = EVEN_TEST + EVEN_TEST
	IF (EVEN_TEST = SPLIT_PACKET_COUNT)
	{
	  JOINED_SPLIT_PACKETS = "SPLIT_PACKETS_ARRAY[SPLIT_PACKET_COUNT - 1].SPLIT_PACKET_RECEIVED,SPLIT_PACKETS_ARRAY[SPLIT_PACKET_COUNT].SPLIT_PACKET_RECEIVED"
	  IF (CAI[CADDX].CA_DEBUG)	  
	    SEND_STRING 0,"'JOINED SPLIT PACKETS = ',JOINED_SPLIT_PACKETS"
	  CALL 'CA_PROCESS FEEDBACK'(CADDX,JOINED_SPLIT_PACKETS)
	}
	IF(SPLIT_PACKET_COUNT = 50)
	{
	  SPLIT_PACKET_COUNT = 0
	}
}

(***********************************************************)
(*                STARTUP CODE GOES BELOW                  *)
(***********************************************************)
DEFINE_START

(***********************************************************)
(*                THE EVENTS GO BELOW                      *)
(***********************************************************)
DEFINE_EVENT

DATA_EVENT [CAD]
{
  ONLINE :
  {
    LOCAL_VAR CADDX
    LOCAL_VAR CADDX_IDENTIFIED
    LOCAL_VAR TEST_POINT
    OFF[CADDX]
    OFF[CADDX_IDENTIFIED]
    WHILE ((CADDX < CA_NUMBER_OF_CADDXS) AND
          (!CADDX_IDENTIFIED))
    {
      CADDX = CADDX + 1
      IF (DATA.DEVICE = CAD[CADDX])
        ON[CADDX_IDENTIFIED]
    }    
    
    IF (CADDX_IDENTIFIED)
    {
      OFF[CAI[CADDX].CA_SPONT_DETECTED]
      OFF[CAI[CADDX].CA_PROCESS_SPONT_FBACK]
      OFF[CAI[CADDX].CA_PROCESSED_SPONT_FBACK]
      CAI[CADDX].CA_DTR = 1
      CAI[CADDX].CA_ITR = 1
      CAI[CADDX].CA_IN_POINTER = 1
      CAI[CADDX].CA_OUT_POINTER = 1
      CAI[CADDX].CA_LAST_ONLINE_TIME = TIME
      CAI[CADDX].CA_LAST_ONLINE_DATE = DATE
      CADI[CADDX].CA_LAST_ONLINE_TIME = TIME
      CADI[CADDX].CA_LAST_ONLINE_DATE = DATE
      SEND_STRING 0,"'CADDX NUMBER ',ITOA(CADDX),' HAS COME ONLINE'"
			SEND_COMMAND CAD[CADDX],'SET BAUD 9600,N,8,1,DISABLE'
			            IF (CAI[CADDX].CA_DEBUG)
					SEND_COMMAND CAD[CADDX],"'GET BAUD'" 			
      ON[CADI[CADDX].CA_ONLINE]
      IF (CAI[CADDX].CA_OFFLINE_COUNT >= 3)
      {
        SEND_STRING 0,"'CADDX ',ITOA(CADDX),' HAS QUICKLY GONE OFFLINE THREE TIMES'"
        OFF[CAI[CADDX].CA_OFFLINE_COUNT]
      }  
      ELSE
      {
      }    
    }  
  }
  
  OFFLINE :
  {
    LOCAL_VAR CADDX
    LOCAL_VAR CADDX_IDENTIFIED
    LOCAL_VAR TEST_POINT
    LOCAL_VAR LOCAL_COUNT
    LOCAL_VAR TICA_SINCE_LAST_OFFLINE
    OFF[CADDX]
    OFF[CADDX_IDENTIFIED]
    WHILE ((CADDX < CA_NUMBER_OF_CADDXS) AND
          (!CADDX_IDENTIFIED))
    {
      CADDX = CADDX + 1
      IF (DATA.DEVICE = CAD[CADDX])
        ON[CADDX_IDENTIFIED]
    }    
    
    IF (CADDX_IDENTIFIED)
    {
      SEND_STRING 0,"'CADDX NUMBER ',ITOA(CADDX),' HAS GONE OFFLINE'"
      OFF[CADI[CADDX].CA_ONLINE]
      CAI[CADDX].CA_LAST_OFFLINE_TIME = TIME
      CAI[CADDX].CA_LAST_OFFLINE_DATE = DATE
      CADI[CADDX].CA_LAST_OFFLINE_TIME = TIME
      CADI[CADDX].CA_LAST_OFFLINE_DATE = DATE
      OFF[CAI[CADDX].CA_RX_MODE]
      CALL 'CA_CALCULATE TIME SINCE LAST OFFLINE' (CADDX,TICA_SINCE_LAST_OFFLINE)
      IF (TICA_SINCE_LAST_OFFLINE < 30)
      {
        CAI[CADDX].CA_OFFLINE_COUNT++
        SEND_STRING 0,"'CAI[',ITOA(CADDX),'].CA_OFFLINE_COUNT = ',ITOA(CAI[CADDX].CA_OFFLINE_COUNT)"
      }
        
      OFF[LOCAL_COUNT]
      WHILE (LOCAL_COUNT < 6)
      {
        LOCAL_COUNT++
	(* RESET ANY VARIABLES THAT SHOULD BE RESET WHEN CADDX GOES OFFLINE *)
      }  
    }  
  }
  
  STRING :
  {
    LOCAL_VAR CADDX
    LOCAL_VAR CADDX_IDENTIFIED
    LOCAL_VAR TEST_POINT
    OFF[CADDX]
    OFF[CADDX_IDENTIFIED]
    WHILE ((CADDX < CA_NUMBER_OF_CADDXS) AND
          (!CADDX_IDENTIFIED))
    {
      CADDX = CADDX + 1
      IF (DATA.DEVICE = CAD[CADDX])
        ON[CADDX_IDENTIFIED]
    }    
    
    IF (!CAI[CADDX].CA_DTR)
    {
      OFF[CAI[CADDX].CA_VALID_FEEDBACK]
			SEND_STRING 0,"'A POTENTIAL ANSWER COMMUNICATION HAS BEEN RECEIVED FROM CADDX ',ITOA(CADDX)"
			IF (CAI[CADDX].CA_DEBUG)
			    SEND_STRING 0,"'POTENTIAL ANSWER COMMUNICATION = ',DATA.TEXT"  
			CAI[CADDX].CA_BUFFER = DATA.TEXT
      CALL 'CA_PROCESS STRING' (CADDX,CAI[CADDX].CA_BUFFER)
			CLEAR_BUFFER CAI[CADDX].CA_BUFFER
      IF (CAI[CADDX].CA_VALID_FEEDBACK)
        ON[CAI[CADDX].CA_FINISHED]
    }
    ELSE
    {
			IF (CAI[CADDX].CA_DEBUG)
			    SEND_STRING 0,"'A SPONTANEOUS COMMUNICATION HAS BEEN RECEIVED FROM CADDX ',ITOA(CADDX)"
			IF (CAI[CADDX].CA_DEBUG)
			    SEND_STRING 0,"'SPONTANEOUS COMMUNICATION = ',DATA.TEXT" 	    
			CAI[CADDX].CA_BUFFER = DATA.TEXT
      CALL 'CA_PROCESS STRING' (CADDX,CAI[CADDX].CA_BUFFER)
			CLEAR_BUFFER CAI[CADDX].CA_BUFFER
    }  
  }
}    

(***********************************************************)
(*            THE ACTUAL PROGRAM GOES BELOW                *)
(***********************************************************)
DEFINE_PROGRAM
OFF[CA_GLOBAL_COUNT1]
WHILE (CA_GLOBAL_COUNT1 < CA_NUMBER_OF_CADDXS)
{
  CA_GLOBAL_COUNT1 = CA_GLOBAL_COUNT1 + 1
  IF (CADI[CA_GLOBAL_COUNT1].CA_ONLINE)
  {
    CALL 'CA_SEND FROM BUFFER' (CA_GLOBAL_COUNT1)
    CALL 'CA_MANAGE CODE_SEND_WINDOW' (CA_GLOBAL_COUNT1)
  }  
}

(***********************************************************)
(*                     END OF PROGRAM                      *)
(*        DO NOT PUT ANY CODE BELOW THIS COMMENT           *)
(***********************************************************)
